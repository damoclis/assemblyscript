{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/abiutil.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/inserter.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","OperatorKind","common_1","diagnostics_1","types_1","ast_1","util_1","resolver_1","flow_1","abi_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","diagnostics","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","getAbiInfo","AbiData","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","source","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","text","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Operation_not_supported","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","DiagnosticEmitter","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","normalizedPath","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","infoRelated","warningRelated","errorRelated","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","typeName","TypeName","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameStr","ACTION","DATABASE","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","isSimpleType","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","Cannot_find_name_0","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","IndentUtil","indentNum","indent1","padding","pushRow","row","addPadding","subPadding","addAll","body_1","body_1_1","AbiHelper","abiTypeLookup","AbiType","AstUtil","getInternalName","extendedContract","haveDecorator","impledInterface","interfaceName","implementsTypes_1","implementsTypes_1_1","impledSerializable","impled","parentImpled","isMap","isArrayMap","TypeAnalyzer","abiType","getAbiType","MAP","lookupElement","NUMBER","getAbiDeclareType","getArgs","argType","args_1","args_1_1","getAsTypes","findSourceAbiType","aliasTypeName","findSourceAsType","getArrayArgAbiType","sourceTypeName","sourceType","getArrayArgType","Strings","isAroundQuotation","undefined","beginChar","removeQuotation","AbiUtils","checkActionName","checkDatabaseName","name_1","name_1_1","aChar","DATABASE_CHARSETS","Indenter","indentX1","indentX2","indentX4","indent","increase","decrease","getContent","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","typeToString","members_2","members_2_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","abiutil_1","primitiveutil_1","inserter_1","TypeDef","newTypeName","new_type_name","StructDef","fileds","pushFields","ActionDef","TableDef","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abi","typeLookup","structLookup","elementLookup","typeAliasSet","insertPoints","init","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","indenter","classAttatchCode","resolveClassPrototype","content","console","getDatabaseInfo","actionDecorate","contractName","contractInstance","isActionFuncPrototype","funcProto","resolveFuncPrototype","funcName","allParams","typeInfo","paramName","classProto","classToStruct","argAbiType","argTypeName","returnTypeInfo","decorators_1","decorators_1_1","getString","ele","funcPrototype","struct","parameters_1","parameters_1_1","addAbiTypeAlias","addToStruct","action","asTypes","asTypes_1","asTypes_1_1","asType","addFiledFromClass","fieldDeclare","memberType","insertCode","keys","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","classDeclaration","serialize","deserialize","serializeField","deserializeField","primaryKey","typeAnalyzer","argAbiTypeEnum","abiTypeEnum","atStart","serializeClassname","resolve","indentity"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,OAAA,aAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAKAA,IAAA,2BAxEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,YAAW,KA4EV3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,aAAerD,EAAA4C,eAAiB,QAG7C,SAAiBU,GAEFA,EAAAC,MAAQ,GAERD,EAAAE,GAAK,KACLF,EAAAG,IAAM,MACNH,EAAAI,IAAM,MACNJ,EAAAK,IAAM,MACNL,EAAAM,MAAQ,QACRN,EAAAO,GAAK,KACLP,EAAAQ,IAAM,MACNR,EAAAS,IAAM,MACNT,EAAAU,IAAM,MACNV,EAAAW,MAAQ,QACRX,EAAAY,KAAO,OACPZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,KAAO,OACPf,EAAAgB,MAAQ,QACRhB,EAAAiB,MAAQ,QACRjB,EAAAkB,MAAQ,QACRlB,EAAAmB,MAAQ,QACRnB,EAAAoB,MAAQ,QACRpB,EAAAqB,MAAQ,QACRrB,EAAAsB,MAAQ,QACRtB,EAAAuB,MAAQ,QACRvB,EAAAwB,MAAQ,QACRxB,EAAAyB,MAAQ,QACRzB,EAAA0B,MAAQ,OACR1B,EAAA2B,OAAS,SACT3B,EAAA4B,QAAU,UACV5B,EAAA6B,OAAS,SACT7B,EAAA8B,OAAS,SACT9B,EAAA+B,QAAU,UACV/B,EAAAgC,QAAU,UAEVhC,EAAAiC,MAAQ,OACRjC,EAAAkC,MAAQ,OACRlC,EAAAmC,OAAS,QAETnC,EAAAoC,MAAQ,OACRpC,EAAAqC,OAAS,QACTrC,EAAAsC,YAAc,cAEdtC,EAAAuC,WAAa,aACbvC,EAAAwC,mBAAqB,qBACrBxC,EAAAyC,cAAgB,gBAChBzC,EAAA0C,gBAAkB,kBAClB1C,EAAA2C,mBAAqB,qBACrB3C,EAAA4C,iBAAmB,mBACnB5C,EAAA6C,2BAA6B,6BAC7B7C,EAAA8C,2BAA6B,6BAC7B9C,EAAA+C,wBAA0B,0BAC1B/C,EAAAgD,iBAAmB,mBACnBhD,EAAAiD,oBAAsB,sBAEtBjD,EAAAkD,GAAK,KACLlD,EAAAmD,IAAM,MACNnD,EAAAoD,IAAM,MACNpD,EAAAqD,IAAM,MACNrD,EAAAsD,MAAQ,QACRtD,EAAAuD,GAAK,KACLvD,EAAAwD,IAAM,MACNxD,EAAAyD,IAAM,MACNzD,EAAA0D,IAAM,MACN1D,EAAA2D,MAAQ,QACR3D,EAAA4D,KAAO,OACP5D,EAAA6D,IAAM,MACN7D,EAAA8D,IAAM,MACN9D,EAAA+D,KAAO,OACP/D,EAAAgE,OAAS,SACThE,EAAAiE,MAAQ,QACRjE,EAAAkE,WAAa,aACblE,EAAAmE,IAAM,MACNnE,EAAAoE,IAAM,MACNpE,EAAAqE,gBAAkB,kBAClBrE,EAAAsE,YAAc,cACdtE,EAAAuE,KAAO,OACPvE,EAAAwE,MAAQ,QACRxE,EAAAyE,UAAY,YACZzE,EAAA0E,WAAa,aACb1E,EAAA2E,WAAa,aACb3E,EAAA4E,WAAa,aACb5E,EAAA6E,WAAa,aACb7E,EAAA8E,kBAAoB,oBACpB9E,EAAA+E,YAAc,cACd/E,EAAAgF,YAAc,cACdhF,EAAAiF,YAAc,cACdjF,EAAAkF,aAAe,eACflF,EAAAmF,aAAe,eAEfnF,EAAAoF,MAAQ,QACRpF,EAAAqF,IAAM,MACNrF,EAAAsF,IAAM,MACNtF,EAAAuF,MAAQ,UACRvF,EAAAwF,QAAU,YACVxF,EAAAyF,KAAO,SACPzF,EAAA0F,OAAS,WACT1F,EAAA2F,QAAU,YACV3F,EAAA4F,QAAU,YACV5F,EAAA6F,SAAW,aACX7F,EAAA8F,YAAc,eACd9F,EAAA+F,MAAQ,UACR/F,EAAAgG,WAAa,eAvG5B,CAAiBtJ,EAAAsD,gBAAAtD,EAAAsD,cAAa,KA2G9B,IAAAiG,EAAA9I,EAAA,IAAST,EAAAwJ,QAAAD,EAAAC,QACT,IAAAC,EAAAhJ,EAAA,IAAST,EAAA0J,OAAAD,EAAAC,OACT,IAAAC,EAAAlJ,EAAA,IAAST,EAAA4J,SAAAD,EAAAC,SAAU5J,EAAA6J,cAAAF,EAAAE,w5BC/MlB,IA+IWC,EA/IXC,EAAAtJ,EAAA,GAmBDuJ,EAAAvJ,EAAA,GAMAwJ,EAAAxJ,EAAA,GAOAyJ,EAAAzJ,EAAA,GAiDA0J,EAAA1J,EAAA,GASA2J,EAAA3J,EAAA,GAIA4J,EAAA5J,EAAA,IAGA6J,EAAA7J,EAAA,IAGA8J,EAAA,WAaA,OAZE,SAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARAtK,KAAAkK,YAEAlK,KAAAmK,kBAEAnK,KAAAoK,oBAEApK,KAAAqK,cAEArK,KAAAsK,kBAXX,GAgBAC,EAAA,WAWA,OAVE,SAESJ,EAEAC,EAEAC,EAEAC,GANAtK,KAAAmK,kBAEAnK,KAAAoK,oBAEApK,KAAAqK,cAEArK,KAAAsK,kBATX,GAcAE,EAAA,WAUA,OARE,SAESH,EAEAC,EAEAG,GAJAzK,KAAAqK,cAEArK,KAAAsK,iBAEAtK,KAAAyK,eARX,GA6DA,SAASC,EAA0BC,EAA8BC,GAE/D,OADAC,OAAOD,EAAIE,QACHH,GACN,KAAKf,EAAAmB,cAAcC,SACnB,KAAKpB,EAAAmB,cAAcE,gBACjB,OAAQL,EAAIM,WAAW,IACrB,QACE,GAAW,MAAPN,EAAa,OAAOpB,EAAa2B,YACrC,GAAW,OAAPP,EAAc,OAAOpB,EAAa4B,YACtC,MAEF,SACE,GAAW,MAAPR,EAAa,OAAOpB,EAAa6B,sBACrC,GAAW,OAAPT,EAAc,OAAOpB,EAAa8B,sBACtC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOpB,EAAa+B,IACpC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOpB,EAAagC,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOpB,EAAaiC,IACpC,GAAW,MAAPb,EAAa,OAAOpB,EAAakC,IACrC,MAEF,QACE,GAAW,KAAPd,EAAY,OAAOpB,EAAamC,IACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOpB,EAAaoC,IACpC,MAEF,QACE,GAAW,KAAPhB,EAAY,OAAOpB,EAAaqC,YACpC,MAEF,SACE,GAAW,KAAPjB,EAAY,OAAOpB,EAAasC,WACpC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOpB,EAAauC,YACpC,MAEF,QACE,GAAW,MAAPnB,EAAa,OAAOpB,EAAawC,GACrC,MAEF,QACE,GAAW,MAAPpB,EAAa,OAAOpB,EAAayC,GACrC,MAEF,QACE,GAAW,KAAPrB,EAAY,OAAOpB,EAAa0C,GACpC,GAAW,MAAPtB,EAAa,OAAOpB,EAAa2C,GACrC,GAAW,MAAPvB,EAAa,OAAOpB,EAAa4C,YACrC,GAAW,OAAPxB,EAAc,OAAOpB,EAAa6C,cACtC,MAEF,QACE,GAAW,KAAPzB,EAAY,OAAOpB,EAAa8C,GACpC,GAAW,MAAP1B,EAAa,OAAOpB,EAAa+C,GACrC,GAAW,MAAP3B,EAAa,OAAOpB,EAAagD,YAIzC,MAEF,KAAK5C,EAAAmB,cAAc0B,gBACjB,OAAQ7B,EAAIM,WAAW,IACrB,QACE,GAAW,KAAPN,EAAY,OAAOpB,EAAakD,KACpC,GAAW,MAAP9B,EAAa,OAAOpB,EAAamD,WACrC,MAEF,QACE,GAAW,KAAP/B,EAAY,OAAOpB,EAAaoD,MACpC,GAAW,MAAPhC,EAAa,OAAOpB,EAAaqD,WACrC,MAEF,QACE,GAAW,KAAPjC,EAAY,OAAOpB,EAAasD,IACpC,MAEF,SACE,GAAW,KAAPlC,EAAY,OAAOpB,EAAauD,YAIxC,MAEF,KAAKnD,EAAAmB,cAAciC,iBACjB,OAAQpC,EAAIM,WAAW,IACrB,QACE,GAAW,MAAPN,EAAa,OAAOpB,EAAayD,YACrC,MAEF,QACE,GAAW,MAAPrC,EAAa,OAAOpB,EAAa0D,aAO7C,OAAO1D,EAAa2D,SA9JtB,SAAY3D,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA9J,EAAA8J,eAAA9J,EAAA8J,aAAY,KAkKxB,IAwhDY4D,EAwCAC,EAhkDZC,EAAA,SAAAC,GAkGE,SAAAD,EAEEE,QAAA,IAAAA,MAAA,MAFF,IAAAC,EAIEF,EAAA/M,KAAAR,KAAMwN,IAAYxN,KAjGpByN,EAAAC,QAAoB,GAEpBD,EAAAE,kBAAyB,EAWzBF,EAAAG,YAAgC,IAAIxG,IAEpCqG,EAAAI,eAAsC,IAAIzG,IAE1CqG,EAAAK,sBAAmE,IAAI1G,IAEvEqG,EAAAM,gBAAuC,IAAI3G,IAE3CqG,EAAAO,YAAmC,IAAI5G,IAEvCqG,EAAAQ,eAAiC,IAAI7G,IAmErCqG,EAAAS,YAAmB,EAyEXT,EAAAU,qBAAgD,KAjEtD,IAAIC,EAAe,IAAIxE,EAAAyE,OAAO5E,EAAA5G,cAAe,gBAAiB+G,EAAA0E,WAAWC,SACzEd,EAAKW,aAAeA,EACpB,IAAII,EAAa,IAAIC,EAAKhB,EAAMW,UAChCX,EAAKe,WAAaA,EAClBf,EAAKG,YAAYc,IAAIF,EAAWG,aAAcH,GAC9Cf,EAAKmB,SAAW,IAAI9E,EAAA+E,SAASpB,KAy6CjC,OArhD6BqB,EAAAxB,EAAAC,GA+G3BD,EAAArL,UAAA8M,WAAA,WAEE,OADc,IAAI/E,EAAAgF,QAAQhP,OAK5BsN,EAAArL,UAAAgN,mBAAA,SAAmBC,EAAoBC,EAAaC,EAAsBC,GAOxExE,OAAOwE,EAAe,GAAK,IAC3BxF,EAAAyF,SAASD,EAAaH,EAAQC,GAC9BtF,EAAAyF,SAAS,EAAGJ,EAAQC,EAAS,GAC7BtF,EAAAyF,SAASF,EAAcG,GAAIL,EAAQC,EAAS,GAC5CtF,EAAAyF,SAASD,EAAaH,EAAQC,EAAS,KAIzCpO,OAAAC,eAAIsM,EAAArL,UAAA,oBAAiB,KAArB,WACE,OAAO,oCAITqL,EAAArL,UAAAuN,8BAAA,SAEE5O,EAEA6O,QAAA,IAAAA,MAAqBhG,EAAApH,YAAYqN,MAEjC,IAAIC,EAAQ3P,KAAKoO,aAAauB,MAC9B,OAAO/F,EAAAgG,KAAKC,0BACVjG,EAAAgG,KAAKE,2BAA2BlP,EAAM+O,GACtC,KAAM,KAAM,KAAMF,EAAOE,IAK7BrC,EAAArL,UAAA8N,0BAAA,SAEEnP,EAEA6O,QAAA,IAAAA,MAAqBhG,EAAApH,YAAYqN,MAEjC,IAAIC,EAAQ3P,KAAKoO,aAAauB,MAC1BK,EAAapG,EAAAgG,KAAKE,2BAA2BlP,EAAM+O,GACvD,OAAO/F,EAAAgG,KAAKK,sBACVD,EACA,KACApG,EAAAgG,KAAKM,kBAAkBP,GACvB,KAAMF,EAAOE,IAQjBrC,EAAArL,UAAAkO,8BAAA,SAEEvP,EAEA6O,QAAA,IAAAA,MAAqBhG,EAAApH,YAAYqN,MAEjC,IAAIC,EAAQ3P,KAAKoO,aAAauB,MAC9B,OAAO/F,EAAAgG,KAAKQ,0BACVxG,EAAAgG,KAAKE,2BAA2BlP,EAAM+O,GACtC,KACA3P,KAAKmO,uBAAyBnO,KAAKmO,qBAAuBvE,EAAAgG,KAAKS,mBAAmB,GAChFzG,EAAAgG,KAAKU,gBACH1G,EAAAgG,KAAKW,qBAAqB9G,EAAAzG,cAAc0B,MAAOiL,GAC/C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAEf,KAAM,KAAMF,EAAK,EAAkBE,IAKvCrC,EAAArL,UAAAuO,+BAAA,SAEE5P,EAEA6O,QAAA,IAAAA,MAAqBhG,EAAApH,YAAYqN,MAEjC,IAAIC,EAAQ3P,KAAKoO,aAAauB,MAC9B,OAAO/F,EAAAgG,KAAKa,2BACV7G,EAAAgG,KAAKE,2BAA2BlP,EAAM+O,GACtC,GAAI,KAAMF,EAAOE,IAKrBrC,EAAArL,UAAAyO,mBAAA,SAEE9P,EAEA+P,EAEAC,EAEAnB,EAEAoB,GAEA,YANA,IAAAD,MAAkB5Q,KAAKwO,iBAEvB,IAAAiB,MAAqBhG,EAAApH,YAAYqN,WAEjC,IAAAmB,MAAiCxD,EAAeqC,MAEzC,IAAIoB,EACTlQ,EACA,IAAImQ,EACFnQ,EACAgQ,EACA5Q,KAAKmQ,8BAA8BvP,EAAM6O,GACzCoB,GAEFF,IAKJrD,EAAArL,UAAA+O,wBAAA,SAAwBC,GACtB,IAAInD,EAAwB9N,KAAK8N,sBAEjC,OADAjD,OAAOiD,EAAsBoD,IAAID,IAC1BnD,EAAsB5M,IAAI+P,IAInC3D,EAAArL,UAAAkP,WAAA,SAAWC,+BACTpR,KAAKoR,QAAUA,EAGfpR,KAAKqR,mBAAmB5H,EAAAzG,cAAcE,GAAIyG,EAAA2H,KAAKpO,IAC/ClD,KAAKqR,mBAAmB5H,EAAAzG,cAAcG,IAAKwG,EAAA2H,KAAKnO,KAChDnD,KAAKqR,mBAAmB5H,EAAAzG,cAAcI,IAAKuG,EAAA2H,KAAKlO,KAChDpD,KAAKqR,mBAAmB5H,EAAAzG,cAAcK,IAAKsG,EAAA2H,KAAKjO,KAChDrD,KAAKqR,mBAAmB5H,EAAAzG,cAAcM,MAAO8N,EAAQG,WACrDvR,KAAKqR,mBAAmB5H,EAAAzG,cAAcO,GAAIoG,EAAA2H,KAAK/N,IAC/CvD,KAAKqR,mBAAmB5H,EAAAzG,cAAcQ,IAAKmG,EAAA2H,KAAK9N,KAChDxD,KAAKqR,mBAAmB5H,EAAAzG,cAAcS,IAAKkG,EAAA2H,KAAK7N,KAChDzD,KAAKqR,mBAAmB5H,EAAAzG,cAAcU,IAAKiG,EAAA2H,KAAK5N,KAChD1D,KAAKqR,mBAAmB5H,EAAAzG,cAAcW,MAAOyN,EAAQI,WACrDxR,KAAKqR,mBAAmB5H,EAAAzG,cAAcY,KAAM+F,EAAA2H,KAAK1N,MACjD5D,KAAKqR,mBAAmB5H,EAAAzG,cAAca,IAAK8F,EAAA2H,KAAKzN,KAChD7D,KAAKqR,mBAAmB5H,EAAAzG,cAAcc,IAAK6F,EAAA2H,KAAKxN,KAChD9D,KAAKqR,mBAAmB5H,EAAAzG,cAAc0B,MAAOiF,EAAA2H,KAAKG,MAClDzR,KAAKqR,mBAAmB5H,EAAAzG,cAAc2B,OAAQgF,EAAA2H,KAAKxN,KACnD9D,KAAKqR,mBAAmB5H,EAAAzG,cAAc4B,QAAS+E,EAAA2H,KAAK1N,MACpD5D,KAAKwO,WAAWkD,IAAIjI,EAAAzG,cAAc8B,OAAQ,IAAI6M,EAC5ClI,EAAAzG,cAAc8B,OACd9E,KAAKwO,WACLxO,KAAK+P,0BAA0BtG,EAAAzG,cAAc8B,OAAQ2E,EAAApH,YAAYuP,OAASnI,EAAApH,YAAYwP,SACtFxE,EAAeyE,UAEjB9R,KAAKwO,WAAWkD,IAAIjI,EAAAzG,cAAc+B,QAAS,IAAI4M,EAC7ClI,EAAAzG,cAAc+B,QACd/E,KAAKwO,WACLxO,KAAK+P,0BAA0BtG,EAAAzG,cAAc+B,QAAS0E,EAAApH,YAAYuP,OAASnI,EAAApH,YAAYwP,SACvFxE,EAAeyE,UAEjB9R,KAAKwO,WAAWkD,IAAIjI,EAAAzG,cAAcgC,QAAS,IAAI2M,EAC7ClI,EAAAzG,cAAcgC,QACdhF,KAAKwO,WACLxO,KAAK+P,0BAA0BtG,EAAAzG,cAAcgC,QAASyE,EAAApH,YAAYuP,OAASnI,EAAApH,YAAYwP,SACvFxE,EAAeyE,UAEbV,EAAQW,WAAU,IAAgB/R,KAAKqR,mBAAmB5H,EAAAzG,cAAce,KAAM4F,EAAA2H,KAAKvN,MAGvF/D,KAAKgS,wBAAwBvI,EAAAzG,cAAcuC,WAAYoE,EAAA2H,KAAKlO,IAC1D6O,QAAQb,EAAQc,SAAWzI,EAAAL,OAAO+I,OAAS1I,EAAAL,OAAOgJ,SACpDpS,KAAKgS,wBAAwBvI,EAAAzG,cAAcyC,cAAekE,EAAA2H,KAAK1N,KAC7DqO,QAAQb,EAAQiB,SAAW,EAAI,EAAG,IACpCrS,KAAKgS,wBAAwBvI,EAAAzG,cAAc0C,gBAAiBiE,EAAA2H,KAAKlO,IAC/D6O,QAAQb,EAAQkB,WAAY,IAC9BtS,KAAKgS,wBAAwBvI,EAAAzG,cAAc2C,mBAAoBgE,EAAA2H,KAAKlO,IAClE6O,QAAQb,EAAQmB,kBAAmB,IACrCvS,KAAKgS,wBAAwBvI,EAAAzG,cAAc4C,iBAAkB+D,EAAA2H,KAAKlO,IAChE6O,QAAQb,EAAQoB,gBAAiB,IACnCxS,KAAKgS,wBAAwBvI,EAAAzG,cAAc6C,2BAA4B8D,EAAA2H,KAAK1N,KAC1EqO,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9D/R,KAAKgS,wBAAwBvI,EAAAzG,cAAc8C,2BAA4B6D,EAAA2H,KAAK1N,KAC1EqO,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9D/R,KAAKgS,wBAAwBvI,EAAAzG,cAAc+C,wBAAyB4D,EAAA2H,KAAK1N,KACvEqO,QAAQb,EAAQW,WAAU,GAAwB,EAAI,EAAG,IAC3D/R,KAAKgS,wBAAwBvI,EAAAzG,cAAcgD,iBAAkB2D,EAAA2H,KAAK1N,KAChEqO,QAAQb,EAAQW,WAAU,GAAiB,EAAI,EAAG,IACpD/R,KAAKgS,wBAAwBvI,EAAAzG,cAAciD,oBAAqB0D,EAAA2H,KAAK1N,KACnEqO,QAAQb,EAAQW,WAAU,IAAoB,EAAI,EAAG,IAUvD,IAPA,IAAIU,EAAgB,IAAIxL,MACpByL,EAAgB,IAAItL,IACpBuL,EAAoB,IAAIvL,IACxBwL,EAAgB,IAAI3L,MACpB4L,EAAmB,IAAI5L,MAGlB5G,EAAI,EAAGyS,EAAI9S,KAAK0N,QAAQ5C,OAAQzK,EAAIyS,IAAKzS,EAAG,CACnD,IAAI0S,EAAS/S,KAAK0N,QAAQrN,GACtB2S,EAAO,IAAIvE,EAAKzO,KAAM+S,GAC1B/S,KAAK4N,YAAYc,IAAIsE,EAAKrE,aAAcqE,GAExC,IADA,IAAIC,EAAaF,EAAOE,WACfC,EAAI,EAAG5S,EAAI2S,EAAWnI,OAAQoI,EAAI5S,IAAK4S,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAKxJ,EAAAyJ,SAASzB,OACZ5R,KAAKsT,kBAAmCH,EAAWH,EAAMN,EAAeC,GACxE,MAEF,KAAK/I,EAAAyJ,SAASE,cACZvT,KAAKwT,wBAAgDL,EAAWH,EAAMJ,EAAeC,GACrF,MAEF,KAAKjJ,EAAAyJ,SAASI,OACZzT,KAAK0T,kBAAmCP,EAAWH,EAAMP,EAAeC,GACxE,MAEF,KAAK9I,EAAAyJ,SAASM,SACZ3T,KAAK4T,oBAAuCT,EAAWH,GACvD,MAEF,KAAKpJ,EAAAyJ,SAASQ,iBACZ7T,KAAK8T,gBAAkCX,EAAWH,EAAMJ,EAAeC,GACvE,MAEF,KAAKjJ,EAAAyJ,SAASU,gBACZ/T,KAAKgU,eAAgCb,EAAWH,GAChD,MAEF,KAAKpJ,EAAAyJ,SAASY,oBACZjU,KAAKkU,mBAAwCf,EAAWH,GACxD,MAEF,KAAKpJ,EAAAyJ,SAASc,qBACZnU,KAAKoU,oBAA0CjB,EAAWH,GAC1D,MAEF,KAAKpJ,EAAAyJ,SAASgB,qBACZrU,KAAKsU,oBAA0CnB,EAAWH,EAAMJ,EAAeC,GAC/E,MAEF,KAAKjJ,EAAAyJ,SAASkB,gBACZvU,KAAKwU,yBAA0CrB,EAAWH,SAQlE,IAAgC,IAAAyB,EAAAC,EAAA/B,GAAiBgC,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAxC,KAAAE,EAAAC,EAAAJ,EAAArT,MAAA,GAAO0T,GAANhC,EAAA8B,EAAA,GAAMA,EAAA,IACd,IAASzU,EAAI,EAAGyS,EAAIkC,EAAYlK,OAAQzK,EAAIyS,IAAKzS,EAAG,CAClD,IAAI4U,EAAaD,EAAY3U,IACzB6U,EAAclV,KAAKmV,kBAAkBF,EAAW5K,YAAa4K,EAAW3K,iBAQ5E0I,EAAKoC,iBAAiBF,GANpBlV,KAAKqV,MACH3L,EAAA4L,eAAeC,iBACfN,EAAWxK,YAAYkF,MAAOsF,EAAWxK,YAAYnJ,0GAS7D,IAASjB,EAAI,EAAGyS,EAAIL,EAAc3H,OAAQzK,EAAIyS,IAAKzS,EAAG,CACpD,IAuBM6U,EAvBFM,EAAe/C,EAAcpS,GAC7B+J,EAAoBoL,EAAapL,kBACrC,GAAIA,GACEqL,GAAUzV,KAAK0V,cACjBtL,EAAkBuL,KAClBH,EAAanL,YACbmL,EAAalL,eACboI,IAGA8C,EAAatL,UAAUwH,IACrB8D,EAAarL,gBAAgBwL,KAC7BF,IACA,GAIFzV,KAAKqV,MACH3L,EAAA4L,eAAeM,kCACfxL,EAAkBuF,MAAO6F,EAAanL,YAAaD,EAAkBuL,WAKzE,GADIT,EAAclV,KAAKmV,kBAAkBK,EAAanL,YAAamL,EAAalL,gBAC/D,CACf,IAAIJ,EAAYsL,EAAatL,UACzB2L,EAAYL,EAAarL,gBAAgBwL,KAC7CzL,EAAUwH,IACRmE,EACAX,EAAYY,oBACVD,EACA3L,IAEF,QAGFW,QAAO,OAMb,IAA4B,IAAAkL,EAAArB,EAAAhC,GAAasD,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAlC,IAAAqB,EAAAlB,EAAAiB,EAAA1U,MAAA,GAAO5B,GAANsT,EAAAiD,EAAA,GAAMA,EAAA,QACd,IAAuC,IAAAC,GAAAC,OAAA,EAAAzB,EAAAhV,IAAO0W,EAAAF,EAAAtB,QAAAwB,EAAAvB,KAAAuB,EAAAF,EAAAtB,OAAE,CAAvC,IAAAyB,EAAAtB,EAAAqB,EAAA9U,MAAA,GAACgV,GAAAD,EAAA,GAAYE,GAAAF,EAAA,GAEhBhM,IADAwL,EAAYU,GAAapM,gBAAgBwL,KAC3BY,GAAalM,aAC/B,GAAIA,IACEoL,GAAUzV,KAAK0V,cACjBG,EACAxL,GACAQ,OAAO0L,GAAajM,gBACpBoI,IAGAM,EAAKwD,aAAaF,GAAYb,IAE9BzV,KAAKqV,MACH3L,EAAA4L,eAAeM,kCACfW,GAAapM,gBAAgBwF,MAC7BtF,GAAawL,QAKjB,GADIJ,GAAUzC,EAAKyD,aAAaZ,GAE9B7C,EAAKwD,aAAaF,GAAYb,QACzB,CACL,IAAIiB,GAAgB1W,KAAK2W,aAAad,GAClCa,IAAiBA,cAAyBE,EAC5C5D,EAAKwD,aAAaF,GAA6BI,IAE/C1W,KAAKqV,MACH3L,EAAA4L,eAAeM,kCACfW,GAAanM,kBAAkBuF,MAC/BqD,EAAKrE,aAAc4H,GAAanM,kBAAkBuL,4MAS9D9K,OAA2B,GAApB7K,KAAKkO,aACZlO,KAAK6W,oBAAsB7W,KAAK8W,aAAarN,EAAAzG,cAAcsE,aAC3DuD,OAAsC,GAA/B7K,KAAK6W,oBAAoBtH,IAChCvP,KAAK+W,eAAiB/W,KAAK8W,aAAarN,EAAAzG,cAAcgE,QACtD6D,OAAiC,GAA1B7K,KAAK+W,eAAexH,IAC3BvP,KAAKgX,wBAA0BhX,KAAK8W,aAAarN,EAAAzG,cAAcqE,iBAC/DwD,OAA0C,GAAnC7K,KAAKgX,wBAAwBzH,IAGpCvP,KAAKiX,wBAAuB,EAAcxN,EAAAzG,cAAckD,IACxDlG,KAAKiX,wBAAuB,EAAexN,EAAAzG,cAAcmD,KACzDnG,KAAKiX,wBAAuB,EAAexN,EAAAzG,cAAcoD,KACzDpG,KAAKiX,wBAAuB,EAAexN,EAAAzG,cAAcqD,KACzDrG,KAAKiX,wBAAuB,EAAiBxN,EAAAzG,cAAcsD,OAC3DtG,KAAKiX,wBAAuB,EAAcxN,EAAAzG,cAAcuD,IACxDvG,KAAKiX,wBAAuB,EAAexN,EAAAzG,cAAcwD,KACzDxG,KAAKiX,wBAAuB,EAAexN,EAAAzG,cAAcyD,KACzDzG,KAAKiX,wBAAuB,EAAexN,EAAAzG,cAAc0D,KACzD1G,KAAKiX,wBAAuB,EAAiBxN,EAAAzG,cAAc2D,OAC3D3G,KAAKiX,wBAAuB,GAAgBxN,EAAAzG,cAAc4D,MAC1D5G,KAAKiX,wBAAuB,GAAexN,EAAAzG,cAAc6D,KACzD7G,KAAKiX,wBAAuB,GAAexN,EAAAzG,cAAc8D,KACrDsK,EAAQW,WAAU,IAAgB/R,KAAKiX,wBAAuB,GAAgBxN,EAAAzG,cAAc+D,MAGhG/G,KAAKkX,iBAAmClX,KAAKJ,QAAQ6J,EAAAzG,cAAcyE,UAAW2F,EAAY+J,iBAC1FnX,KAAKoX,kBAAoCpX,KAAKJ,QAAQ6J,EAAAzG,cAAc0E,WAAY0F,EAAY+J,iBAC5FnX,KAAKqX,kBAAoCrX,KAAKJ,QAAQ6J,EAAAzG,cAAc2E,WAAYyF,EAAY+J,iBAC5FnX,KAAKsX,kBAAoCtX,KAAKJ,QAAQ6J,EAAAzG,cAAc4E,WAAYwF,EAAY+J,iBAC5FnX,KAAKuX,iBAAmCvX,KAAKJ,QAAQ6J,EAAAzG,cAAc6E,WAAYuF,EAAY+J,iBAC3FnX,KAAKwX,wBAA0CxX,KAAKJ,QAAQ6J,EAAAzG,cAAc8E,kBAAmBsF,EAAY+J,iBACzGnX,KAAKyX,kBAAoCzX,KAAKJ,QAAQ6J,EAAAzG,cAAc+E,YAAaqF,EAAY+J,iBAC7FnX,KAAK0X,kBAAoC1X,KAAKJ,QAAQ6J,EAAAzG,cAAcgF,YAAaoF,EAAY+J,iBAC7FnX,KAAK2X,kBAAoC3X,KAAKJ,QAAQ6J,EAAAzG,cAAciF,YAAamF,EAAY+J,iBAC7FnX,KAAK4X,kBAAoC5X,KAAKJ,QAAQ6J,EAAAzG,cAAckF,aAAckF,EAAY+J,iBAC9FnX,KAAK6X,kBAAoC7X,KAAKJ,QAAQ6J,EAAAzG,cAAcmF,aAAciF,EAAY+J,iBAG9F,IAAIvI,GAAW5O,KAAK4O,SACpB,IAASvO,EAAI,EAAGyS,EAAIF,EAAc9H,OAAQzK,EAAIyS,IAAKzS,EAAG,CACpD,IAAIyX,GAAgBlF,EAAcvS,GAC9B0X,GAAclN,OAAOiN,GAAcC,aACnCC,GAAcpJ,GAASqJ,gBAAgBF,GAAYnX,KAAMkX,GAAclH,QAC3E,GAAKoH,GACL,GAAIA,GAAY5E,MAAQhG,EAAY+J,gBAAiB,CACnD,IAAIe,GAAgCF,GAChCE,GAAcC,aAAa9K,EAAe+K,SAC5CpY,KAAKqV,MACH3L,EAAA4L,eAAe+C,yCACfN,GAAYpI,MAAwBqI,GAAaM,eAAe3C,MAIlEuC,GAAcC,aAAa9K,EAAekL,YAC1CT,GAAcK,aAAa9K,EAAekL,YAE1CvY,KAAKqV,MACH3L,EAAA4L,eAAekD,+DACf5O,EAAA6O,MAAMC,KAAKZ,GAAcQ,eAAe3I,MAAOoI,GAAYpI,QAG/DmI,GAAcI,cAAgBA,QAE9BlY,KAAKqV,MACH3L,EAAA4L,eAAeqD,sCACfZ,GAAYpI,OAOhB,IAAIiJ,GAAgBxH,EAAQwH,cAC5B,GAAIA,OACF,IAA0B,IAAAC,GAAAnE,EAAAkE,IAAaE,GAAAD,GAAAjE,QAAAkE,GAAAjE,KAAAiE,GAAAD,GAAAjE,OAAE,CAAhC,IAAAmE,GAAAhE,EAAA+D,GAAAxX,MAAA,GAAC0X,GAAAD,GAAA,GAAOnY,GAAAmY,GAAA,GACf,GAAKnY,GAAKkK,OAAV,CACA,IAAImO,GAAYrY,GAAKsK,WAAW,GAChC,GAAI+N,IAAS,IAAmBA,IAAS,GACvCjZ,KAAKgS,wBAAwBgH,GAAOrP,EAAA2H,KAAKlO,IAAK6O,QAAaiH,SAAStY,GAAM,UACrE,CACL,IAAIiN,GAAiB7N,KAAK6N,eAE1B,KADI4H,GAAU5H,GAAe3M,IAAIN,KAK5B,MAAM,IAAIuY,MAAM,2BAA6BvY,IAHhD,GAAIiN,GAAeqD,IAAI8H,IAAQ,MAAM,IAAIG,MAAM,6BAA+BvY,IAC9EiN,GAAea,IAAIsK,GAAOvD,4GASpCzV,KAAKoZ,eAAiCpZ,KAAKJ,QAAQ6J,EAAAzG,cAAciE,MAAOmG,EAAY+J,iBACpFnX,KAAKqZ,oBAAsCrZ,KAAKJ,QAAQ6J,EAAAzG,cAAckE,WAAYkG,EAAY+J,iBAC9FnX,KAAKsZ,aAA+BtZ,KAAKJ,QAAQ6J,EAAAzG,cAAcmE,IAAKiG,EAAY+J,iBAChFnX,KAAKuZ,aAA+BvZ,KAAKJ,QAAQ6J,EAAAzG,cAAcoE,IAAKgG,EAAY+J,iBAChFnX,KAAKwZ,cAAgBxZ,KAAKyZ,eAAehQ,EAAAzG,cAAcoF,OACvDpI,KAAK0Z,cAAgB1Z,KAAK2Z,gBAAgBlQ,EAAAzG,cAAcuF,OACxDvI,KAAK4Z,gBAAkB5Z,KAAK2Z,gBAAgBlQ,EAAAzG,cAAcwF,SAC1DxI,KAAK6Z,aAAe7Z,KAAK2Z,gBAAgBlQ,EAAAzG,cAAcyF,MACvDzI,KAAK8Z,eAAiB9Z,KAAK2Z,gBAAgBlQ,EAAAzG,cAAc0F,QACzD1I,KAAK+Z,gBAAkB/Z,KAAK2Z,gBAAgBlQ,EAAAzG,cAAc2F,SAC1D3I,KAAKga,gBAAkBha,KAAK2Z,gBAAgBlQ,EAAAzG,cAAc4F,SAC1D5I,KAAKia,iBAAmBja,KAAK2Z,gBAAgBlQ,EAAAzG,cAAc6F,UAC3D7I,KAAKka,mBAAqBla,KAAK2Z,gBAAgBlQ,EAAAzG,cAAc8F,aAC7D9I,KAAKma,cAAgBna,KAAK2Z,gBAAgBlQ,EAAAzG,cAAc+F,OACxD/I,KAAKoa,mBAAqBpa,KAAK2Z,gBAAgBlQ,EAAAzG,cAAcgG,gBAG7D,IAAiB,IAAAqR,GAAA3F,EAAA1U,KAAK4N,YAAY0M,UAAQC,GAAAF,GAAAzF,QAAA2F,GAAA1F,KAAA0F,GAAAF,GAAAzF,OAAE,CACtClV,GADGsT,EAAIuH,GAAAjZ,OACQ5B,QACnB,GAAMsT,EAAKD,OAAOyH,SAAW9a,MAC7B,IAAoB,IAAA+a,IAAAC,OAAA,EAAAhG,EAAAhV,EAAQ4a,WAAQK,GAAAF,GAAA7F,QAAA+F,GAAA9F,KAAA8F,GAAAF,GAAA7F,OAAA,CAA/B,IAAIa,GAAOkF,GAAArZ,MAAsBtB,KAAK4a,iBAAiBnF,mNAKxDnI,EAAArL,UAAArC,QAAR,SAAgBgB,EAAcwS,GAC5B,IAAIqC,EAAUzV,KAAK2W,aAAa/V,GAChC,IAAK6U,EAAS,MAAM,IAAI0D,MAAM,WAAavY,GAC3C,GAAI6U,EAAQrC,MAAQA,EAAM,MAAM,IAAI+F,MAAM,cAAgBvY,GAC1D,OAAO6U,GAIDnI,EAAArL,UAAA6U,aAAR,SAAqBlW,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMwM,EAAY+J,iBAC3C0D,EAAW7a,KAAK4O,SAASkM,aAA6B7Y,EAAW,MACrE,IAAK4Y,EAAU,MAAM,IAAI1B,MAAM,WAAavY,GAC5C,OAAOia,GAIDvN,EAAArL,UAAAwX,eAAR,SAAuB7Y,GACrB,IAAIqB,EAAYjC,KAAK2W,aAAa/V,GAClC,OAAKqB,GAAaA,EAAUmR,MAAQhG,EAAY2N,mBACzC/a,KAAK4O,SAASoM,gBAAmC/Y,EAAW,MADQ,MAKrEqL,EAAArL,UAAA0X,gBAAR,SAAwB/Y,GACtB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMwM,EAAY2N,oBAC3CF,EAAW7a,KAAK4O,SAASoM,gBAAmC/Y,EAAW,MAC3E,IAAK4Y,EAAU,MAAM,IAAI1B,MAAM,WAAavY,GAC5C,OAAOia,GAIDvN,EAAArL,UAAA2Y,iBAAR,SAAyBnF,eAEvB,OADAA,EAAQ/G,IAAIjF,EAAApH,YAAY4Y,eAChBxF,EAAQrC,MACd,KAAKhG,EAAY+J,gBACf,IAAI+D,EAAmCzF,EAASyF,gBAChD,GAAIA,MAAiB,IAAmB,IAAAC,EAAAzG,EAAAwG,EAAgBZ,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAA,CAAtC,IAAIyG,EAAMD,EAAA9Z,MAA8BtB,KAAK4a,iBAAiBS,qGACxF,MAEF,KAAKjO,EAAYkO,mBACf,IAAIC,EAAsC9F,EAAS8F,gBAC/CA,GAAiBvb,KAAK4a,iBAAiBW,GAC3C,IAAIC,EAAsC/F,EAAS+F,gBAC/CA,GAAiBxb,KAAK4a,iBAAiBY,GAC3C,MAEF,KAAKpO,EAAYqO,SACjB,KAAKrO,EAAYsO,SACjB,KAAKtO,EAAYuO,MACjB,KAAKvO,EAAYwO,MAAO/Q,QAAO,GAG/B,IAAIgR,EAAUpG,EAAQoG,QACtB,GAAIA,MAAS,IAAmB,IAAAC,EAAApH,EAAAmH,EAAQvB,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAA,CAA1ByG,EAAMU,EAAAza,MAAsBtB,KAAK4a,iBAAiBS,uGAKpE/N,EAAArL,UAAAoP,mBAAR,SAA2BzQ,EAAcob,GACvC,IAAIvG,EAAU,IAAI9D,EAChB/Q,EACAZ,KAAKwO,WACLxO,KAAK+P,0BAA0BnP,EAAM6I,EAAApH,YAAYuP,QACjDvE,EAAeyE,SAEjB2D,EAAQwG,QAAQD,GAChBhc,KAAKwO,WAAWkD,IAAI9Q,EAAM6U,IAIpBnI,EAAArL,UAAAgV,wBAAR,SAAgCiF,EAAoBC,GAClDtR,QAAQ7K,KAAKgO,YAAYkD,IAAIgL,IAC7B,IAAIzG,EAAUzV,KAAK2W,aAAawF,GAChC,GAAI1G,EAAS,CACX5K,OAAO4K,EAAQrC,MAAQhG,EAAY+J,iBACnC,IAAIiF,EAAepc,KAAK4O,SAASkM,aAA6BrF,EAAS,MACnE2G,GAAcpc,KAAKgO,YAAYU,IAAIwN,EAAUE,KAK7C9O,EAAArL,UAAA+P,wBAAR,SAAgCpR,EAAcob,EAAY1a,GACxDuJ,OAAOmR,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf3b,EACAZ,KAAKwO,WACLnB,EAAeqC,KACf1P,KAAKwP,8BAA8B5O,EAAM6I,EAAApH,YAAYma,MAAQ/S,EAAApH,YAAYuP,SAE3E0K,EAAOG,wBAAwBnb,EAAO0a,GACtChc,KAAKwO,WAAWkD,IAAI9Q,EAAM0b,IAIpBhP,EAAArL,UAAAya,sBAAR,SAA8B9b,EAAcob,EAAY1a,GACtDuJ,OAAOmR,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf3b,EACAZ,KAAKwO,WACLnB,EAAeqC,KACf1P,KAAKwP,8BAA8B5O,EAAM6I,EAAApH,YAAYma,MAAQ/S,EAAApH,YAAYuP,SAE3E0K,EAAOK,sBAAsBrb,EAAO0a,GACpChc,KAAKwO,WAAWkD,IAAI9Q,EAAM0b,IAI5BhP,EAAArL,UAAA2a,aAAA,SAAahc,EAAc6U,GACzB,IAAI5H,EAAiB7N,KAAK6N,eAC1B,GAAIA,EAAeqD,IAAItQ,IACRiN,EAAe3M,IAAIN,KAMjB6U,EAAS,CACtB,IAAIoH,EAASC,EAASjP,EAAe3M,IAAIN,GAAQ6U,GACjD,IAAKoH,EAKH,OAJA7c,KAAKqV,MACH3L,EAAA4L,eAAeyH,uBACftH,EAAQ6C,eAAe3I,MAAO/O,GAEzB6U,EAETA,EAAUoH,EAId,OADAhP,EAAea,IAAI9N,EAAM6U,GAClBA,GAITnI,EAAArL,UAAA0U,aAAA,SAAa/V,GACX,IAAIoc,EAAWhd,KAAK6N,eACpB,OAAImP,EAAS9L,IAAItQ,GAAcoc,EAAS9b,IAAIN,GACrC,MAIT0M,EAAArL,UAAAgb,cAAA,SAAcrc,GACZ,IAAIoc,EAAWhd,KAAK6N,eACpB,GAAImP,EAAS9L,IAAItQ,GAAO,OAAOoc,EAAS9b,IAAIN,GAC5C,MAAM,IAAIuY,MAAM,mBAIV7L,EAAArL,UAAAkT,kBAAR,SAEE9K,EAEAC,GAEA,IAAIsD,EAAc5N,KAAK4N,YACvB,OAAOA,EAAYsD,IAAI7G,GAChBuD,EAAY1M,IAAImJ,GAChBuD,EAAYsD,IAAI5G,GAChBsD,EAAY1M,IAAIoJ,GAChB,MAIDgD,EAAArL,UAAAyT,cAAR,SAEEwH,EAEA7S,EAEAC,EAEAoI,GAEA,OAAG,CACD,IAAIwC,EAAclV,KAAKmV,kBAAkB9K,EAAaC,GACtD,IAAK4K,EAAa,OAAO,KAGzB,IAAIO,EAAUP,EAAYiI,aAAaD,GACvC,GAAIzH,EAAS,OAAOA,EAGpB,GAAI/C,EAAcxB,IAAIgE,GAAc,CAClC,IAAIkI,EAAoB1K,EAAcxR,IAAIgU,GAC1C,GAAIkI,EAAkBlM,IAAIgM,GAAc,CACtC,IAAI3G,EAAe6G,EAAkBlc,IAAIgc,GACzC,GAAI3G,EAAalM,YAAa,CAC5B6S,EAAc3G,EAAapM,gBAAgBwL,KAC3CtL,EAAckM,EAAalM,YAC3BC,EAAiBO,OAAO0L,EAAajM,gBACrC,SAGA,GADAmL,EAAUP,EAAYuB,aAAaF,EAAapM,gBAAgBwL,MACnD,OAAOF,GAI1B,MAEF,OAAO,MAIDnI,EAAArL,UAAAob,gBAAR,SAEEC,EAEAC,GAEA,IAAI9N,EAAQpC,EAAeqC,KAC3B,GAAI4N,EACF,IAAK,IAAIjd,EAAI,EAAGyS,EAAIwK,EAAWxS,OAAQzK,EAAIyS,IAAKzS,EAAG,CACjD,IAAImd,EAAYF,EAAWjd,GAEvBod,EAAOC,EADA9T,EAAA+T,oBAAoBH,EAAU5c,OAErC6c,IACEA,GAAQpQ,EAAeyE,QACnByL,EAAgBE,GAAUD,EAAU7N,MAAMoD,OAAO6K,UAMrDnO,GAASgO,EALTzd,KAAKqV,MACH3L,EAAA4L,eAAeuI,8BACfL,EAAU7N,MAAO6N,EAAU5c,KAAK+O,MAAMmO,YAK/BP,EAAgBE,EAKlBhO,EAAQgO,EACjBzd,KAAKqV,MACH3L,EAAA4L,eAAeyI,oBACfP,EAAU7N,MAAO6N,EAAU5c,KAAK+O,MAAMmO,YAGxCrO,GAASgO,EAVTzd,KAAKqV,MACH3L,EAAA4L,eAAeuI,8BACfL,EAAU7N,MAAO6N,EAAU5c,KAAK+O,MAAMmO,aAahD,OAAOrO,GAIDnC,EAAArL,UAAA6R,gBAAR,SAEE7C,EAEAL,EAEAgC,EAEAC,GAEA,IAAIjS,EAAOqQ,EAAYrQ,KAAK+U,KACxBF,EAAU,IAAIuI,EAChBpd,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAC/BjQ,EAAe4Q,OACf5Q,EAAe+K,OACf/K,EAAekL,YAGnB,IAAK3H,EAAOc,IAAI9Q,EAAM6U,GAAU,OAAO,KAEvC,IAAIyI,EAAkBjN,EAAYiN,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgBpT,OAEzC,GAAI2K,EAAQ0C,aAAa9K,EAAekL,WAClC4F,GACFne,KAAKqV,MACH3L,EAAA4L,eAAe8I,8CACfxU,EAAA6O,MAAMC,KACJzH,EAAYrQ,KAAK+O,MACjBuO,EAAgBC,EAAqB,GAAGxO,aAIzC,GAAIwO,EAAoB,CAE7B,IAAK,IAAI9d,EAAI,EAAGA,EAAI8d,IAAsB9d,EACxCL,KAAKqe,QACH3U,EAAA4L,eAAegJ,wBACfJ,EAAgB7d,GAAGsP,OAGvBkD,EAAiB0L,KAAK9I,IAItBxE,EAAYuN,aAAa5L,EAAc2L,KAAK9I,GAIhD,IADA,IAAIgJ,EAAqBxN,EAAY4K,QACrB/I,GAAPzS,EAAI,EAAOoe,EAAmB3T,QAAQzK,EAAIyS,IAAKzS,EAAG,CACzD,IAAIqe,EAAoBD,EAAmBpe,GAC3C,OAAQqe,EAAkBtL,MACxB,KAAKxJ,EAAAyJ,SAASsL,iBACZ3e,KAAK4e,gBAAkCF,EAAmBjJ,GAC1D,MAEF,KAAK7L,EAAAyJ,SAASwL,kBACRH,EAAkBI,MAAMrV,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,KACxDhf,KAAKif,mBAAsCP,EAAmBjJ,GAE9DzV,KAAKkf,iBAAoCR,EAAmBjJ,GAE9D,MAEF,KAAK7L,EAAAyJ,SAAS8L,0BAA2B,MACzC,QAAStU,QAAO,IAGpB,OAAO4K,GAIDnI,EAAArL,UAAA2c,gBAAR,SAEE3N,EAEAL,GAEA,IAEI6E,EAFA7U,EAAOqQ,EAAYrQ,KAAK+U,KACxB2H,EAAarM,EAAYqM,WAE7B,GAAIrM,EAAYoL,GAAG5S,EAAApH,YAAY+c,SAa7B,GAZAvU,OAAO+F,EAAOwC,MAAQhG,EAAYiS,qBAClC5J,EAAU,IAAI8G,EACZ3b,EACAgQ,EACA5Q,KAAKqd,gBAAgBC,GAClBrM,EAAYoL,GAAG5S,EAAApH,YAAYid,UACxBjS,EAAekS,OACflS,EAAeqC,MACfrC,EAAemS,KAAOnS,EAAeoS,QAE3CxO,IAEGL,EAAOc,IAAI9Q,EAAM6U,GAAU,YAShC,GAPA5K,QAAQoG,EAAY6N,MAAMrV,EAAApH,YAAYqd,SAAWjW,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,MAC/EvJ,EAAU,IAAIkK,EACZ/e,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBC,EAAYjQ,EAAeoS,UAE7C7O,EAAOgP,YAAYhf,EAAM6U,GAAU,QAKpCnI,EAAArL,UAAAid,iBAAR,SAEEjO,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KACxBkK,EAAW5O,EAAYoL,GAAG5S,EAAApH,YAAY+c,QACtC7B,EAAgBlQ,EAAekS,OAASlS,EAAeoS,OACtDxO,EAAYoL,GAAG5S,EAAApH,YAAYwP,WAC9B0L,GAAiBlQ,EAAepC,gBACfoC,EAAeZ,gBACfY,EAAeL,kBAElC,IAAIyI,EAAU,IAAI1E,EAChBnQ,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAAYC,IAE/C,GAAIsC,GAEF,GADAhV,OAAOoG,EAAYrQ,KAAKwS,MAAQxJ,EAAAyJ,SAASyM,cACpClP,EAAOc,IAAI9Q,EAAM6U,GAAU,YAEhC,IAAK7E,EAAOgP,YAAYhf,EAAM6U,GAAU,OAE1CzV,KAAK+f,uBAAuB9O,EAAYqM,WAAY7H,EAAS7E,IAIvDtD,EAAArL,UAAA8d,uBAAR,SAEEzC,EAEArb,EAEA+d,GAEA,GAAI1C,EACF,IAAK,IAAIjd,EAAI,EAAGyS,EAAIwK,EAAWxS,OAAQzK,EAAIyS,IAAKzS,EAAG,CACjD,IAAImd,EAAYF,EAAWjd,GAC3B,OAAQmd,EAAU7S,eAChB,KAAKf,EAAAmB,cAAcC,SACnB,KAAKpB,EAAAmB,cAAcE,gBACnB,KAAKrB,EAAAmB,cAAc0B,gBACnB,KAAK7C,EAAAmB,cAAciC,iBACjB,IAAIiT,EAAUzC,EAAU0C,WAAa1C,EAAU0C,UAAUpV,QAAU,EACnE,GAAe,GAAXmV,EAAc,CAChB,IAAIE,EAA0B3C,EAAU0C,UAAW,GACnD,GACEC,EAAS/M,MAAQxJ,EAAAyJ,SAAS+M,SACND,EAAUE,aAAezW,EAAA0W,YAAYC,OACzD,CACA,IAAInN,EAAO1I,EACT8S,EAAU7S,cACgBwV,EAAU7e,OAEtC,GAAI8R,GAAQ5J,EAAa2D,QACvBnN,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf6B,EAASxQ,WAEN,CACL,IAAI6Q,EAAYR,EAAeS,mBAC3BD,EAAUtP,IAAIkC,GAChBpT,KAAKqV,MACH3L,EAAA4L,eAAeoL,kCACfP,EAASxQ,QAGX1N,EAAU0e,aAAevN,EACzBoN,EAAU9R,IAAI0E,EAAMnR,UAIxBjC,KAAKqV,MACH3L,EAAA4L,eAAesL,wBACfT,EAASxQ,YAIb3P,KAAKqV,MACH3L,EAAA4L,eAAeuL,+BACfrD,EAAU7N,MAAO,IAAKsQ,EAAQnC,SAAS,QAU7CxQ,EAAArL,UAAA6e,eAAR,SAEE7P,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KAC5B,GAAI1E,EAAYoL,GAAG5S,EAAApH,YAAY+c,QAAS,CAEtC,KADI2B,EAAgBnQ,EAAOiL,WACNkF,EAAc7P,IAAItQ,GAGhC,CACL,IAAI6U,EAAU,IAAIuL,EAAkBpgB,EAAMgQ,EAAQK,GAClD,OAAKL,EAAOc,IAAI9Q,EAAM6U,GACfA,EADgC,KAHvC,IADIA,EAAmBsL,EAAc7f,IAAIN,IAC7BwS,MAAQhG,EAAYkO,mBAAoB,OAA0B7F,MAM3E,CACL,IAAIsL,EACJ,KADIA,EAAgBnQ,EAAOsK,mBACN6F,EAAc7P,IAAItQ,GAGhC,CACD6U,EAAU,IAAIuL,EAAkBpgB,EAAMgQ,EAAQK,GAClD,OAAKL,EAAOgP,YAAYhf,EAAM6U,GACvBA,EADwC,KAH/C,IADIA,EAAmBsL,EAAc7f,IAAIN,IAC7BwS,MAAQhG,EAAYkO,mBAAoB,OAA0B7F,EAWlF,OAJAzV,KAAKqV,MACH3L,EAAA4L,eAAe2L,qBACfhQ,EAAYrQ,KAAK+O,MAAO/O,GAEnB,MAID0M,EAAArL,UAAAgd,mBAAR,SAEEhO,EAEAL,GAEA,IAAI5O,EAAWhC,KAAK8gB,eAAe7P,EAAaL,GAChD,GAAK5O,EAAL,CACA,IAAIpB,EAAOqQ,EAAYrQ,KAAK+U,KACxBuL,EAAWjQ,EAAYoL,GAAG5S,EAAApH,YAAY0c,KAC1C,GAAImC,GACF,GAAIlf,EAASuZ,gBAKX,YAJAvb,KAAKqV,MACH3L,EAAA4L,eAAe2L,qBACfhQ,EAAYrQ,KAAK+O,MAAO/O,QAK5B,GAAIoB,EAASwZ,gBAKX,YAJAxb,KAAKqV,MACH3L,EAAA4L,eAAe2L,qBACfhQ,EAAYrQ,KAAK+O,MAAO/O,GAK9B,IAAI6U,EAAU,IAAI1E,GACfmQ,EAAWzX,EAAAjH,cAAgBiH,EAAAhH,eAAiB7B,EAC7CoB,EACAiP,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAC/BjQ,EAAekS,OAASlS,EAAeoS,SAGvCyB,EACFlf,EAASuZ,gBAAkB9F,EAE3BzT,EAASwZ,gBAAkB/F,IAKvBnI,EAAArL,UAAA+R,eAAR,SAEE/C,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KACxBF,EAAU,IAAI0L,EAChBvgB,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAC/BjQ,EAAe4Q,OACf5Q,EAAekS,OACflS,EAAemS,OAGnB,IAAK5O,EAAOc,IAAI9Q,EAAM6U,GAAU,OAAO,KAEvC,IADA,IAAI6E,EAASrJ,EAAYqJ,OAChBja,EAAI,EAAGyS,EAAIwH,EAAOxP,OAAQzK,EAAIyS,IAAKzS,EAC1CL,KAAKohB,oBAAoB9G,EAAOja,GAAIoV,GAEtC,OAAOA,GAIDnI,EAAArL,UAAAmf,oBAAR,SAEEnQ,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KACxBF,EAAU,IAAI4L,EAChBzgB,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAC/BjQ,EAAeqC,OAGdkB,EAAOc,IAAI9Q,EAAM6U,IAIhBnI,EAAArL,UAAAqR,kBAAR,SAEEH,EAEAvC,EAEA8B,EAEAC,GAEA,IAAIkJ,EAAU1I,EAAU0I,QACxB,GAAIA,EACF,IAAK,IAAIxb,EAAI,EAAGyS,EAAI+I,EAAQ/Q,OAAQzK,EAAIyS,IAAKzS,EAC3CL,KAAKshB,iBAAiBzF,EAAQxb,GAAIuQ,EAAQuC,EAAUoO,aAAc7O,OAE/D,CACL,IAAI8O,OAAM,EACN7O,EAAkBzB,IAAIN,GAAS4Q,EAAS7O,EAAkBzR,IAAI0P,GAC7D+B,EAAkBjE,IAAIkC,EAAQ4Q,EAAS,IAC5C,IAAInX,EAAcQ,OAAOsI,EAAUoO,cACnCC,EAAOjD,KAAK,IAAI/T,EACdH,EACAA,EAAYoX,SAAShY,EAAA1G,cACjBsH,EAAYqX,UAAU,EAAGrX,EAAYS,OAASrB,EAAA1G,aAAa+H,QAC3DT,EAAcZ,EAAA1G,aAClB8H,OAAOsI,EAAUwO,UAMfrU,EAAArL,UAAAqf,iBAAR,SAEEjG,EAEAnR,EAEAG,EAEAqI,GAEA,IAAImD,EAAYwF,EAAOxF,UAAUF,KAC7BuH,EAAc7B,EAAOuG,aAAajM,KAGlCF,EAAUvL,EAAUiT,aAAaD,GACrC,GAAIzH,EACFzV,KAAKqV,MACH3L,EAAA4L,eAAeuM,4DACfxG,EAAOuG,aAAajS,MAAOuN,QAK/B,GAAoB,OAAhB7S,EAGF,GAAIoL,EAAUvL,EAAUuM,aAAaZ,GACnC3L,EAAUsM,aAAa0G,EAAazH,OAG/B,CACL,IAAI+L,OAAM,EACN9O,EAAcxB,IAAIhH,GAAYsX,EAAS9O,EAAcxR,IAAIgJ,GACxDwI,EAAchE,IAAIxE,EAAWsX,EAAS,IAAIpa,KAC/Coa,EAAO9S,IAAIwO,EAAa,IAAI3S,EAC1B8Q,EAAOxF,UACPwF,EAAOuG,aACP,KAAM,WAKL,CACDJ,OAAM,EACN9O,EAAcxB,IAAIhH,GAAYsX,EAAS9O,EAAcxR,IAAIgJ,GACxDwI,EAAchE,IAAIxE,EAAWsX,EAAS,IAAIpa,KAC/Coa,EAAO9S,IAAIwO,EAAa,IAAI3S,EAC1B8Q,EAAOxF,UACPwF,EAAOuG,aACPvX,EACAA,EAAYoX,SAAShY,EAAA1G,cACjBsH,EAAYqX,UAAU,EAAGrX,EAAYS,OAASrB,EAAA1G,aAAa+H,QAC3DT,EAAcZ,EAAA1G,iBAKhBuK,EAAArL,UAAAuR,wBAAR,SAEEL,EAEAvC,EAEAgC,EAEAC,GAEA,IAAI5B,EAAckC,EAAUlC,YACxBwE,EAAkC,KACtC,OAAQxE,EAAYmC,MAClB,KAAKxJ,EAAAyJ,SAASU,gBACZ0B,EAAUzV,KAAKgU,eAAgC/C,EAAaL,GAC5D,MAEF,KAAKhH,EAAAyJ,SAASY,oBACZwB,EAAUzV,KAAKkU,mBAAwCjD,EAAaL,GACpE,MAEF,KAAKhH,EAAAyJ,SAASQ,iBACZ4B,EAAUzV,KAAK8T,gBAAkC7C,EAAaL,EAAQgC,EAAeC,GACrF,MAEF,KAAKjJ,EAAAyJ,SAASc,qBACZsB,EAAUzV,KAAKoU,oBAA0CnD,EAAaL,GACtE,MAEF,KAAKhH,EAAAyJ,SAASgB,qBACZoB,EAAUzV,KAAKsU,oBAA0CrD,EAAaL,EAAQgC,EAAeC,GAC7F,MAEF,QAAShI,QAAO,GAElB,GAAI4K,EAAS,CACX,IAAI/V,EAAUkR,EAAOlR,QACrB,GAAKA,GACA,GAAIA,EAAQwR,IAAI,WAKnB,YAJAlR,KAAKqV,MACH3L,EAAA4L,eAAeyH,uBACf9L,EAAYrQ,KAAK+O,MAAO,gBAJdiB,EAAOlR,QAAUA,EAAU,IAAI0H,IAQ7C1H,EAAQgP,IAAI,UAAW+G,KAKnBnI,EAAArL,UAAAyR,kBAAR,SAEEP,EAEAvC,EAEA6B,EAEAC,GAEA,IAAIoP,EAAe3O,EAAU2O,aAC7B,GAAIA,EACF,IAAK,IAAIzhB,EAAI,EAAGyS,EAAIgP,EAAahX,OAAQzK,EAAIyS,IAAKzS,EAChDL,KAAK+hB,iBACHD,EAAazhB,GACbuQ,EACAuC,EAAUoO,aACV9O,EACAC,QAGKS,EAAU6O,eACnBvP,EAAc8L,KAAK,IAAItU,EACrB2G,EACAuC,EAAU6O,cACV,KACA7O,EAAUoO,aACVpO,EAAUoO,aAAe9X,EAAA1G,gBAQvBuK,EAAArL,UAAA8f,iBAAR,SAEE9Q,EAEAL,EAEAvG,EAEAoI,EAEAC,GAEA,IAAIpI,EAAiBD,EAAYoX,SAAShY,EAAA1G,cACtCsH,EAAYqX,UAAU,EAAGrX,EAAYS,OAASrB,EAAA1G,aAAa+H,QAC3DT,EAAcZ,EAAA1G,aAGd0S,EAAUzV,KAAK0V,cAAczE,EAAYiM,YAAYvH,KAAMtL,EAAaC,EAAgBoI,GACxF+C,EACF7E,EAAOc,IAAIT,EAAYrQ,KAAK+U,KAAMF,GAAS,GAK7ChD,EAAc8L,KAAK,IAAItU,EACrB2G,EACAK,EAAYrQ,KACZqQ,EAAYiM,YACZ7S,EACAC,KAKIgD,EAAArL,UAAAiS,mBAAR,SAEEjD,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KACxBsM,EAAkB5U,EAAeoS,OAASpS,EAAeyE,QACzDb,EAAYoL,GAAG5S,EAAApH,YAAY6f,SAC7BD,GAAmB5U,EAAe8U,SAElCF,GAAmB5U,EAAekS,OAE/BtO,EAAYoL,GAAG5S,EAAApH,YAAY+f,WAC1BxR,EAAOwC,MAAQhG,EAAY+J,kBAC7B8K,GAAmB5U,EAAe4Q,QAGtC,IAAIxI,EAAU,IAAI1E,EAChBnQ,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAAY2E,IAE/C,OAAKrR,EAAOc,IAAI9Q,EAAM6U,GACfA,EADgC,MAKjCnI,EAAArL,UAAAmS,oBAAR,SAEEnD,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KACxBF,EAAU,IAAI4M,EAChBzhB,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAC/BjQ,EAAe4Q,SAGnB,IAAKrN,EAAOc,IAAI9Q,EAAM6U,GAAU,OAAO,KAEvC,IADA,IAAIgJ,EAAqBxN,EAAY4K,QAC5Bxb,EAAI,EAAGyS,EAAI2L,EAAmB3T,OAAQzK,EAAIyS,IAAKzS,EAAG,CACzD,IAAIqe,EAAoBD,EAAmBpe,GAC3C,OAAQqe,EAAkBtL,MACxB,KAAKxJ,EAAAyJ,SAASsL,iBACZ3e,KAAK4e,gBAAkCF,EAAmBjJ,GAC1D,MAEF,KAAK7L,EAAAyJ,SAASwL,kBACRH,EAAkBI,MAAMrV,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,KACxDhf,KAAKif,mBAAsCP,EAAmBjJ,GAE9DzV,KAAKkf,iBAAoCR,EAAmBjJ,GAE9D,MAEF,QAAS5K,QAAO,IAGpB,OAAO4K,GAIDnI,EAAArL,UAAAqS,oBAAR,SAEErD,EAEAL,EAEAgC,EAEAC,GAEA,IAAIjS,EAAOqQ,EAAYrQ,KAAK+U,KACxB2M,EAAW,IAAIC,EACjB3hB,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAAYjQ,EAAe4Q,SAE9D,IAAKrN,EAAOc,IAAI9Q,EAAM0hB,GAAW,OAAO,KAGxC,IAFA,IAAI7M,EAAU5K,OAAO+F,EAAO6F,aAAa7V,IACrCib,EAAU5K,EAAY4K,QACjBxb,EAAI,EAAGyS,EAAI+I,EAAQ/Q,OAAQzK,EAAIyS,IAAKzS,EAAG,CAC9C,IAAIgb,EAASQ,EAAQxb,GACrB,OAAQgb,EAAOjI,MACb,KAAKxJ,EAAAyJ,SAASQ,iBACZ7T,KAAK8T,gBAAkCuH,EAAQiH,EAAU1P,EAAeC,GACxE,MAEF,KAAKjJ,EAAAyJ,SAASU,gBACZ/T,KAAKgU,eAAgCqH,EAAQiH,GAC7C,MAEF,KAAK1Y,EAAAyJ,SAASY,oBACZjU,KAAKkU,mBAAwCmH,EAAQiH,GACrD,MAEF,KAAK1Y,EAAAyJ,SAASc,qBACZnU,KAAKoU,oBAA0CiH,EAAQiH,GACvD,MAEF,KAAK1Y,EAAAyJ,SAASgB,qBACZrU,KAAKsU,oBAA0C+G,EAAQiH,EAAU1P,EAAeC,GAChF,MAEF,KAAKjJ,EAAAyJ,SAASkB,gBACZvU,KAAKwU,yBAA0C6G,EAAQiH,GACvD,MAEF,KAAK1Y,EAAAyJ,SAASM,SACZ3T,KAAK4T,oBAAuCyH,EAAQiH,GACpD,MAEF,QAASzX,QAAO,IAIpB,OADIyX,GAAY7M,GAAS+M,EAAYF,EAAU7M,GACxCA,GAIDnI,EAAArL,UAAAuS,yBAAR,SAEEvD,EAEAL,GAEA,IAAIhQ,EAAOqQ,EAAYrQ,KAAK+U,KACxBF,EAAU,IAAI9D,EAChB/Q,EACAgQ,EACAK,EACAjR,KAAKqd,gBAAgBpM,EAAYqM,WAAYjQ,EAAeqC,OAE9DkB,EAAOc,IAAI9Q,EAAM6U,IAIXnI,EAAArL,UAAA2R,oBAAR,SAEET,EAEAvC,GAGA,IADA,IAAIkR,EAAe3O,EAAU2O,aACpBzhB,EAAI,EAAGyS,EAAIgP,EAAahX,OAAQzK,EAAIyS,IAAKzS,EAAG,CACnD,IAAI4Q,EAAc6Q,EAAazhB,GAC3BO,EAAOqQ,EAAYrQ,KAAK+U,KACxB4H,EAAgBlQ,EAAe4Q,OAAS5Q,EAAemS,KACvDvO,EAAYoL,GAAG5S,EAAApH,YAAYogB,WAC7BlF,GAAiBlQ,EAAe8U,UAE9BlR,EAAYoL,GAAG5S,EAAApH,YAAYma,SAC7Be,GAAiBlQ,EAAekS,QAElC,IAAI9J,EAAU,IAAI8G,EAChB3b,EACAgQ,EACA5Q,KAAKqd,gBAAgBpM,EAAYqM,WAAYC,GAC7CtM,GAEGL,EAAOc,IAAI9Q,EAAM6U,KA8B5BnI,EArhDA,CAA6B5D,EAAAgZ,mBA4lD7B,SAAgBhF,EAAoBtK,GAClC,OAAQA,GACN,KAAKxJ,EAAAmB,cAAckT,OAAQ,OAAO5Q,EAAe4Q,OACjD,KAAKrU,EAAAmB,cAAcC,SACnB,KAAKpB,EAAAmB,cAAcE,gBAAiB,OAAOoC,EAAepC,gBAC1D,KAAKrB,EAAAmB,cAAc0B,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAK7C,EAAAmB,cAAciC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAKpD,EAAAmB,cAAcwN,UAAW,OAAOlL,EAAekL,UACpD,KAAK3O,EAAAmB,cAAcqN,OAAQ,OAAO/K,EAAe+K,OACjD,KAAKxO,EAAAmB,cAAcwU,OAAQ,OAAOlS,EAAekS,OACjD,KAAK3V,EAAAmB,cAAcoX,SAAU,OAAO9U,EAAe8U,SACnD,KAAKvY,EAAAmB,cAAc+G,QAAS,OAAOzE,EAAeyE,QAClD,KAAKlI,EAAAmB,cAAcyU,KAAM,OAAOnS,EAAemS,KAC/C,KAAK5V,EAAAmB,cAAc0U,OAAQ,OAAOpS,EAAeoS,OACjD,QAAS,OAAOpS,EAAeqC,MA1mDtBhQ,EAAA4N,UAwhDb,SAAYF,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,4CAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,gBAEAA,IAAA,oCApCF,CAAYA,EAAA1N,EAAA0N,cAAA1N,EAAA0N,YAAW,KAwCvB,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,iBAEAA,IAAA,sBAxBF,CAAYA,EAAA3N,EAAA2N,iBAAA3N,EAAA2N,eAAc,KA4B1B3N,EAAAge,sBAmBA,IAAAiF,EAAA,WAcE,SAAAA,EAESvP,EAEAxS,EAEA+N,EAEAiU,EAEPhS,GARO5Q,KAAAoT,OAEApT,KAAAY,OAEAZ,KAAA2O,eAEA3O,KAAA4iB,UAjBT5iB,KAAAyP,MAAqBhG,EAAApH,YAAYqN,KAEjC1P,KAAA6Q,eAAiCxD,EAAeqC,KAEhD1P,KAAA6b,QAA8C,KAE9C7b,KAAA6iB,WAAoC,KAelC7iB,KAAK4iB,QAAUA,EACf5iB,KAAKY,KAAOA,EACZZ,KAAK2O,aAAeA,EAChBiC,EACF5Q,KAAK4Q,OAASA,GAEd/F,OAAO7K,KAAKoT,MAAQhG,EAAY0V,MAChC9iB,KAAK4Q,OAAS5Q,MAoEpB,OA/DEe,OAAAC,eAAI2hB,EAAA1gB,UAAA,OAAI,KAAR,WAEE,IADA,IAAI8gB,EAAmB/iB,OACpB,IAAK+iB,EAAUA,EAAQnS,QAAQwC,MAAQhG,EAAY0V,KAAM,OAAaC,mCAK3EJ,EAAA1gB,UAAAoa,GAAA,SAAGoB,GAA2B,OAAQzd,KAAKyP,MAAQgO,IAASA,GAE5DkF,EAAA1gB,UAAA6c,MAAA,SAAMrP,GAA4B,OAA+B,IAAvBzP,KAAKyP,MAAQA,IAEvDkT,EAAA1gB,UAAAyM,IAAA,SAAI+O,GAA2Bzd,KAAKyP,OAASgO,GAE7CkF,EAAA1gB,UAAA+gB,MAAA,SAAMvF,GAA0Bzd,KAAKyP,QAAUgO,GAE/CkF,EAAA1gB,UAAAkW,aAAA,SAAasF,GAA8B,OAAQzd,KAAK6Q,eAAiB4M,IAASA,GAGlFkF,EAAA1gB,UAAAwU,aAAA,SAAa7V,GACX,IAAIib,EAAU7b,KAAK6b,QACnB,OAAIA,GAAWA,EAAQ3K,IAAItQ,GAAcib,EAAQ3a,IAAIN,GAC9C,MAOT+hB,EAAA1gB,UAAAyP,IAAA,SAAI9Q,EAAc6U,GAChB,IAAIwN,EAAsBxN,EAAQxE,YAC9B4K,EAAU7b,KAAK6b,QACnB,GAAKA,GACA,GAAIA,EAAQ3K,IAAItQ,GAAO,CAC1B,IAAIsiB,EAASrH,EAAQ3a,IAAIN,GACzB,GAAIsiB,EAAOtS,SAAW5Q,UAEf,CACL,IAAI6c,EAASC,EAASoG,EAAQzN,GAC9B,IAAIoH,EAOF,OAJA7c,KAAK4iB,QAAQvN,MACX3L,EAAA4L,eAAeyH,uBACftH,EAAQ6C,eAAe3I,MAAO8F,EAAQ6C,eAAe3C,OAEhD,EANPF,EAAUoH,SARF7c,KAAK6b,QAAUA,EAAU,IAAIzU,IAkB3CyU,EAAQnN,IAAI9N,EAAM6U,GAClB,IAAImN,EAAU5iB,KAAK4iB,QAMnB,OALInN,EAAQrC,MAAQhG,EAAY2N,oBAA2CtF,EAAS0N,UAElFP,EAAQ/U,eAAea,IAAI+G,EAAQ9G,aAAc8G,GACjDmN,EAAQ9U,sBAAsBY,IAAIuU,EAAqBxN,KAElD,GAITkN,EAAA1gB,UAAA6b,SAAA,WACE,OAAO1Q,EAAYpN,KAAKoT,MAAQ,IAAMpT,KAAK2O,cAE/CgU,EArGA,GAAsBjjB,EAAAijB,UAwGtB,IAAA/L,EAAA,SAAArJ,GAGE,SAAAqJ,EAEExD,EAEAxS,EAEA+N,EAEAiU,EAEAhS,EAEOK,GAZT,IAAAxD,EAcEF,EAAA/M,KAAAR,KAAMoT,EAAMxS,EAAM+N,EAAciU,EAAShS,IAAO5Q,YAFzCyN,EAAAwD,cASPxD,EAAKwD,YAAcA,EACnBxD,EAAKgC,MAAQwB,EAAYxB,QAiB7B,OA1C8CX,EAAA8H,EAAArJ,GA6B5CxM,OAAAC,eAAI4V,EAAA3U,UAAA,sBAAmB,KAAvB,WACE,OAAOjC,KAAKiR,YAAYtB,MAAMoD,OAAO6K,2CAIvC7c,OAAAC,eAAI4V,EAAA3U,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiR,YAAYrQ,sCAI1BG,OAAAC,eAAI4V,EAAA3U,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiR,YAAYqM,4CAE5B1G,EA1CA,CAA8C+L,GAAxBjjB,EAAAkX,kBA6CtB,IAAAwM,EAAA,SAAA7V,GAAA,SAAA6V,IAAA,IAAA3V,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YAGEyN,EAAAuO,KAAarS,EAAA2H,KAAKG,OAQpB,OAX2C3C,EAAAsU,EAAA7V,GAMzC6V,EAAAnhB,UAAAga,QAAA,SAAQD,GACNnR,QAAQ7K,KAAKqc,GAAG5S,EAAApH,YAAYihB,WAC5BtjB,KAAKgc,KAAOA,EACZhc,KAAK0O,IAAIjF,EAAApH,YAAYihB,WAEzBF,EAXA,CAA2CxM,GAArBlX,EAAA0jB,eActB,IAAA3U,EAAA,SAAAlB,GAUE,SAAAkB,EAEEmU,EAEO7P,GAJT,IAAAtF,EAMEF,EAAA/M,KAAAR,KACEoN,EAAY0V,KACZ/P,EAAOwQ,eACPxQ,EAAOwO,aACPqB,EACA,OACD5iB,KARMyN,EAAAsF,SAXTtF,EAAA/N,QAA8C,KAE9C+N,EAAAuH,YAA6B,KAkB3BvH,EAAKsF,OAASA,EACdlI,QAAQ+X,EAAQhV,YAAYsD,IAAIzD,EAAKkB,eACrCiU,EAAQhV,YAAYc,IAAIjB,EAAKkB,aAAclB,GAC3C,IAAI+V,EAAgB/V,EAAKmV,QAAQlS,mBAC/B,SAAWjD,EAAKkB,aAChB,IAAIhF,EAAA8Z,UAAU,KAAM9Z,EAAA2H,KAAKG,MACzBhE,UAEF+V,EAAc7U,aAAe6U,EAAc5iB,KAC3C6M,EAAK+V,cAAgBA,IAoFzB,OApH0B1U,EAAAL,EAAAlB,GAoCxBkB,EAAAxM,UAAAyP,IAAA,SAAI9Q,EAAc6U,EAA0BiO,GAI1C,YAJ0C,IAAAA,OAAA,GACtCjO,EAAQ0C,aAAa9K,EAAe4Q,UACtCxI,EAAUzV,KAAK4iB,QAAQhG,aAAahc,EAAM6U,MAEvClI,EAAAtL,UAAMyP,IAAGlR,KAAAR,KAACY,EAAM6U,MACrBA,EAAU5K,OAAO7K,KAAKyW,aAAa7V,KACvByb,GAAG5S,EAAApH,YAAYuP,UAAY8R,GACrC1jB,KAAKwW,aACHf,EAAQ7U,KACR6U,IAGG,IAIThH,EAAAxM,UAAAwU,aAAA,SAAa7V,GACX,IAAI6U,EAAUlI,EAAAtL,UAAMwU,aAAYjW,KAAAR,KAACY,GACjC,GAAI6U,EAAS,OAAOA,EACpB,IAAIT,EAAchV,KAAKgV,YACvB,GAAIA,EACF,IAAK,IAAI3U,EAAI,EAAGyS,EAAIkC,EAAYlK,OAAQzK,EAAIyS,IAAKzS,EAC/C,GAAIoV,EAAUT,EAAY3U,GAAGoW,aAAa7V,GAAO,OAAO6U,EAG5D,OAAO,MAIThH,EAAAxM,UAAA0hB,OAAA,SAAO/iB,GACL,IAAI6U,EAAUzV,KAAKyW,aAAa7V,GAChC,OAAI6U,GACGzV,KAAK4iB,QAAQjM,aAAa/V,IAInC6N,EAAAxM,UAAAuU,aAAA,SAAa5V,EAAc6U,GACzB,IAAI/V,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAI0H,KAC3C1H,EAAQgP,IAAI9N,EAAM6U,GACdzV,KAAK+S,OAAO6K,WAAW5d,KAAK4iB,QAAQhG,aAAahc,EAAM6U,IAI7DhH,EAAAxM,UAAAmT,iBAAA,SAAiBpC,GACf,IAAIgC,EAAchV,KAAKgV,YACvB,GAAKA,GACA,GAAIA,EAAY4O,SAAS5Q,GAAO,YADnBhT,KAAKgV,YAAcA,EAAc,GAEnDA,EAAYuJ,KAAKvL,IAInBvE,EAAAxM,UAAAkb,aAAA,SAAavc,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAIA,GAAWA,EAAQwR,IAAItQ,GAAO,OAAOlB,EAAQwB,IAAIN,GACrD,IAAIoU,EAAchV,KAAKgV,YACvB,GAAIA,EACF,IAAK,IAAI3U,EAAI,EAAGyS,EAAIkC,EAAYlK,OAAQzK,EAAIyS,IAAKzS,EAAG,CAClD,IAAIoV,EAAUT,EAAY3U,GAAG8c,aAAavc,GAC1C,GAAI6U,EAAS,OAAOA,EAGxB,OAAO,MAIThH,EAAAxM,UAAA6T,oBAAA,SAAoBlV,EAAcgQ,WAC5BlP,EAAK,IAAI6gB,EACX3hB,EACAgQ,EACA5Q,KAAK4iB,QAAQpS,+BAA+B5P,IAE1ClB,EAAUM,KAAKN,QACnB,GAAIA,MACF,IAAiC,IAAAmkB,EAAAnP,EAAAhV,GAAOokB,EAAAD,EAAAjP,QAAAkP,EAAAjP,KAAAiP,EAAAD,EAAAjP,OAAE,CAAjC,IAAAmP,EAAAhP,EAAA+O,EAAAxiB,MAAA,GAAC0iB,EAAAD,EAAA,GAAY1I,EAAA0I,EAAA,GACpBriB,EAAGgQ,IAAIsS,EAAY3I,qGAGvB,OAAO3Z,GAEX+M,EApHA,CAA0BkU,GAAbjjB,EAAA+O,OAuHb,IAAAkD,EAAA,SAAApE,GAGE,SAAAoE,EAEE/Q,EAEAgQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAeqC,MARlD,IAAAjC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAY6W,eACZrjB,EACAsjB,EAAmBtjB,EAAMgQ,GAAQ,GACjCA,EAAOgS,QACPhS,EACAK,IACDjR,YACDyN,EAAKoD,eAAiBA,IAiB1B,OAtCoC/B,EAAA6C,EAAApE,GAyBlCxM,OAAAC,eAAI2Q,EAAA1P,UAAA,qBAAkB,KAAtB,WACE,OAAyBjC,KAAKiR,YAAakT,gDAI7CpjB,OAAAC,eAAI2Q,EAAA1P,UAAA,WAAQ,KAAZ,WACE,OAAyBjC,KAAKiR,YAAa+K,sCAI7CrK,EAAA1P,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9B+Q,EAtCA,CAAoCyR,GAAvB1jB,EAAAiS,iBAyCb,IAAA4Q,EAAA,SAAAhV,GAGE,SAAAgV,EAEE3hB,EAEAgQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAeqC,MARlD,IAAAjC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYgX,UACZxjB,EACAsjB,EAAmBtjB,EAAMgQ,GAAQ,GACjCA,EAAOgS,QACPhS,EACAK,IACDjR,YACDyN,EAAKoD,eAAiBA,IAQ1B,OA7B+B/B,EAAAyT,EAAAhV,GAyB7BgV,EAAAtgB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKyW,aAAa7V,IAClBZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9B2hB,EA7BA,CAA+B3L,GAAlBlX,EAAA6iB,YAgCb,IAAApB,EAAA,SAAA5T,GAGE,SAAA4T,EAEEvgB,EAEAgQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAeqC,MARlD,IAAAjC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYiX,KACZzjB,EACAsjB,EAAmBtjB,EAAMgQ,GAAQ,GACjCA,EAAOgS,QACPhS,EACAK,IACDjR,YACDyN,EAAKoD,eAAiBA,EACtBpD,EAAKwO,QAAQtS,EAAA2H,KAAKlO,OAQtB,OA9B0B0L,EAAAqS,EAAA5T,GA0BxB4T,EAAAlf,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKyW,aAAa7V,IAClBZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9BugB,EA9BA,CAA0BiC,GAAb1jB,EAAAyhB,OAiCb,SAAkBmD,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAkB5kB,EAAA4kB,oBAAA5kB,EAAA4kB,kBAAiB,KAUnC,IAAAC,EAAA,SAAAhX,GAUE,SAAAgX,EAEEnR,EAEAxS,EAEAgQ,EAEAK,QAAA,IAAAA,MAAgDL,EAAOgS,QAAQpT,8BAA8B5O,IAR/F,IAAA6M,EAUEF,EAAA/M,KAAAR,KACEoT,EACAxS,EACAsjB,EAAmBtjB,EAAMgQ,GAAQ,GACjCA,EAAOgS,QACPhS,EACAK,IACDjR,YAxBHyN,EAAA+W,kBAAiB,EAyBf/W,EAAKgC,MAAQwB,EAAYxB,QAmC7B,OA/DkDX,EAAAyV,EAAAhX,GAgChDxM,OAAAC,eAAIujB,EAAAtiB,UAAA,WAAQ,KAAZ,WACE,OAA0CjC,KAAKiR,YAAa+K,sCAI9Djb,OAAAC,eAAIujB,EAAAtiB,UAAA,kBAAe,KAAnB,WACE,OAA0CjC,KAAKiR,YAAawT,6CAI9DF,EAAAtiB,UAAAwa,wBAAA,SAAwBnb,EAAY0a,GAClCnR,OAAOmR,EAAKK,GAAE,IACdrc,KAAKgc,KAAOA,EACZhc,KAAKwkB,kBAAiB,EACtBxkB,KAAK0kB,qBAAuBpjB,EAC5BtB,KAAK0O,IAAIjF,EAAApH,YAAYma,MAAQ/S,EAAApH,YAAYsiB,QAAUlb,EAAApH,YAAYihB,WAIjEiB,EAAAtiB,UAAA0a,sBAAA,SAAsBrb,EAAY0a,GAChCnR,OAAOmR,EAAKK,GAAE,IACdrc,KAAKgc,KAAOA,EACZhc,KAAKwkB,kBAAiB,EACtBxkB,KAAK4kB,mBAAqBtjB,EAC1BtB,KAAK0O,IAAIjF,EAAApH,YAAYma,MAAQ/S,EAAApH,YAAYsiB,QAAUlb,EAAApH,YAAYihB,WAIjEiB,EAAAtiB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9B2jB,EA/DA,CAAkDnB,GAA5B1jB,EAAA6kB,sBAkEtB,IAAAlD,EAAA,SAAA9T,GAGE,SAAA8T,EAEEzgB,EAEAgQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAeqC,MARlD,IAAAjC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYyX,UACZjkB,EACAgQ,EACAK,IACDjR,YAMHyN,EAAAqX,aAAoB,EALlBrX,EAAKoD,eAAiBA,EACtBpD,EAAKwO,QAAQtS,EAAA2H,KAAKlO,OAetB,OAnC+B0L,EAAAuS,EAAA9T,GA2B7BxM,OAAAC,eAAIqgB,EAAApf,UAAA,YAAS,KAAb,WACE,OAA8BjC,KAAKiR,YAAa3P,uCAIlD+f,EAAApf,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9BygB,EAnCA,CAA+BkD,GAAlB7kB,EAAA2hB,YAsCb,IAAA9E,EAAA,SAAAhP,GAGE,SAAAgP,EAEE3b,EAEAgQ,EAEAC,EAEAI,QAAA,IAAAA,MAAgDL,EAAOgS,QAAQpT,8BAA8B5O,IAR/F,IAAA6M,EAUEF,EAAA/M,KAAAR,KACEoN,EAAY6Q,OACZrd,EACAgQ,EACAK,IACDjR,YACDyN,EAAKoD,eAAiBA,IAE1B,OArB4B/B,EAAAyN,EAAAhP,GAqB5BgP,EArBA,CAA4BgI,GAAf7kB,EAAA6c,SAwBb,IAAAwI,EAAA,WAUA,OARE,SAESnkB,EAEAob,EAEAyI,QAAA,IAAAA,MAAA,MAJAzkB,KAAAY,OAEAZ,KAAAgc,OAEAhc,KAAAykB,eARX,GAAa/kB,EAAAqlB,YAab,IAAAC,EAAA,SAAAzX,GAGE,SAAAyX,EAEEpkB,EAEOqkB,EAEPjJ,EAEApL,EAEAK,QAAA,IAAAA,MAAgDL,EAAOgS,QAAQpT,8BAA8B5O,IAV/F,IAAA6M,EAYEF,EAAA/M,KAAAR,KACEoN,EAAY8X,MACZtkB,EACAgQ,EACAK,IACDjR,YAbMyN,EAAAwX,QAcPxX,EAAKwX,MAAQA,EACbpa,OAAOmR,GAAQrS,EAAA2H,KAAKG,MACpBhE,EAAKwO,QAAQD,KAEjB,OAzB2BlN,EAAAkW,EAAAzX,GAyB3ByX,EAzBA,CAA2BT,GAAd7kB,EAAAslB,QA4Bb,IAAAjU,EAAA,SAAAxD,GAWE,SAAAwD,EAEEnQ,EAEAgQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAeqC,MARlD,IAAAjC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAY2N,mBACZna,EACAsjB,EAAmBtjB,EAAMgQ,EAAQK,EAAYoL,GAAG5S,EAAApH,YAAY+f,WAC5DxR,EAAOgS,QACPhS,EACAK,IACDjR,YAzBHyN,EAAAkT,aAA6BnX,EAAa2D,QAE1CM,EAAA0X,UAAyC,KAGjC1X,EAAA2X,gBAAuD,KAqB7D3X,EAAKoD,eAAiBA,IAsE1B,OAnGuC/B,EAAAiC,EAAAxD,GAiCrCxM,OAAAC,eAAI+P,EAAA9O,UAAA,qBAAkB,KAAtB,WACE,OAA6BjC,KAAKiR,YAAakT,gDAIjDpjB,OAAAC,eAAI+P,EAAA9O,UAAA,mBAAgB,KAApB,WACE,OAA6BjC,KAAKiR,YAAaN,2CAIjD5P,OAAAC,eAAI+P,EAAA9O,UAAA,WAAQ,KAAZ,WACE,OAA6BjC,KAAKiR,YAAaoU,sCAIjDtkB,OAAAC,eAAI+P,EAAA9O,UAAA,YAAS,KAAb,WACE,OAA6BjC,KAAKiR,YAAaqU,2CAIjDvkB,OAAAC,eAAI+P,EAAA9O,UAAA,UAAO,KAAX,WACE,IAAI2O,EAAS5Q,KAAK4Q,OAClB,OAAOA,EAAOwC,MAAQhG,EAAYwO,OAC3BhL,EAAOwC,MAAQhG,EAAYkO,oBAAsB1K,EAAOA,OAAOwC,MAAQhG,EAAYwO,uCAI5F7K,EAAA9O,UAAAsjB,QAAA,SAAQnW,GACNvE,OAAO7K,KAAKqc,GAAG5S,EAAApH,YAAY+f,WAC3BvX,QAAQ7K,KAAKmjB,SACb,IAAIiC,EAAkBplB,KAAKolB,gBAC3B,GAAKA,GACA,GAAIA,EAAgBlU,IAAI9B,GAAgB,OAAOgW,EAAgBlkB,IAAIkO,QADlDpP,KAAKolB,gBAAkBA,EAAkB,IAAIhe,IAEnE,IAAI6J,EAAcjR,KAAKiR,YAAapG,OAAOoG,EAAYmC,MAAQxJ,EAAAyJ,SAASwL,mBACxE,IAAI2G,EAAQ,IAAIzU,EACd/Q,KAAKY,KACLwO,EACmB6B,EACnBjR,KAAK6Q,gBAMP,OAJA2U,EAAM/V,MAAQzP,KAAKyP,MACnB+V,EAAM7E,aAAe3gB,KAAK2gB,aAE1ByE,EAAgB1W,IAAIU,EAAeoW,GAC5BA,GAITzU,EAAA9O,UAAAwjB,oBAAA,SAAoBC,GAClB,IAAIP,EAAYnlB,KAAKmlB,UACrB,OAAIA,GAAaA,EAAUjU,IAAIwU,GAA+BP,EAAUjkB,IAAIwkB,GACrE,MAIT3U,EAAA9O,UAAA0jB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAYnlB,KAAKmlB,UAChBA,EACAta,QAAQsa,EAAUjU,IAAIwU,IADX1lB,KAAKmlB,UAAYA,EAAY,IAAI/d,IAEjD+d,EAAUzW,IAAIgX,EAAaE,IAI7B7U,EAAA9O,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9BmQ,EAnGA,CAAuC6F,GAA1BlX,EAAAqR,oBAsGb,IAAAD,EAAA,SAAAvD,GAiCE,SAAAuD,EAEE+U,EAEA5jB,EAEA0O,EAEAmV,QAAA,IAAAA,MAAA,MARF,IAAArY,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYsO,SACZmK,EACA3B,EAAmB2B,EAAwB5jB,EAAU2O,OAAQ3O,EAAUoa,GAAG5S,EAAApH,YAAY+f,WACtFngB,EAAU2gB,QACV3gB,EAAU2O,OACV3O,EAAUgP,cACXjR,KAOD,GAlDFyN,EAAAsY,aAAkC,IAAI3e,IAEtCqG,EAAAuY,cAAyB,GAEzBvY,EAAAwY,iBAA2B,GAM3BxY,EAAAyY,eAA0B,GAE1BzY,EAAA0Y,IAAmB,EAEnB1Y,EAAA2Y,oBAA2B,EAE3B3Y,EAAA4Y,WAA8B,KAG9B5Y,EAAA6Y,aAAoB,EAEpB7Y,EAAA8Y,gBAAuB,EAEvB9Y,EAAA+Y,kBAAyB,EAyFzB/Y,EAAAgZ,SAA2B,KAC3BhZ,EAAAiZ,SAA2B,KAC3BjZ,EAAAkZ,SAA2B,KAC3BlZ,EAAAmZ,SAA2B,KAC3BnZ,EAAAoZ,UAA4B,KAG5BpZ,EAAAqZ,YAAmB,EACnBrZ,EAAAsZ,WAA2B,KAC3BtZ,EAAAuZ,WAA4B,KA7E1BvZ,EAAKxL,UAAYA,EACjBwL,EAAKkD,UAAYA,EACjBlD,EAAKgC,MAAQxN,EAAUwN,MAAQhG,EAAApH,YAAYihB,SAC3C7V,EAAKoD,eAAiB5O,EAAU4O,eAChCpD,EAAKqY,wBAA0BA,EAC/BrY,EAAKuO,KAAOrS,EAAA2H,KAAK7N,IAAIwjB,WAAWtW,IAC3B1O,EAAUoa,GAAG5S,EAAApH,YAAY6f,SAAU,CACtC,IAAIgF,EAAa,EACjB,GAAIzZ,EAAK4O,GAAG5S,EAAApH,YAAY+f,UAAW,CACjC,IAAI+E,EAAQ,IAAInC,EACdvb,EAAAzG,cAAcoC,MACd8hB,IACArc,OAAO8F,EAAUyW,UACjB3Z,GAEFA,EAAKsY,aAAarX,IAAIjF,EAAAzG,cAAcoC,MAAO+hB,GAC3C1Z,EAAKuY,cAAcmB,EAAMlC,OAASkC,EAGpC,IADA,IAAIE,EAAiB1W,EAAU0W,eACtBhnB,EAAI,EAAGyS,EAAIuU,EAAevc,OAAQzK,EAAIyS,IAAKzS,EAAG,CACrD,IAAIinB,EAAgBD,EAAehnB,GAC/BknB,EAAgB5W,EAAU6W,iBAAiBnnB,GAC3C8mB,EAAQ,IAAInC,EACduC,EACAL,IACAI,EACA7Z,GAEFA,EAAKsY,aAAarX,IAAI6Y,EAAeJ,GACrC1Z,EAAKuY,cAAcmB,EAAMlC,OAASkC,UAGtC1Z,EAAKga,KAAO1d,EAAA2d,KAAK/lB,OAAO8L,GACxBka,EAAwBla,EAAKmV,QAASnV,KAmE1C,OAvJ8BqB,EAAAgC,EAAAvD,GAwF5BuD,EAAA7O,UAAA2lB,SAAA,SAAS5L,EAAYpb,EAA4BqQ,QAA5B,IAAArQ,MAAA,WAA4B,IAAAqQ,MAAA,MAE/C,IAAIiW,EAAalnB,KAAK2Q,UAAU0W,eAAevc,OAAS9K,KAAKimB,iBAAiBnb,OAC1E9K,KAAKqc,GAAG5S,EAAApH,YAAY+f,aAAa8E,EACrC,IAAIrR,EAAqB,OAATjV,EACZA,EACA,OAASsmB,EAAWpJ,WACpBqJ,EAAQ,IAAInC,EACdnP,EACAqR,EACAlL,EACAhc,KACAiR,GAAejR,KAAK4iB,QAAQpT,8BAA8BqG,IAE5D,GAAIjV,EAAM,CACR,GAAIZ,KAAK+lB,aAAa7U,IAAItQ,GAAO,MAAM,IAAIuY,MAAM,wBACjDnZ,KAAK+lB,aAAarX,IAAI9N,EAAMumB,GAI9B,OAFAnnB,KAAKgmB,cAAcmB,EAAMlC,OAASkC,EAClCnnB,KAAKimB,iBAAiB1H,KAAKvC,GACpBmL,GAITrW,EAAA7O,UAAA0hB,OAAA,SAAO/iB,GACL,IAAIinB,EAAS7nB,KAAK+lB,aAClB,OAAI8B,EAAO3W,IAAItQ,GAAcinB,EAAO3mB,IAAIN,GACjCZ,KAAK4Q,OAAO+S,OAAO/iB,IAgB5BkQ,EAAA7O,UAAA6lB,SAAA,SAASnoB,EAAgBwmB,GAMvB,GALAnmB,KAAKmmB,IAAMA,EACXtb,QAAQ7K,KAAK+mB,aAAe/mB,KAAK+mB,WAAWjc,QAC5C9K,KAAK+mB,WAAa,KAClB/mB,KAAKgnB,WAAa,KAClBhnB,KAAKymB,SAAWzmB,KAAK0mB,SAAW1mB,KAAK2mB,SAAW3mB,KAAK4mB,SAAW,KAC5D5mB,KAAK4iB,QAAQxR,QAAQ2W,UAEvB,IADA,IAAI7B,EAAiBlmB,KAAKkmB,eACjB7lB,EAAI,EAAGyS,EAAIoT,EAAepb,OAAQzK,EAAIyS,IAAKzS,EAAG,CACrD,IAAI2nB,EAAgB9B,EAAe7lB,GACnCV,EAAOsoB,iBACL9B,EACA6B,EAAcE,aACdF,EAAcjV,OAAOoV,eACrBH,EAAcI,KACdJ,EAAcK,UAKxBvX,EAvJA,CAA8BsS,GAAjB1jB,EAAAoR,WA0Jb,IAAAwX,EAAA,SAAA/a,GAQE,SAAA+a,EAEE3X,EAEAiS,EACA2F,QAAA,IAAAA,MAAA,IALF,IAAA9a,EAOEF,EAAA/M,KAAAR,KACEoN,EAAYob,gBACZD,EAAM,OAAS5X,EAAU8X,oBACzBF,EACA3F,EACAA,EAAQpU,aACTxO,YACDyN,EAAKkD,UAAYA,EACjBlD,EAAKgC,MAAQhG,EAAApH,YAAYihB,SACzB7V,EAAKuO,KAAOrS,EAAA2H,KAAK7N,IAAIwjB,WAAWtW,KAOpC,OA/BoC7B,EAAAwZ,EAAA/a,GA4BlC+a,EAAArmB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAO,MAEX0nB,EA/BA,CAAoC3F,GAAvBjjB,EAAA4oB,iBAkCb,IAAA3I,EAAA,SAAApS,GAGE,SAAAoS,EAEE/e,EAEAgQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAeqC,MARlD,IAAAjC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYsb,gBACZ9nB,EACAsjB,EAAmBtjB,EAAMgQ,EAAQ/F,OAAOoG,EAAYoL,GAAG5S,EAAApH,YAAY+f,YACnExR,EAAOgS,QACPhS,EACAK,IACDjR,YACDyN,EAAKoD,eAAiBA,IAsB1B,OA3CoC/B,EAAA6Q,EAAApS,GAyBlCxM,OAAAC,eAAI2e,EAAA1d,UAAA,WAAQ,KAAZ,WACE,OAA0BjC,KAAKiR,YAAa+K,sCAI9Cjb,OAAAC,eAAI2e,EAAA1d,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKiR,YAAawT,6CAI9C1jB,OAAAC,eAAI2e,EAAA1d,UAAA,iBAAc,KAAlB,WACE,OAA0BjC,KAAKiR,YAAa0X,gDAI9ChJ,EAAA1d,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9B+e,EA3CA,CAAoC/I,GAAvBlX,EAAAigB,iBA8Cb,IAAAiJ,EAAA,SAAArb,GAQE,SAAAqb,EAEE3mB,EAEA2O,EAEAoL,GANF,IAAAvO,EAQEF,EAAA/M,KAAAR,KACEoN,EAAYuO,MACZ1Z,EAAUrB,KACVgQ,EACkC3O,EAAUgP,cAC7CjR,YAhBHyN,EAAAob,cAAqB,EAiBnBpb,EAAKxL,UAAYA,EACjBwL,EAAKgC,MAAQxN,EAAUwN,MACvB5E,OAAOmR,GAAQrS,EAAA2H,KAAKG,MACpBhE,EAAKwO,QAAQD,GACb2L,EAAwBla,EAAKmV,QAASnV,KAE1C,OA5B2BqB,EAAA8Z,EAAArb,GA4B3Bqb,EA5BA,CAA2BrE,GAAd7kB,EAAAkpB,QA+Bb,IAAA5H,EAAA,SAAAzT,GAQE,SAAAyT,EAEEpgB,EAEAgQ,EAEAkY,GANF,IAAArb,EAQEF,EAAA/M,KAAAR,KACEoN,EAAYkO,mBACZ1a,EACAsjB,EAAmBtjB,EAAMgQ,EAAQkY,EAAiBzM,GAAG5S,EAAApH,YAAY+f,WACjExR,EAAOgS,QACPhS,EACAkY,IACD9oB,YApBHyN,EAAA8N,gBAA4C,KAE5C9N,EAAA+N,gBAA4C,KAmB1C/N,EAAKgC,SAAWhG,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,OAOlD,OA/BuClQ,EAAAkS,EAAAzT,GA4BrCyT,EAAA/e,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9BogB,EA/BA,CAAuCpK,GAA1BlX,EAAAshB,oBAkCb,IAAA+H,EAAA,SAAAxb,GAUE,SAAAwb,EAEE9mB,EAEA2O,GAJF,IAAAnD,EAMEF,EAAA/M,KAAAR,KACEoN,EAAYqO,SACZxZ,EAAUrB,KACVgQ,EACA3O,EAAU2gB,QAAQpT,8BAChBvN,EAAUrB,KACVqB,EAAUoa,GAAG5S,EAAApH,YAAY+f,UACrB3Y,EAAApH,YAAY+f,SACZ3Y,EAAApH,YAAYqN,QAEnB1P,YArBHyN,EAAAub,eAAkC,KAElCvb,EAAAwb,eAAkC,KAoBhCxb,EAAKxL,UAAYA,EACjB0lB,EAAwBla,EAAKmV,QAASnV,KAO1C,OAnC8BqB,EAAAia,EAAAxb,GAgC5Bwb,EAAA9mB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9BmoB,EAnCA,CAA8BxE,GAAjB7kB,EAAAqpB,WAsCb,IA4GWG,EA5GXlL,EAAA,SAAAzQ,GAaE,SAAAyQ,EAEEpd,EAEAgQ,EAEAK,EAEAJ,EACAsY,QADA,IAAAtY,MAAiCxD,EAAeqC,WAChD,IAAAyZ,OAAA,GATF,IAAA1b,EAWEF,EAAA/M,KAAAR,KACEmpB,EAAe/b,EAAYiS,oBAAsBjS,EAAY+J,gBAC7DvW,EACAsjB,EAAmBtjB,EAAMgQ,EAAQK,EAAYoL,GAAG5S,EAAApH,YAAY+f,WAC5DxR,EAAOgS,QACPhS,EACAK,IACDjR,YA5BHyN,EAAAyN,gBAA8C,KAE9CzN,EAAAyK,cAAuC,KAEvCzK,EAAA2b,qBAAiD,KAEjD3b,EAAAgT,mBAA2D,IAAIrZ,IAE/DqG,EAAA0X,UAAsC,KAqBpC1X,EAAKoD,eAAiBA,IA0E1B,OA1GoC/B,EAAAkP,EAAAzQ,GAoClCxM,OAAAC,eAAIgd,EAAA/b,UAAA,qBAAkB,KAAtB,WACE,OAA0BjC,KAAKiR,YAAakT,gDAG9CpjB,OAAAC,eAAIgd,EAAA/b,UAAA,cAAW,KAAf,WACE,OAA0BjC,KAAKiR,YAAauN,6CAG9Czd,OAAAC,eAAIgd,EAAA/b,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKiR,YAAaiN,iDAI9Cnd,OAAAC,eAAIgd,EAAA/b,UAAA,iBAAc,KAAlB,WACE,IAAI+U,EAA0BhX,KAAK4iB,QAAQ5L,wBAC3C,OAAmC,OAA5BA,GACAhX,KAAKqpB,QAAQrS,EAAwB/U,4CAI9C+b,EAAA/b,UAAAonB,QAAA,SAAQC,GACN,IAAIvG,EAAiC/iB,KACrC,GAAG,GAAI+iB,IAAYuG,EAAe,OAAO,QAClCvG,EAAUA,EAAQ7K,eACzB,OAAO,GAIT8F,EAAA/b,UAAA2d,YAAA,SAAYhf,EAAc6U,GACxB,IAAIwN,EAAsBxN,EAAQxE,YAC9BiK,EAAkBlb,KAAKkb,gBAC3B,GAAKA,GACA,GAAIA,EAAgBhK,IAAItQ,GAAO,CAClC,IAAIic,EAASC,EAAS5B,EAAgBha,IAAIN,GAAQ6U,GAClD,IAAKoH,EAKH,OAJA7c,KAAK4iB,QAAQvN,MACX3L,EAAA4L,eAAeyH,uBACftH,EAAQ6C,eAAe3I,MAAO8F,EAAQ6C,eAAe3C,OAEhD,EAETF,EAAUoH,QAVU7c,KAAKkb,gBAAkBA,EAAkB,IAAI9T,IAiBnE,OALA8T,EAAgBxM,IAAI9N,EAAM6U,GACtBA,EAAQ4G,GAAG5S,EAAApH,YAAYuP,SAAW5R,KAAKqc,GAAG5S,EAAApH,YAAY4Y,gBACxDxF,EAAQ/G,IAAIjF,EAAApH,YAAY4Y,eAE1Bjb,KAAK4iB,QAAQ9U,sBAAsBY,IAAIuU,EAAqBxN,IACrD,GAITuI,EAAA/b,UAAAwjB,oBAAA,SAAoBC,GAClB,IAAIP,EAAYnlB,KAAKmlB,UACrB,OAAIA,GAAaA,EAAUjU,IAAIwU,GAA4BP,EAAUjkB,IAAIwkB,GAClE,MAIT1H,EAAA/b,UAAA0jB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAYnlB,KAAKmlB,UAChBA,EACAta,QAAQsa,EAAUjU,IAAIwU,IADX1lB,KAAKmlB,UAAYA,EAAY,IAAI/d,IAEjD+d,EAAUzW,IAAIgX,EAAaE,IAI7B5H,EAAA/b,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAE9Bod,EA1GA,CAAoCpH,GAAvBlX,EAAAse,iBA4Gb,SAAWkL,GACTA,IAAA,qBACAA,IAAA,qBACAA,IAAA,6BAHF,CAAWA,MAAY,KAOvB,IAAAK,EAAA,SAAAhc,GAkDE,SAAAgc,EAEE1D,EAEA5jB,EAEAunB,EAEAC,EACAN,gBAHA,IAAAK,MAAA,WAEA,IAAAC,MAAA,WACA,IAAAN,OAAA,GATF,IAAA1b,EAWEF,EAAA/M,KAAAR,KACEmpB,EAAe/b,EAAYsc,UAAYtc,EAAYwO,MACnDiK,EACA3B,EAAmB2B,EAAwB5jB,EAAU2O,OAAQ3O,EAAUoa,GAAG5S,EAAApH,YAAY+f,WACtFngB,EAAU2gB,QACV3gB,EAAU2O,OACV3O,EAAUgP,cACXjR,KA3DHyN,EAAAqY,wBAAmD,KAEnDrY,EAAAkc,oBAA2B,EAE3Blc,EAAAmc,oBAAuC,KAEvCnc,EAAA+S,UAA+C,KAEvC/S,EAAAoc,IAAW,EAEXpc,EAAAqc,SAAQ,EAEhBrc,EAAAsc,UAAiB,EAgDf,IAAInH,EAAUnV,EAAKmV,QAQnB,GAPAnV,EAAKxL,UAAYA,EACjBwL,EAAKgC,MAAQxN,EAAUwN,MACvBhC,EAAKoD,eAAiB5O,EAAU4O,eAChCpD,EAAK+b,cAAgBA,EACrB/b,EAAKwO,QAAQ2G,EAAQxR,QAAQI,UAAUwY,QAAQvc,IAC/CA,EAAKgc,KAAOA,GAEPhc,EAAK0K,aAAa9K,EAAekL,WAAY,CAChD,IAAIhJ,EAAKqT,EAAQ1U,cACjBT,EAAKoc,IAAMta,EACXqT,EAAQ3U,eAAeS,IAAIa,EAAI9B,GAIjC,GAAIgc,EAAM,CACR,IAAIQ,EAAyBR,EAAK3D,wBAClC,GAAImE,EAAwB,CAC1B,IAAInE,EAA0BrY,EAAKqY,4BACnC,IAAiC,IAAAoE,EAAAxV,EAAAuV,GAAsBE,EAAAD,EAAAtV,QAAAuV,EAAAtV,KAAAsV,EAAAD,EAAAtV,OAAE,CAAhD,IAAAmP,EAAAhP,EAAAoV,EAAA7oB,MAAA,GAAC8oB,EAAArG,EAAA,GAAUsG,EAAAtG,EAAA,GACb+B,IAAyBrY,EAAKqY,wBAA0BA,EAA0B,IAAI1e,KAC3F0e,EAAwBpX,IAAI0b,EAAUC,uGAM5C,IAAIlG,EAAiBliB,EAAUqoB,mBAC/B,GAAId,EAAe,CACjB,IAAIe,EAAmBf,EAAc1e,OACrC,IAAKqZ,GAAkBoG,GAAoBpG,EAAerZ,OACxD,MAAM,IAAIqO,MAAM,gCAElB,GAAIoR,EAAkB,CACf9c,EAAKqY,0BAAyBrY,EAAKqY,wBAA0B,IAAI1e,KACtE,IAAK,IAAI/G,EAAI,EAAGA,EAAIkqB,IAAoBlqB,EACtCoN,EAAKqY,wBAAwBpX,IAAIyV,EAAe9jB,GAAGO,KAAK+U,KAAM6T,EAAcnpB,UAG3E,GAAI8jB,GAAkBA,EAAerZ,OAC1C,MAAM,IAAIqO,MAAM,uCAElBwO,EAAwB/E,EAASnV,KA+NrC,OA9U2BqB,EAAAya,EAAAhc,GAwBzBxM,OAAAC,eAAIuoB,EAAAtnB,UAAA,KAAE,KAAN,WACE,OAAOjC,KAAK6pB,qCAId9oB,OAAAC,eAAIuoB,EAAAtnB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiC,UAAUuoB,gDAIxBzpB,OAAAC,eAAIuoB,EAAAtnB,UAAA,cAAW,KAAf,WACE,GAAIjC,KAAKwqB,eAAgB,OAAO,EAChC,IAAIC,EAAczqB,KAAKyW,aAAa,UACpC,OAAuB,OAAhBgU,IACLA,EAAYrX,MAAQhG,EAAYuO,OAE9B8O,EAAYrX,MAAQhG,EAAYqO,UACW,OAAhCgP,EAAazB,kBAGwB,OAAlDhpB,KAAK0qB,eAAelhB,EAAa2B,cAC2B,OAA5DnL,KAAK0qB,eAAelhB,EAAa6B,yDAsErCke,EAAAtnB,UAAA0oB,eAAA,SAAeC,GACb,IAAI7H,EAAwB/iB,KAC5B,GAAG,GAAI+iB,GAAW6H,EAAQ,OAAO,QAC1B7H,EAAUA,EAAQ0G,MACzB,OAAO,GAITF,EAAAtnB,UAAAyoB,eAAA,SAAetX,EAAoByX,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQzX,GACN,KAAK5J,EAAa2B,YAEhB,GADI2f,EAAoB9qB,KAAK0qB,eAAelhB,EAAa6B,uBAClC,OAAOyf,EAC9B,MAEF,KAAKthB,EAAa4B,YAChB,IAAI0f,EACJ,GADIA,EAAoB9qB,KAAK0qB,eAAelhB,EAAa8B,uBAClC,OAAOwf,EAC9B,MAEF,QAASjgB,QAAO,GAGpB,IAAI+a,EAAyB5lB,KAC7B,EAAG,CACD,IAAIwgB,EAAYoF,EAASpF,UACzB,GAAIA,EAAW,CACb,IAAIuK,EAAWvK,EAAUtf,IAAIkS,GAC7B,GAAI2X,EAAU,OAAOA,SAEhBnF,EAAWA,EAAS6D,MAC7B,OAAO,MAITF,EAAAtnB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK4Q,OAAO+S,OAAO/iB,IAI5B2oB,EAAAtnB,UAAA+oB,SAAA,SAASC,GACP,IAAIpP,EAAUhR,OAAO7K,KAAK6b,SAC1BhR,OAAOgR,EAAQ3K,IAAI+Z,IACnB,IAAIC,EAAiBrP,EAAQ3a,IAAI+pB,GAEjC,OADApgB,OAAOqgB,EAAM9X,MAAQhG,EAAYuO,OAClBuP,EAAOrC,cAIxBU,EAAAtnB,UAAAkpB,WAAA,SAAcvqB,EAAcU,EAAU4N,EAAoBkc,GACxD,IAAIF,EAAQlrB,KAAKyW,aAAa7V,GAC9B,GAAIsqB,GAASA,EAAM9X,MAAQhG,EAAYuO,MAAO,CAC5C,IAAIxM,EAASic,EAAqBF,EAAOrC,aACzC,OAAgBqC,EAAOlP,KAAK5I,MAC1B,OACA,OAEE,OADAvJ,EAAAwhB,QAAQjoB,IAAI9B,GAAQ4N,EAAQC,GACrB,EAET,OACA,OAEE,OADAtF,EAAAyhB,SAASloB,IAAI9B,GAAQ4N,EAAQC,GACtB,EAET,OACA,OAEE,OADAtF,EAAAyF,SAASlM,IAAI9B,GAAQ4N,EAAQC,GACtB,EAET,OACA,OAGE,OAFAtE,QAAQ7K,KAAK4iB,QAAQxR,QAAQc,UAC7BrI,EAAAyF,SAASlM,IAAI9B,GAAQ4N,EAAQC,GACtB,EAET,QAEE,OADAtF,EAAA0hB,SAAS1nB,IAAIvC,GAAQ4N,EAAQC,GACtB,EAET,QAEE,OADAtF,EAAA2hB,SAAS1nB,IAAIxC,GAAQ4N,EAAQC,GACtB,GAKb,OADAtE,QAAO,GACA,GAIT0e,EAAAtnB,UAAAonB,QAAA,SAAQpnB,GACN,OAAOjC,KAAKiC,UAAUonB,QAAQpnB,IAIhCsnB,EAAAtnB,UAAAwpB,mBAAA,SAAmBC,GACjB,IAAI3I,EAAwB/iB,KAC5B,GAAG,GAAI+iB,EAAQ9gB,YAAcypB,EAAmB,OAAO3I,EAAQyG,oBACxDzG,EAAUA,EAAQ0G,MACzB,OAAO,MAITF,EAAAtnB,UAAA0pB,kBAAA,WAIE,IAHA,IAAI5I,EAAiB/iB,KACjB4iB,EAAU5iB,KAAK4iB,QACfgJ,EAAchJ,EAAQ5L,wBACnB+L,EAAQ0G,OAASmC,GACtB7I,EAAUlY,OAAOkY,EAAQ0G,MAE3B,OAAQ1G,EAAQ9gB,WACd,KAAK2gB,EAAQ1L,iBAAkB,OAAOvN,EAAA2H,KAAKpO,GAC3C,KAAK0f,EAAQxL,kBAAmB,OAAOzN,EAAA2H,KAAKnO,IAC5C,KAAKyf,EAAQvL,kBAAmB,OAAO1N,EAAA2H,KAAKlO,IAC5C,KAAKwf,EAAQtL,kBAAmB,OAAO3N,EAAA2H,KAAKjO,IAC5C,KAAKuf,EAAQrL,iBACb,KAAKqL,EAAQpL,wBAAyB,OAAO7N,EAAA2H,KAAK/N,GAClD,KAAKqf,EAAQnL,kBAAmB,OAAO9N,EAAA2H,KAAK9N,IAC5C,KAAKof,EAAQlL,kBAAmB,OAAO/N,EAAA2H,KAAK7N,IAC5C,KAAKmf,EAAQjL,kBAAmB,OAAOhO,EAAA2H,KAAK5N,IAC5C,KAAKkf,EAAQhL,kBAAmB,OAAOjO,EAAA2H,KAAKzN,IAC5C,KAAK+e,EAAQ/K,kBAAmB,OAAOlO,EAAA2H,KAAKxN,IAC5C,KAAK8e,EAAQxJ,eAAgB,OAAOvO,OAAO7K,KAAKyrB,mBAAmB7I,EAAQxJ,iBAAiB,GAC5F,QAASvO,QAAO,GAElB,OAAOlB,EAAA2H,KAAKG,MAId1Q,OAAAC,eAAIuoB,EAAAtnB,UAAA,YAAS,KAAb,WACE,IAAI4pB,EAAU7rB,KAAK8pB,SACnB,GAAW,GAAP+B,EAAiC,CACnC,IAAIC,EAAW9rB,KAAK+rB,SAAS/rB,MACfA,KAAK8pB,SAAW+B,EAA1BC,EAAiC,EACT,EAE9B,OAAc,GAAPD,mCAIDtC,EAAAtnB,UAAA8pB,SAAR,SAAiBC,EAAcC,WAezBlJ,EAJJ,QAX6B,IAAAkJ,MAAA,IAAyB9kB,KAWlD8kB,EAAO/a,IAAIlR,MAAO,OAAO,EAC7BisB,EAAOva,IAAI1R,MAIX,IAeIkY,EAfA2D,EAAU7b,KAAK6b,QACnB,GAAIA,MACF,IAAmB,IAAAkI,EAAArP,EAAAmH,EAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAAhC,IAAIyG,EAAMF,EAAA7Z,MACb,GACE+Z,EAAOjI,MAAQhG,EAAYuO,OACyB,QAAnDoH,EAAkB1H,EAAQW,KAAKkQ,kBAE9BnJ,IAAYiJ,GACZjJ,EAAQgJ,SAASC,EAAOC,IAE1B,OAAO,oGAQb,IAAK/T,EAAgBlY,KAAK4iB,QAAQxJ,iBAAmBpZ,KAAKiC,UAAUonB,QAAQnR,GAAgB,CAC1F,IAAIsR,EAAgB3e,OAAO7K,KAAKyrB,mBAAmBvT,IAEnD,GADArN,OAA+B,GAAxB2e,EAAc1e,QAE6B,QAA/CiY,EAAUyG,EAAc,GAAG0C,kBAE1BnJ,IAAYiJ,GACZjJ,EAAQgJ,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAK/T,EAAgBlY,KAAK4iB,QAAQtJ,eAAiBtZ,KAAKiC,UAAUonB,QAAQnR,GAAgB,CAC3FsR,EAAgB3e,OAAO7K,KAAKyrB,mBAAmBvT,IAEnD,GADArN,OAA+B,GAAxB2e,EAAc1e,QAE6B,QAA/CiY,EAAUyG,EAAc,GAAG0C,kBAE1BnJ,IAAYiJ,GACZjJ,EAAQgJ,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAK/T,EAAgBlY,KAAK4iB,QAAQrJ,eAAiBvZ,KAAKiC,UAAUonB,QAAQnR,GAAgB,CAC3FsR,EAAgB3e,OAAO7K,KAAKyrB,mBAAmBvT,IAEnD,GADArN,OAA+B,GAAxB2e,EAAc1e,QAE6B,QAA/CiY,EAAUyG,EAAc,GAAG0C,kBAE1BnJ,IAAYiJ,GACZjJ,EAAQgJ,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/ClJ,EAAUyG,EAAc,GAAG0C,kBAE1BnJ,IAAYiJ,GACZjJ,EAAQgJ,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GAEX1C,EA9UA,CAA2BnG,GAAd1jB,EAAA6pB,QAiVb,IAAAlH,EAAA,SAAA9U,GAGE,SAAA8U,EACEzhB,EACAgQ,EACAK,EACAJ,UAEAtD,EAAA/M,KAAAR,KACEY,EACAgQ,EACAK,EACAJ,GACA,IACD7Q,KAEL,OAjBwC8O,EAAAuT,EAAA9U,GAiBxC8U,EAjBA,CAAwCrE,GAA3Bte,EAAA2iB,qBAoBb,IAAA8J,EAAA,SAAA5e,GAGE,SAAA4e,EACEtG,EACA5jB,EACAunB,EACAC,eADA,IAAAD,MAAA,SACA,IAAAC,MAAA,MAEAlc,EAAA/M,KAAAR,KACE6lB,EACA5jB,EACAunB,EACAC,GACA,IACDzpB,KAEL,OAjB+B8O,EAAAqd,EAAA5e,GAiB/B4e,EAjBA,CAA+B5C,GAoB/B,SAAS5B,EAAwB/E,EAAkBnN,GACjD5K,QAAQ+X,EAAQ7U,gBAAgBmD,IAAIuE,EAAQ9G,eAC5CiU,EAAQ7U,gBAAgBW,IAAI+G,EAAQ9G,aAAc8G,GAIpD,SAASqH,EAASsP,EAAgBC,GAGhCxhB,OAAOuhB,EAAMxJ,UAAYyJ,EAAMzJ,SAC/B/X,QAAQwhB,EAAMxQ,SACd,IAAIgB,EAAiC,KACrC,OAAQuP,EAAMhZ,MACZ,KAAKhG,EAAY2N,mBACf,OAAQsR,EAAMjZ,MACZ,KAAKhG,EAAYgX,UACf5B,EAAY6J,EAAOD,GACnBvP,EAA0BuP,EAC1B,MAEF,KAAKhf,EAAY6W,eACVmI,EAAMvJ,aACTuJ,EAAMvJ,WAA6BwJ,EACnC7J,EAAY6J,EAAOD,GACnBvP,EAA0BuP,GAKhC,MAEF,KAAKhf,EAAY+J,gBACjB,KAAK/J,EAAYiX,KACf,GAAIgI,EAAMjZ,MAAQhG,EAAYgX,UAAW,CACvC5B,EAAY6J,EAAOD,GACnBvP,EAA0BuP,EAC1B,MAEF,MAEF,KAAKhf,EAAYgX,UACf,OAAQiI,EAAMjZ,MACZ,KAAKhG,EAAYiX,KACjB,KAAKjX,EAAY+J,gBACjB,KAAK/J,EAAY2N,mBACfyH,EAAY4J,EAAOC,GACnBxP,EAA0BwP,EAC1B,MAEF,KAAKjf,EAAYgX,UACf5B,EAAY6J,EAAOD,GACnBvP,EAA0BuP,EAC1B,MAEF,KAAKhf,EAAY6W,eACVmI,EAAMvJ,aACTuJ,EAAMvJ,WAA6BwJ,EACnC7J,EAAY6J,EAAOD,GACnBvP,EAA0BuP,GAKhC,MAEF,KAAKhf,EAAY6Q,OACXoO,EAAMjZ,MAAQhG,EAAY6W,iBACvBmI,EAAMvJ,aACTuJ,EAAMvJ,WAA6BwJ,EACnC7J,EAAY6J,EAAOD,GACnBvP,EAA0BuP,IAG9B,MAEF,KAAKhf,EAAY6W,eACf,OAAQoI,EAAMjZ,MACZ,KAAKhG,EAAY6Q,OACjB,KAAK7Q,EAAY2N,mBACjB,KAAK3N,EAAYgX,UACViI,EAAMxJ,aACTwJ,EAAMxJ,WAA6BuJ,EACnC5J,EAAY4J,EAAOC,GACnBxP,EAA0BwP,IAQhCxP,KACkBuP,EAAM/P,GAAG5S,EAAApH,YAAYuP,SAAWwa,EAAMjU,aAAa9K,EAAe4Q,WAClEoO,EAAMhQ,GAAG5S,EAAApH,YAAYuP,SAAWya,EAAMlU,aAAa9K,EAAe4Q,UAEpFmO,EAAMxJ,QAAQvN,MACZ3L,EAAA4L,eAAegX,kFACfzP,EAAOvE,eAAe3I,MAAOkN,EAAOvE,eAAe3C,OAIzD,OAAOkH,EAIT,SAAS2F,EAAY+J,EAAcC,WAC7BC,EAAaF,EAAI1Q,QACrB,GAAI4Q,EAAY,CACd,IAAIC,EAAcF,EAAK3Q,QAClB6Q,IAAaF,EAAK3Q,QAAU6Q,EAAc,IAAItlB,SACnD,IAAiC,IAAAulB,EAAAjY,EAAA+X,GAAUG,EAAAD,EAAA/X,QAAAgY,EAAA/X,KAAA+X,EAAAD,EAAA/X,OAAE,CAApC,IAAAmP,EAAAhP,EAAA6X,EAAAtrB,MAAA,GAAC0iB,EAAAD,EAAA,GAAY1I,EAAA0I,EAAA,GACpB2I,EAAYhe,IAAIsV,EAAY3I,uGAMlC,SAAgB6I,EAAmBtjB,EAAcgQ,EAAiBic,EAAkBC,GAClF,YADkF,IAAAA,OAAA,GAC1Elc,EAAOwC,MACb,KAAKhG,EAAY0V,KACf,OAAIgK,EAAiBlsB,EACdgQ,EAAOjC,aAAelF,EAAAnH,eAAiB1B,EAEhD,KAAKwM,EAAYsO,SACf,OAAIoR,EAAiBlsB,GACrBiK,QAAQgiB,GACDjc,EAAOjC,aAAelF,EAAA7G,gBAAkBhC,GAEjD,QACE,OAAOsjB,EAAmBtT,EAAOhQ,KAAMgQ,EAAOA,OAAQA,EAAOyL,GAAG5S,EAAApH,YAAY+f,UAAW0K,IAC/ED,EAAapjB,EAAA/G,mBAAqB+G,EAAA9G,kBAAoB/B,GAtJvDlB,EAAAysB,YAyIbzsB,EAAAwkB,kKC9+GA6I,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KAGAT,EAAAstB,WAAA,SAA2BC,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,mFCL7B,IAeYC,EAfZC,EAAAhtB,EAAA,IAKA0J,EAAA1J,EAAA,GAIAitB,EAAAjtB,EAAA,IAgBA,SAAgBktB,EAA2BC,GACzC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,MAAO,OACrC,KAAKL,EAAmBM,QAAS,MAAO,UACxC,KAAKN,EAAmBO,MAAO,MAAO,QACtC,QAEE,OADA5iB,QAAO,GACA,IAeb,SAAgB6iB,EAA0BJ,GACxC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,OAAO7tB,EAAAiuB,WACrC,KAAKT,EAAmBM,QAAS,OAAO9tB,EAAAkuB,aACxC,KAAKV,EAAmBO,MAAO,OAAO/tB,EAAAmuB,UACtC,QAEE,OADAhjB,QAAO,GACA,IA5CXnL,EAAA4V,eAAA8X,EAAA9X,eACA5V,EAAAouB,uBAAAV,EAAAU,uBAIF,SAAYZ,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAxtB,EAAAwtB,qBAAAxtB,EAAAwtB,mBAAkB,KAU9BxtB,EAAA2tB,6BAaa3tB,EAAAiuB,WAAqB,QAErBjuB,EAAAkuB,aAAuB,QAEvBluB,EAAAmuB,UAAoB,QAEpBnuB,EAAAquB,YAAsB,OAGnCruB,EAAAguB,4BAaA,IAAAM,EAAA,WAcE,SAAAA,EAAoBC,EAAWX,EAA8BY,GAL7DluB,KAAA2P,MAAsB,KAEtB3P,KAAAmuB,aAA6B,KAI3BnuB,KAAKiuB,KAAOA,EACZjuB,KAAKstB,SAAWA,EAChBttB,KAAKkuB,QAAUA,EAkFnB,OA9ESF,EAAArsB,OAAP,SACEssB,EACAX,EACAc,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUf,EAAAW,uBAAuBG,GAIrC,OAHY,MAARG,IAAcF,EAAUA,EAAQK,QAAQ,MAAOH,IACvC,MAARC,IAAcH,EAAUA,EAAQK,QAAQ,MAAOF,IACvC,MAARC,IAAcJ,EAAUA,EAAQK,QAAQ,MAAOD,IAC5C,IAAIN,EAAkBC,EAAMX,EAAUY,IAIxCF,EAAAQ,WAAP,SACEP,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBrsB,OAAOssB,EAAMf,EAAmBK,KAAMa,EAAMC,IAIhEL,EAAAS,cAAP,SACER,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBrsB,OAAOssB,EAAMf,EAAmBM,QAASY,EAAMC,IAInEL,EAAAU,YAAP,SACET,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBrsB,OAAOssB,EAAMf,EAAmBO,MAAOW,EAAMC,IAIxEL,EAAA/rB,UAAA0sB,UAAA,SAAUhf,GAER,OADA3P,KAAK2P,MAAQA,EACN3P,MAITguB,EAAA/rB,UAAA2sB,iBAAA,SAAiBjf,GAEf,OADA3P,KAAKmuB,aAAexe,EACb3P,MAITguB,EAAA/rB,UAAA6b,SAAA,WACE,OAAI9d,KAAK2P,MAEL0d,EAA2BrtB,KAAKstB,UAChC,IACAttB,KAAKiuB,KAAKnQ,SAAS,IACnB,MACA9d,KAAKkuB,QACL,QACAluB,KAAK2P,MAAMoD,OAAOwQ,eAClB,IACAvjB,KAAK2P,MAAMyY,KAAKtK,SAAS,IACzB,IACA9d,KAAK2P,MAAM0Y,OAAOvK,SAAS,IAI7BuP,EAA2BrtB,KAAKstB,UAChC,IACAttB,KAAKiuB,KAAKnQ,SAAS,IACnB,KACA9d,KAAKkuB,SAGXF,EAnGA,GA4JA,SAAgBa,EAAwBlf,EAAcmf,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAInZ,EAAOhG,EAAMoD,OAAO4C,KACpBoZ,EAAMpZ,EAAK7K,OACXkkB,EAAQrf,EAAMqf,MACdC,EAAMtf,EAAMsf,IACTD,EAAQ,IAAMnlB,EAAAqlB,YAAYvZ,EAAKzK,WAAW8jB,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQllB,EAAAqlB,YAAYvZ,EAAKzK,WAAW+jB,KAAOA,IAMxD,IALA,IAAIE,EAAe,CACjB,MACAxZ,EAAK+L,UAAUsN,EAAOC,GACtB,OAEKD,EAAQrf,EAAMqf,OACnBG,EAAG5Q,KAAK,KACRyQ,IAGF,GADIF,GAAWK,EAAG5Q,KAAK7e,EAAAmuB,WACnBle,EAAMqf,OAASrf,EAAMsf,IACvBE,EAAG5Q,KAAK,UAER,KAAOyQ,IAAUrf,EAAMsf,KAAK,CAC1B,GAAIplB,EAAAqlB,YAAYvZ,EAAKzK,WAAW8jB,IAAS,CACvCG,EAAG5Q,KAAKyQ,GAASrf,EAAMqf,MAAQ,EAAI,IAAM,KACzC,MAEFG,EAAG5Q,KAAK,KAIZ,OADIuQ,GAAWK,EAAG5Q,KAAK7e,EAAAquB,aAChBoB,EAAGzW,KAAK,IAzLJhZ,EAAAsuB,oBAsGbtuB,EAAA0vB,wBAAA,SACElB,EACAY,EACAO,QADA,IAAAP,OAAA,QACA,IAAAO,OAAA,GAIA,IAAIF,EAAe,GAUnB,GATIL,GAAWK,EAAG5Q,KAAKmP,EAA0BQ,EAAQZ,WACzD6B,EAAG5Q,KAAK8O,EAA2Ba,EAAQZ,WACvCwB,GAAWK,EAAG5Q,KAAK7e,EAAAquB,aACvBoB,EAAG5Q,KAAK2P,EAAQD,KAAO,IAAO,MAAQ,OACtCkB,EAAG5Q,KAAK2P,EAAQD,KAAKnQ,SAAS,KAC9BqR,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAK2P,EAAQA,SAGZA,EAAQve,MAAO,CAGjB,IAAIA,EAAQue,EAAQve,MAChB0f,IACFF,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKsQ,EAAwBlf,EAAOmf,KAEzCK,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAK5O,EAAMoD,OAAOwQ,gBACrB4L,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK5O,EAAMyY,KAAKtK,SAAS,KAC5BqR,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK5O,EAAM0Y,OAAOvK,SAAS,KAC9BqR,EAAG5Q,KAAK,KAER,IAAI4P,EAAeD,EAAQC,aACvBA,IACEkB,IACFF,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKsQ,EAAwBV,EAAcW,KAEhDK,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAK5O,EAAMoD,OAAOwQ,gBACrB4L,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK5O,EAAMyY,KAAKtK,SAAS,KAC5BqR,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK5O,EAAM0Y,OAAOvK,SAAS,KAC9BqR,EAAG5Q,KAAK,MAGZ,OAAO4Q,EAAGzW,KAAK,KAIjBhZ,EAAAmvB,0BAiCA,IAAAnM,EAAA,WAME,SAAAA,EAAsBlV,QAAA,IAAAA,MAAA,MACpBxN,KAAKwN,YAAcA,GAAiD,IAAIvG,MAwF5E,OApFEyb,EAAAzgB,UAAAqtB,eAAA,SACErB,EACAX,EACA3d,EACAwe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUF,EAAkBrsB,OAAOssB,EAAMX,EAAUc,EAAMC,EAAMC,GAAMK,UAAUhf,GAC/Ewe,IAAcD,EAAQC,aAAeA,GACzCnuB,KAAKwN,YAAY+Q,KAAK2P,IAMxBxL,EAAAzgB,UAAAstB,KAAA,SACEtB,EACAte,EACAye,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBK,KAAM5d,EAAO,KAAMye,EAAMC,EAAMC,IAI9E5L,EAAAzgB,UAAAutB,YAAA,SACEvB,EACAte,EACAwe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBK,KAAM5d,EAAOwe,EAAcC,EAAMC,EAAMC,IAItF5L,EAAAzgB,UAAAoc,QAAA,SACE4P,EACAte,EACAye,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBM,QAAS7d,EAAO,KAAMye,EAAMC,EAAMC,IAIjF5L,EAAAzgB,UAAAwtB,eAAA,SACExB,EACAte,EACAwe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBM,QAAS7d,EAAOwe,EAAcC,EAAMC,EAAMC,IAIzF5L,EAAAzgB,UAAAoT,MAAA,SACE4Y,EACAte,EACAye,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBO,MAAO9d,EAAO,KAAMye,EAAMC,EAAMC,IAI/E5L,EAAAzgB,UAAAytB,aAAA,SACEzB,EACAte,EACAwe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBO,MAAO9d,EAAOwe,EAAcC,EAAMC,EAAMC,IAEzF5L,EA/FA,GAAsBhjB,EAAAgjB,mbC9PrB,IAAAjZ,EAAAtJ,EAAA,GAODwvB,EAAAxvB,EAAA,GAYST,EAAAkwB,MAXPD,EAAAC,MAWclwB,EAAA+Y,MATdkX,EAAAlX,MAGF,IASYpF,EATZxJ,EAAA1J,EAAA,IASA,SAAYkT,GAEVA,IAAA,mBAGAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,0DACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBA1EF,CAAYA,EAAA3T,EAAA2T,WAAA3T,EAAA2T,SAAQ,KA8EpB3T,EAAAmwB,oBAAA,SAAoCzc,GAClC,OAAQA,GACN,KAAKC,EAAS+M,QACd,KAAK/M,EAASyc,KACd,KAAKzc,EAAS0c,KACd,KAAK1c,EAAS2c,MAAO,OAAO,EAE9B,OAAO,GAITtwB,EAAAuwB,eAAA,SAA+B7c,GAC7B,OAAQA,GACN,KAAKC,EAAS6c,WACd,KAAK7c,EAAS8c,UACd,KAAK9c,EAAS+c,KACd,KAAK/c,EAASgd,cACd,KAAKhd,EAASid,cACd,KAAKjd,EAASkd,eACd,KAAKld,EAASmd,MAAO,OAAO,EAE9B,OAAO,GAIT9wB,EAAA+wB,sBAAA,SAAsCrd,GACpC,OAAQA,GACN,KAAKC,EAAS6c,WACd,KAAK7c,EAASkd,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAA3gB,EAAA,oBAAAA,KA66BA,OAp6BSA,EAAA8gB,eAAP,SACE9vB,EACA+O,GAEA,IAAIghB,EAAW,IAAIC,EAInB,OAHAD,EAAShhB,MAAQA,EACjBghB,EAAS3gB,WAAapP,EACtB+vB,EAAS/b,KAAO,KACT+b,GAGF/gB,EAAAW,qBAAP,SACE3P,EACA+O,GAEA,OAAOC,EAAK8gB,eAAe9gB,EAAKE,2BAA2BlP,EAAM+O,GAAQA,IAGpEC,EAAAU,gBAAP,SACE1P,EACA4oB,EACAqH,EACAlhB,GAEA,IAAIqM,EAAO,IAAI8U,EAKf,OAJA9U,EAAKrM,MAAQA,EACbqM,EAAKpb,KAAOA,EACZob,EAAKwN,cAAgBA,EACrBxN,EAAK6U,WAAaA,EACX7U,GAGFpM,EAAAS,mBAAP,SACE0gB,EACAC,EACAC,EACAJ,EACAlhB,GAEA,IAAIqM,EAAO,IAAIkV,EAMf,OALAlV,EAAKrM,MAAQA,EACbqM,EAAK+U,WAAaA,EAClB/U,EAAKgV,WAAaA,EAClBhV,EAAKiV,iBAAmBA,EACxBjV,EAAK6U,WAAaA,EACX7U,GAGFpM,EAAAM,kBAAP,SACEP,GAEA,OAAOC,EAAKU,gBACVV,EAAKW,qBAAqB,GAAIZ,GAC9B,MACA,EACAA,IAIGC,EAAAuhB,oBAAP,SACEvwB,EACA4d,EACA4S,EACAzhB,GAEA,IAAI0hB,EAAO,IAAIC,EAKf,OAJAD,EAAK1hB,MAAQA,EACb0hB,EAAKzwB,KAAOA,EACZywB,EAAK7S,YAAcA,EACnB6S,EAAKD,YAAcA,EACZC,GAGFzhB,EAAA2hB,gBAAP,SACE3wB,EACAob,EACAyI,EACArR,EACAzD,GAEA,IAAI0hB,EAAO,IAAIG,EAMf,OALAH,EAAK1hB,MAAQA,EACb0hB,EAAKzwB,KAAOA,EACZywB,EAAKrV,KAAOA,EACZqV,EAAK5M,YAAcA,EACnB4M,EAAKI,cAAgBre,EACdie,GAKFzhB,EAAA8hB,gBAAP,SACE9wB,EACA+wB,EACAhiB,GAEA,IAAIiiB,EAAO,IAAIC,EAKf,OAJAD,EAAKjiB,MAAQA,EACbiiB,EAAKhxB,KAAOA,EACZgxB,EAAK1R,UAAYyR,EACjBC,EAAKjnB,cAAgBgT,EAAoB/c,GAClCgxB,GAGFhiB,EAAAkiB,cAAP,SACEnc,EACAvC,EACAzD,GAEA,IAAIoiB,EAAO,IAAIC,EAIf,OAHAD,EAAKpiB,MAAQA,EACboiB,EAAKE,YAAc7e,EACnB2e,EAAKpc,KAAOA,EACLoc,GAKFniB,EAAAE,2BAAP,SACElP,EACA+O,EACAuiB,QAAA,IAAAA,OAAA,GAEA,IAAIC,EAAO,IAAIC,EAKf,OAJAD,EAAKxiB,MAAQA,EACbwiB,EAAKxc,KAAO/U,EACZuxB,EAAKE,OAASzxB,EACduxB,EAAKD,SAAWA,EACTC,GAGFviB,EAAA0iB,gCAAP,SACE3iB,GAEA,IAAIwiB,EAAO,IAAIC,EAGf,OAFAD,EAAKxiB,MAAQA,EACbwiB,EAAKxc,KAAO,GACLwc,GAGFviB,EAAA2iB,6BAAP,SACEvV,EACArN,GAEA,IAAIwiB,EAAO,IAAIK,EAGf,OAFAL,EAAKxiB,MAAQA,EACbwiB,EAAKM,mBAAqBzV,EACnBmV,GAGFviB,EAAA8iB,0BAAP,SACEC,EACAC,EACAC,EACAljB,GAEA,IAAIwiB,EAAO,IAAIW,EAKf,OAJAX,EAAKxiB,MAAQA,EACbwiB,EAAKQ,cAAgBA,EACrBR,EAAKS,WAAaA,EAClBT,EAAKU,OAASA,EACPV,GAGFviB,EAAAmjB,uBAAP,SACEC,EACAC,EACAC,EACAvjB,GAEA,IAAIwiB,EAAO,IAAIgB,EAKf,OAJAhB,EAAKxiB,MAAQA,EACbwiB,EAAKa,SAAWA,EAChBb,EAAKc,KAAOA,EACZd,EAAKe,MAAQA,EACNf,GAGFviB,EAAAwjB,qBAAP,SACER,EACAS,EACA1B,EACAhiB,GAEA,IAAIwiB,EAAO,IAAImB,EAKf,OAJAnB,EAAKxiB,MAAQA,EACbwiB,EAAKS,WAAaA,EAClBT,EAAK3I,cAAgB6J,EACrBlB,EAAKjS,UAAYyR,EACVQ,GAGFviB,EAAA2jB,sBAAP,SACEtiB,GAEA,IAAIkhB,EAAO,IAAIqB,EAGf,OAFArB,EAAKxiB,MAAQsB,EAAYtB,MACzBwiB,EAAKlhB,YAAcA,EACZkhB,GAGFviB,EAAA6jB,sBAAP,SACEC,EACA/jB,GAEA,IAAIwiB,EAAO,IAAIwB,EAGf,OAFAxB,EAAKxiB,MAAQA,EACbwiB,EAAKuB,YAAcA,EACZvB,GAGFviB,EAAAgkB,4BAAP,SACEjkB,GAEA,IAAIwiB,EAAO,IAAI0B,EAEf,OADA1B,EAAKxiB,MAAQA,EACNwiB,GAGFviB,EAAAkkB,8BAAP,SACElB,EACAnd,EACA9F,GAEA,IAAIwiB,EAAO,IAAI4B,EAIf,OAHA5B,EAAKxiB,MAAQA,EACbwiB,EAAKS,WAAaA,EAClBT,EAAK6B,kBAAoBve,EAClB0c,GAGFviB,EAAAqkB,sBAAP,SACEtkB,GAEA,IAAIwiB,EAAO,IAAI+B,EAEf,OADA/B,EAAKxiB,MAAQA,EACNwiB,GAGFviB,EAAAukB,6BAAP,SACE7yB,EACAqO,GAEA,IAAIwiB,EAAO,IAAIiC,EAGf,OAFAjC,EAAKxiB,MAAQA,EACbwiB,EAAK7wB,MAAQA,EACN6wB,GAGFviB,EAAAykB,yBAAP,SACEpjB,GAEA,IAAIkhB,EAAO,IAAImC,EAGf,OAFAnC,EAAKxiB,MAAQsB,EAAYtB,MACzBwiB,EAAKlhB,YAAcA,EACZkhB,GAGFviB,EAAA2kB,2BAAP,SACE3B,EACA4B,EACA7kB,GAEA,IAAIwiB,EAAO,IAAIsC,EAIf,OAHAtC,EAAKxiB,MAAQA,EACbwiB,EAAKS,WAAaA,EAClBT,EAAKqC,OAASA,EACPrC,GAGFviB,EAAA8kB,+BAAP,SACEpzB,EACAqO,GAEA,IAAIwiB,EAAO,IAAIwC,EAGf,OAFAxC,EAAKxiB,MAAQA,EACbwiB,EAAK7wB,MAAQA,EACN6wB,GAGFviB,EAAAglB,oBAAP,SACEhC,EACAS,EACA1B,EACAhiB,GAEA,IAAIwiB,EAAO,IAAI0C,EAKf,OAJA1C,EAAKxiB,MAAQA,EACbwiB,EAAKS,WAAaA,EAClBT,EAAK3I,cAAgB6J,EACrBlB,EAAKjS,UAAYyR,EACVQ,GAGFviB,EAAAklB,qBAAP,SACEnlB,GAEA,IAAIwiB,EAAO,IAAI4C,EAEf,OADA5C,EAAKxiB,MAAQA,EACNwiB,GAGFviB,EAAAolB,8BAAP,SACEC,EACA3a,EACA3K,GAEA,IAAIwiB,EAAO,IAAI+C,EAIf,OAHA/C,EAAKxiB,MAAQA,EACbwiB,EAAK8C,MAAQA,EACb9C,EAAK7X,OAASA,EACP6X,GAGFviB,EAAAulB,8BAAP,SACEvC,EACAjjB,GAEA,IAAIwiB,EAAO,IAAIiD,EAGf,OAFAjD,EAAKxiB,MAAQA,EACbwiB,EAAKS,WAAaA,EACXT,GAGFviB,EAAAylB,+BAAP,SACEzC,EACA5wB,EACA2N,GAEA,IAAIwiB,EAAO,IAAImD,EAIf,OAHAnD,EAAKxiB,MAAQA,EACbwiB,EAAKS,WAAaA,EAClBT,EAAKnwB,SAAWA,EACTmwB,GAGFviB,EAAA2lB,8BAAP,SACEC,EACA/lB,EACAE,GAEA,IAAIwiB,EAAO,IAAIsD,EAIf,OAHAtD,EAAKxiB,MAAQA,EACbwiB,EAAKqD,QAAUA,EACfrD,EAAKuD,aAAejmB,EACb0iB,GAGFviB,EAAA+lB,wBAAP,SACEC,EACAC,EACAC,EACAnmB,GAEA,IAAIwiB,EAAO,IAAI4D,EAKf,OAJA5D,EAAKxiB,MAAQA,EACbwiB,EAAKyD,UAAYA,EACjBzD,EAAK0D,OAASA,EACd1D,EAAK2D,OAASA,EACP3D,GAGFviB,EAAAomB,8BAAP,SACE10B,EACAqO,GAEA,IAAIwiB,EAAO,IAAI8D,EAGf,OAFA9D,EAAKxiB,MAAQA,EACbwiB,EAAK7wB,MAAQA,EACN6wB,GAGFviB,EAAAsmB,sBAAP,SACEvmB,GAEA,IAAIwiB,EAAO,IAAIgE,EAEf,OADAhE,EAAKxiB,MAAQA,EACNwiB,GAGFviB,EAAAwmB,qBAAP,SACEzmB,GAEA,IAAIwiB,EAAO,IAAIkE,EAEf,OADAlE,EAAKxiB,MAAQA,EACNwiB,GAGFviB,EAAA0mB,qBAAP,SACE3mB,GAEA,IAAIwiB,EAAO,IAAIoE,EAEf,OADApE,EAAKxiB,MAAQA,EACNwiB,GAGFviB,EAAA4mB,6BAAP,SACExD,EACAyD,EACA9mB,GAEA,IAAIwiB,EAAO,IAAIuE,EAIf,OAHAvE,EAAKxiB,MAAQA,EACbwiB,EAAKa,SAAWA,EAChBb,EAAKsE,QAAUA,EACRtE,GAGFviB,EAAA+mB,4BAAP,SACE3D,EACAyD,EACA9mB,GAEA,IAAIwiB,EAAO,IAAIyE,EAIf,OAHAzE,EAAKxiB,MAAQA,EACbwiB,EAAKa,SAAWA,EAChBb,EAAKsE,QAAUA,EACRtE,GAKFviB,EAAAinB,qBAAP,SACE5jB,EACAtD,GAEA,IAAIiiB,EAAO,IAAIkF,GAGf,OAFAlF,EAAKjiB,MAAQA,EACbiiB,EAAK3e,WAAaA,EACX2e,GAGFhiB,EAAAmnB,qBAAP,SACEC,EACArnB,GAEA,IAAIiiB,EAAO,IAAIqF,GAGf,OAFArF,EAAKjiB,MAAQA,EACbiiB,EAAKoF,MAAQA,EACNpF,GAGFhiB,EAAAsnB,uBAAP,SACElnB,EACAmU,EACA3F,EACAN,EACArC,EACAyB,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAIuF,GASf,OARAvF,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOoP,EACZ4hB,EAAKzN,eAAiBA,EACtByN,EAAKpT,YAAcA,EACnBoT,EAAK1T,gBAAkBA,EACvB0T,EAAK/V,QAAUA,EACf+V,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAAwnB,wBAAP,SACEJ,EACArnB,GAEA,IAAIiiB,EAAO,IAAIyF,GAGf,OAFAzF,EAAKjiB,MAAQA,EACbiiB,EAAKoF,MAAQA,EACNpF,GAGFhiB,EAAA0nB,kBAAP,SACEnkB,EACAyiB,EACAjmB,GAEA,IAAIiiB,EAAO,IAAI2F,GAIf,OAHA3F,EAAKjiB,MAAQA,EACbiiB,EAAKze,UAAYA,EACjBye,EAAKgE,UAAYA,EACVhE,GAGFhiB,EAAA4nB,qBAAP,SACE7nB,GAEA,IAAIiiB,EAAO,IAAI6F,GAEf,OADA7F,EAAKjiB,MAAQA,EACNiiB,GAGFhiB,EAAA8nB,sBAAP,SACE92B,EACAib,EACAyB,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAI+F,GAMf,OALA/F,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAKtX,OAASuB,EACd+V,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAAgoB,2BAAP,SACEh3B,EACAU,EACAmO,EACAE,GAEA,IAAIiiB,EAAO,IAAIiG,GAKf,OAJAjG,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAKtwB,MAAQA,EACNswB,GAGFhiB,EAAAkoB,sBAAP,SACEjc,EACA8F,EACAoW,EACApoB,GAEA,IAAIiiB,EAAO,IAAIoG,GAIf,GAHApG,EAAKjiB,MAAQA,EACbiiB,EAAK/V,QAAUA,EACf+V,EAAKjQ,KAAOA,EACRA,EAAM,CACR,IAAI4B,EAAiB1Z,EAAAouB,cAActW,EAAKrgB,OACpCqgB,EAAKrgB,MAAM42B,WAAW,KACxBtG,EAAKrO,eAAiB1Z,EAAAsuB,YACpB5U,EACA5T,EAAMoD,OAAOwQ,iBAGVA,EAAe2U,WAAWzuB,EAAA3G,kBAC7BygB,EAAiB9Z,EAAA3G,eAAiBygB,GAEpCqO,EAAKrO,eAAiBA,GAExBqO,EAAKrQ,aAAe6W,GAAmBxG,EAAKrO,qBAE5CqO,EAAKrO,eAAiB,KACtBqO,EAAKrQ,aAAe,KAGtB,OADAqQ,EAAKmG,UAAYA,EACVnG,GAGFhiB,EAAAyoB,6BAAP,SACEpnB,EACAtB,GAEA,IAAIiiB,EAAO,IAAI0G,GAGf,OAFA1G,EAAK3gB,YAAcA,EACnB2gB,EAAKjiB,MAAQA,EACNiiB,GAGFhiB,EAAA2oB,4BAAP,SACE33B,EACA43B,EACA7oB,GAEA,IAAIiiB,EAAO,IAAI6G,GAIf,OAHA7G,EAAKjiB,MAAQA,EACbiiB,EAAKhxB,KAAOA,EACZgxB,EAAK4G,aAAeA,EACb5G,GAGFhiB,EAAA8oB,mBAAP,SACE93B,EACA43B,EACA7oB,GAEA,IAAI0hB,EAAO,IAAIsH,GAKf,OAJAtH,EAAK1hB,MAAQA,EACb0hB,EAAKxb,UAAYjV,EACZ43B,IAAcA,EAAe53B,GAClCywB,EAAKzP,aAAe4W,EACbnH,GAGFzhB,EAAAgpB,0BAAP,SACEhG,GAEA,IAAIhB,EAAO,IAAIiH,GAGf,OAFAjH,EAAKjiB,MAAQijB,EAAWjjB,MACxBiiB,EAAKgB,WAAaA,EACXhB,GAGFhiB,EAAAkpB,kBAAP,SACElD,EACAmD,EACAC,EACArpB,GAEA,IAAIiiB,EAAO,IAAIqH,GAKf,OAJArH,EAAKjiB,MAAQA,EACbiiB,EAAKgE,UAAYA,EACjBhE,EAAKmH,OAASA,EACdnH,EAAKoH,QAAUA,EACRpH,GAGFhiB,EAAAspB,sBAAP,SACEC,EACAxX,EACAhS,GAEA,IAAIiiB,EAAO,IAAIwH,GACfxH,EAAKjiB,MAAQA,EACbiiB,EAAK9P,aAAeqX,EACpBvH,EAAK5P,cAAgB,KACrB4P,EAAKjQ,KAAOA,EACZ,IAAI4B,EAAiB1Z,EAAAouB,cAActW,EAAKrgB,OAaxC,OAZIqgB,EAAKrgB,MAAM42B,WAAW,KACxBtG,EAAKrO,eAAiB1Z,EAAAsuB,YACpB5U,EACA5T,EAAMoD,OAAOwQ,iBAGVA,EAAe2U,WAAWzuB,EAAA3G,kBAC7BygB,EAAiB9Z,EAAA3G,eAAiBygB,GAEpCqO,EAAKrO,eAAiBA,GAExBqO,EAAKrQ,aAAe6W,GAAmBxG,EAAKrO,gBACrCqO,GAGFhiB,EAAAypB,kCAAP,SACErpB,EACA2R,EACAhS,GAEA,IAAIiiB,EAAO,IAAIwH,GACfxH,EAAKjiB,MAAQA,EACbiiB,EAAK9P,aAAe,KACpB8P,EAAK5P,cAAgBhS,EACrB4hB,EAAKjQ,KAAOA,EACZ,IAAI4B,EAAiB1Z,EAAAouB,cAActW,EAAKrgB,OAaxC,OAZIqgB,EAAKrgB,MAAM42B,WAAW,KACxBtG,EAAKrO,eAAiB1Z,EAAAsuB,YACpB5U,EACA5T,EAAMoD,OAAOwQ,iBAGVA,EAAe2U,WAAWzuB,EAAA3G,kBAC7BygB,EAAiB9Z,EAAA3G,eAAiBygB,GAEpCqO,EAAKrO,eAAiBA,GAExBqO,EAAKrQ,aAAe6W,GAAmBxG,EAAKrO,gBACrCqO,GAGFhiB,EAAA0pB,wBAAP,SACEpc,EACAtc,EACA+O,GAEA,IAAI0hB,EAAO,IAAIkI,GAKf,OAJAlI,EAAK1hB,MAAQA,EACb0hB,EAAKnU,YAAcA,EACdtc,IAAMA,EAAOsc,GAClBmU,EAAKzwB,KAAOA,EACLywB,GAGFzhB,EAAA4pB,2BAAP,SACE54B,EACAujB,EACA3F,EACA3C,EACAyB,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAI6H,GAQf,OAPA7H,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAKzN,eAAiBA,EACtByN,EAAKpT,YAAcA,EACnBoT,EAAK/V,QAAUA,EACf+V,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAA8pB,uBAAP,SACE94B,EACAob,EACAyI,EACAnH,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAI+H,GAOf,OANA/H,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAK5V,KAAOA,EACZ4V,EAAKnN,YAAcA,EACnBmN,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAAgqB,mBAAP,SACEnV,EACAmR,EACAiE,EACA1mB,EACAxD,GAEA,IAAIiiB,EAAO,IAAIkI,GAMf,OALAlI,EAAKjiB,MAAQA,EACbiiB,EAAKnN,YAAcA,EACnBmN,EAAKgE,UAAYA,EACjBhE,EAAKiI,YAAcA,EACnBjI,EAAKze,UAAYA,EACVye,GAGFhiB,EAAAQ,0BAAP,SACExP,EACAujB,EACAxT,EACA0U,EACA/H,EACA7N,EACA6V,EACA3V,GAEA,IAAIiiB,EAAO,IAAImI,GASf,OARAnI,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAKzN,eAAiBA,EACtByN,EAAKjhB,UAAYA,EACjBihB,EAAKvM,KAAOA,EACZuM,EAAKtU,WAAaA,EAClBsU,EAAKtM,UAAYA,EACVsM,GAGFhiB,EAAAoqB,gCAAP,SACEC,EACAC,EACAvqB,GAEA,IAAI0hB,EAAO,IAAI8I,GAIf,OAHA9I,EAAK1hB,MAAQA,EACb0hB,EAAK4I,QAAUA,EACf5I,EAAK6I,UAAYA,EACV7I,GAGFzhB,EAAAwqB,wBAAP,SACEx5B,EACAujB,EACAxT,EACA0U,EACA/H,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAIyI,GAQf,OAPAzI,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAKzN,eAAiBA,EACtByN,EAAKjhB,UAAYA,EACjBihB,EAAKvM,KAAOA,EACZuM,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAAa,2BAAP,SACE7P,EACAib,EACAyB,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAI0I,GAMf,OALA1I,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAK/V,QAAUA,EACf+V,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAA2qB,sBAAP,SACEj5B,EACAqO,GAEA,IAAIiiB,EAAO,IAAI4I,GAGf,OAFA5I,EAAKjiB,MAAQA,EACbiiB,EAAKtwB,MAAQA,EACNswB,GAGFhiB,EAAA6qB,sBAAP,SACE7E,EACA8E,EACA/qB,GAEA,IAAIiiB,EAAO,IAAI+I,GAIf,OAHA/I,EAAKjiB,MAAQA,EACbiiB,EAAKgE,UAAYA,EACjBhE,EAAK8I,MAAQA,EACN9I,GAGFhiB,EAAAgrB,iBAAP,SACE5D,EACA/jB,EACAtD,GAEA,IAAI0hB,EAAO,IAAIwJ,GAIf,OAHAxJ,EAAK1hB,MAAQA,EACb0hB,EAAK2F,MAAQA,EACb3F,EAAKpe,WAAaA,EACXoe,GAGFzhB,EAAAkrB,qBAAP,SACEx5B,EACAqO,GAEA,IAAIiiB,EAAO,IAAImJ,GAGf,OAFAnJ,EAAKjiB,MAAQA,EACbiiB,EAAKtwB,MAAQA,EACNswB,GAGFhiB,EAAAorB,mBAAP,SACE/nB,EACAgoB,EACAC,EACAC,EACAxrB,GAEA,IAAIiiB,EAAO,IAAIwJ,GAMf,OALAxJ,EAAKjiB,MAAQA,EACbiiB,EAAK3e,WAAaA,EAClB2e,EAAKqJ,cAAgBA,EACrBrJ,EAAKsJ,gBAAkBA,EACvBtJ,EAAKuJ,kBAAoBA,EAClBvJ,GAGFhiB,EAAAK,sBAAP,SACErP,EACAujB,EACAnL,EACAsE,EACA7N,EACAE,GAEA,IAAIiiB,EAAO,IAAIyJ,GAOf,OANAzJ,EAAKjiB,MAAQA,EACbiiB,EAAKniB,MAAQA,EACbmiB,EAAKhxB,KAAOA,EACZgxB,EAAKzN,eAAiBA,EACtByN,EAAK5V,KAAOhD,EACZ4Y,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAA0rB,wBAAP,SACExZ,EACAxE,EACA3N,GAEA,IAAIiiB,EAAO,IAAI2J,GAIf,OAHA3J,EAAKjiB,MAAQA,EACbiiB,EAAK9P,aAAeA,EACpB8P,EAAKtU,WAAaA,EACXsU,GAGFhiB,EAAAC,0BAAP,SACEjP,EACAob,EACAyI,EACAnH,EACA7N,EACAE,GAEA,IAAI0hB,EAAO,IAAImK,GAOf,OANAnK,EAAK1hB,MAAQA,EACb0hB,EAAK5hB,MAAQA,EACb4hB,EAAKzwB,KAAOA,EACZywB,EAAKrV,KAAOA,EACZqV,EAAK5M,YAAcA,EACnB4M,EAAK/T,WAAaA,EACX+T,GAGFzhB,EAAA6rB,oBAAP,SACE7I,EACAjjB,GAEA,IAAIiiB,EAAO,IAAI8J,GAGf,OAFA9J,EAAKjiB,MAAQA,EACbiiB,EAAKgB,WAAaA,EACXhB,GAGFhiB,EAAA+rB,qBAAP,SACE/F,EACAziB,EACAxD,GAEA,IAAIiiB,EAAO,IAAIgK,GAIf,OAHAhK,EAAKjiB,MAAQA,EACbiiB,EAAKgE,UAAYA,EACjBhE,EAAKze,UAAYA,EACVye,GAEXhiB,EA76BA,GAAsBlQ,EAAAkQ,OAi7BtB,IAAAisB,EAAA,SAAAtuB,GAAA,SAAAsuB,mDAKA,OALuC/sB,EAAA+sB,EAAAtuB,GAKvCsuB,EALA,CAAuCjsB,GAAjBlQ,EAAAm8B,WAQtB,IAAAjL,EAAA,SAAArjB,GAAA,SAAAqjB,IAAA,IAAAnjB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASyoB,WAMlB,OAP8BhtB,EAAA8hB,EAAArjB,GAO9BqjB,EAPA,CAA8BhhB,GAAjBlQ,EAAAkxB,WAUb,IAAAE,EAAA,SAAAvjB,GAAA,SAAAujB,IAAA,IAAArjB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS0oB,YAMlB,OAPmCjtB,EAAAgiB,EAAAvjB,GAOnCujB,EAPA,CAAmC+K,GAAtBn8B,EAAAoxB,gBAUb,IAAAI,EAAA,SAAA3jB,GAAA,SAAA2jB,IAAA,IAAAzjB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS2oB,eAQlB,OATsCltB,EAAAoiB,EAAA3jB,GAStC2jB,EATA,CAAsC2K,GAAzBn8B,EAAAwxB,mBAYb,IAAAI,EAAA,SAAA/jB,GAAA,SAAA+jB,IAAA,IAAA7jB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS4oB,gBAQlB,OATuCntB,EAAAwiB,EAAA/jB,GASvC+jB,EATA,CAAuC1hB,GAA1BlQ,EAAA4xB,oBAYb,SAAY4K,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYx8B,EAAAw8B,gBAAAx8B,EAAAw8B,cAAa,KAUzB,IA2BYnxB,EA3BZymB,EAAA,SAAAjkB,GAAA,SAAAikB,IAAA,IAAA/jB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS8oB,UAWhB1uB,EAAA2uB,yBAAoD,KAEpD3uB,EAAAgC,MAAqBhG,EAAApH,YAAYqN,OAQnC,OAtBmCZ,EAAA0iB,EAAAjkB,GAiBjCikB,EAAAvvB,UAAAoa,GAAA,SAAGoB,GAA2B,OAAQzd,KAAKyP,MAAQgO,IAASA,GAE5D+T,EAAAvvB,UAAA6c,MAAA,SAAMrB,GAA2B,OAA8B,IAAtBzd,KAAKyP,MAAQgO,IAEtD+T,EAAAvvB,UAAAyM,IAAA,SAAI+O,GAA2Bzd,KAAKyP,OAASgO,GAC/C+T,EAtBA,CAAmC5hB,GA8CnC,SAAgB+N,EAAoB/c,GAElC,GAAIA,EAAKwS,MAAQC,EAAS6c,WAAY,CACpC,IAAImM,EAAiCz7B,EAAM+U,KAE3C,OADA9K,OAAOwxB,EAAQvxB,QACPuxB,EAAQnxB,WAAW,IACzB,QACE,GAAe,UAAXmxB,EAAqB,OAAOtxB,EAAcuxB,OAC9C,MAEF,QACE,GAAe,WAAXD,EAAsB,OAAOtxB,EAAc+G,QAC/C,MAEF,SACE,GAAe,YAAXuqB,EAAuB,OAAOtxB,EAAcwxB,SAChD,MAEF,SACE,GAAe,YAAXF,EAAuB,OAAOtxB,EAAcoX,SAChD,MAEF,SACE,GAAe,UAAXka,EAAqB,OAAOtxB,EAAckT,OAC9C,MAEF,SACE,GAAe,UAAXoe,EAAqB,OAAOtxB,EAAcwU,OAC9C,MAEF,SACE,GAAe,QAAX8c,EAAmB,OAAOtxB,EAAcyU,KAC5C,MAEF,SACE,GAAe,YAAX6c,EAAuB,OAAOtxB,EAAcC,SAChD,MAEF,SACE,GAAe,UAAXqxB,EAAqB,OAAOtxB,EAAcqN,OAC9C,MAEF,SACE,GAAe,aAAXikB,EAAwB,OAAOtxB,EAAcwN,UACjD,GAAe,UAAX8jB,EAAqB,OAAOtxB,EAAc0U,aAI7C,GACL7e,EAAKwS,MAAQC,EAASkd,gBACK3vB,EAAMgyB,WAAWxf,MAAQC,EAAS6c,WAC7D,CACImM,EAA4Dz7B,EAAMgyB,WAAYjd,KAClF9K,OAAOwxB,EAAQvxB,QACf,IAAI0xB,EAAqC57B,EAAMoB,SAAS2T,KAGxD,GAFA9K,OAAO2xB,EAAQ1xB,QAEA,YAAXuxB,EACF,OAAQG,EAAQtxB,WAAW,IACzB,QACE,GAAe,UAAXsxB,EAAqB,OAAOzxB,EAAcE,gBAC9C,MAEF,SACE,OAAQuxB,GACN,IAAK,SAAU,OAAOzxB,EAAc0B,gBACpC,IAAK,UAAW,OAAO1B,EAAciC,mBAO/C,OAAOjC,EAAc0xB,OAvHV/8B,EAAA8xB,gBA2Bb,SAAYzmB,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,oBAfF,CAAYA,EAAArL,EAAAqL,gBAAArL,EAAAqL,cAAa,KAmBzBrL,EAAAie,sBA6EA,IAAAkU,EAAA,SAAAtkB,GAAA,SAAAskB,IAAA,IAAApkB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASqpB,YAQlB,OATmC5tB,EAAA+iB,EAAAtkB,GASnCskB,EATA,CAAmCjiB,GAAtBlQ,EAAAmyB,gBAYb,SAAY8K,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYj9B,EAAAi9B,cAAAj9B,EAAAi9B,YAAW,KAUvB,IAAA3K,EAAA,SAAAzkB,GAAA,SAAAykB,IAAA,IAAAvkB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASupB,UAMlB,OAPiC9tB,EAAAkjB,EAAAzkB,GAOjCykB,EAPA,CAAiCpiB,GAApBlQ,EAAAsyB,cAYb,IAAA6K,EAAA,SAAAtvB,GAAA,SAAAsvB,mDAAgD,OAAP/tB,EAAA+tB,EAAAtvB,GAAOsvB,EAAhD,CAAyCjtB,GAAnBlQ,EAAAm9B,aAGtB,IAYYvc,EAZZ8R,EAAA,SAAA7kB,GAAA,SAAA6kB,IAAA,IAAA3kB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS6c,aAQlB,OAT0CphB,EAAAsjB,EAAA7kB,GAS1C6kB,EATA,CAA0CyK,GAA7Bn9B,EAAA0yB,uBAYb,SAAY9R,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA5gB,EAAA4gB,cAAA5gB,EAAA4gB,YAAW,KAUvB,IAAAwc,EAAA,SAAAvvB,GAAA,SAAAuvB,IAAA,IAAArvB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS+M,UAIlB,OALgDtR,EAAAguB,EAAAvvB,GAKhDuvB,EALA,CAAgDD,GAA1Bn9B,EAAAo9B,oBAQtB,IAAAtK,EAAA,SAAAjlB,GAAA,SAAAilB,IAAA,IAAA/kB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYyc,QAI5B,OAL4CjuB,EAAA0jB,EAAAjlB,GAK5CilB,EALA,CAA4CsK,GAA/Bp9B,EAAA8yB,yBAQb,SAAYwK,GACVA,IAAA,mBACAA,IAAA,WACAA,IAAA,qBAHF,CAAYt9B,EAAAs9B,gBAAAt9B,EAAAs9B,cAAa,KAOzB,IAAAlK,EAAA,SAAAvlB,GAAA,SAAAulB,IAAA,IAAArlB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS8c,YAQlB,OATyCrhB,EAAAgkB,EAAAvlB,GASzCulB,EATA,CAAyC+J,GAA5Bn9B,EAAAozB,sBAYb,IAAAK,EAAA,SAAA5lB,GAAA,SAAA4lB,IAAA,IAAA1lB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS4pB,SAQlB,OATsCnuB,EAAAqkB,EAAA5lB,GAStC4lB,EATA,CAAsC0J,GAAzBn9B,EAAAyzB,mBAYb,IAAAG,EAAA,SAAA/lB,GAAA,SAAA+lB,IAAA,IAAA7lB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS+c,OA4BlB,OA7BoCthB,EAAAwkB,EAAA/lB,GAWlCxM,OAAAC,eAAIsyB,EAAArxB,UAAA,qBAAkB,KAAtB,WACE,IACIsoB,EADAf,EAAgBxpB,KAAKwpB,cAEzB,OAAIA,IAAkBe,EAAmBf,EAAc1e,QAC9C6kB,EAAAlX,MAAMC,KAAK8Q,EAAc,GAAG7Z,MAAO6Z,EAAce,EAAmB,GAAG5a,OAEzE3P,KAAK4yB,WAAWjjB,uCAIzB5O,OAAAC,eAAIsyB,EAAArxB,UAAA,iBAAc,KAAlB,WACE,IAAI0vB,EAAO3xB,KAAKkgB,UACZgd,EAAevL,EAAK7mB,OACxB,OAAIoyB,EACKvN,EAAAlX,MAAMC,KAAKiZ,EAAK,GAAGhiB,MAAOgiB,EAAKuL,EAAe,GAAGvtB,OAEnD3P,KAAK4yB,WAAWjjB,uCAE3B2jB,EA7BA,CAAoCuJ,GAAvBn9B,EAAA4zB,iBAgCb,IAAAE,EAAA,SAAAjmB,GAAA,SAAAimB,IAAA,IAAA/lB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASuI,QAIlB,OALqC9M,EAAA0kB,EAAAjmB,GAKrCimB,EALA,CAAqCqJ,GAAxBn9B,EAAA8zB,kBAQb,IAAAG,EAAA,SAAApmB,GAAA,SAAAomB,IAAA,IAAAlmB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS8pB,QAIlB,OALqCruB,EAAA6kB,EAAApmB,GAKrComB,EALA,CAAqCkJ,GAAxBn9B,EAAAi0B,kBAQb,IAAAE,EAAA,SAAAtmB,GAAA,SAAAsmB,IAAA,IAAApmB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASyM,YAChBrS,EAAAkI,KAAO,cACPlI,EAAA4kB,OAAS5oB,EAAAzG,cAAcsC,cACzB,OAJ2CwJ,EAAA+kB,EAAAtmB,GAI3CsmB,EAJA,CAA2CzB,GAA9B1yB,EAAAm0B,wBAOb,IAAAE,EAAA,SAAAxmB,GAAA,SAAAwmB,IAAA,IAAAtmB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASgd,gBAMlB,OAP6CvhB,EAAAilB,EAAAxmB,GAO7CwmB,EAPA,CAA6C8I,GAAhCn9B,EAAAq0B,0BAUb,IAAAK,EAAA,SAAA7mB,GAAA,SAAA6mB,IAAA,IAAA3mB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAY8c,QAI5B,OAL4CtuB,EAAAslB,EAAA7mB,GAK5C6mB,EALA,CAA4C0I,GAA/Bp9B,EAAA00B,yBAQb,IAAAE,EAAA,SAAA/mB,GAAA,SAAA+mB,IAAA,IAAA7mB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASqI,WAIlB,OALwC5M,EAAAwlB,EAAA/mB,GAKxC+mB,EALA,CAAwCuI,GAA3Bn9B,EAAA40B,qBAQb,IAAAG,EAAA,SAAAlnB,GAAA,SAAAknB,IAAA,IAAAhnB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASgqB,aAMlB,OAP0CvuB,EAAA2lB,EAAAlnB,GAO1CknB,EAPA,CAA0CoI,GAA7Bn9B,EAAA+0B,uBAUb,IAAAE,EAAA,SAAApnB,GAAA,SAAAonB,IAAA,IAAAlnB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYgd,UAI5B,OAL8CxuB,EAAA6lB,EAAApnB,GAK9ConB,EALA,CAA8CmI,GAAjCp9B,EAAAi1B,2BAQb,IAAAE,EAAA,SAAAtnB,GAAA,SAAAsnB,IAAA,IAAApnB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASkqB,MAClB,OAFmCzuB,EAAA+lB,EAAAtnB,GAEnCsnB,EAFA,CAAmCvB,GAAtB5zB,EAAAm1B,gBAKb,IAAAE,EAAA,SAAAxnB,GAAA,SAAAwnB,IAAA,IAAAtnB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASyc,KAChBriB,EAAAkI,KAAO,OACPlI,EAAA4kB,OAAS5oB,EAAAzG,cAAciC,QACzB,OAJoC6J,EAAAimB,EAAAxnB,GAIpCwnB,EAJA,CAAoC3C,GAAvB1yB,EAAAq1B,iBAOb,IAAAG,EAAA,SAAA3nB,GAAA,SAAA2nB,IAAA,IAAAznB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYkd,SAM5B,OAP6C1uB,EAAAomB,EAAA3nB,GAO7C2nB,EAPA,CAA6C4H,GAAhCp9B,EAAAw1B,0BAUb,IAAAE,EAAA,SAAA7nB,GAAA,SAAA6nB,IAAA,IAAA3nB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASid,gBAIlB,OAL6CxhB,EAAAsmB,EAAA7nB,GAK7C6nB,EALA,CAA6CyH,GAAhCn9B,EAAA01B,0BAQb,IAAAE,EAAA,SAAA/nB,GAAA,SAAA+nB,IAAA,IAAA7nB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASkd,iBAMlB,OAP8CzhB,EAAAwmB,EAAA/nB,GAO9C+nB,EAPA,CAA8CuH,GAAjCn9B,EAAA41B,2BAUb,IAAAG,EAAA,SAAAloB,GAAA,SAAAkoB,IAAA,IAAAhoB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYmd,SAM5B,OAP6C3uB,EAAA2mB,EAAAloB,GAO7CkoB,EAPA,CAA6CqH,GAAhCp9B,EAAA+1B,0BAUb,IAAAM,EAAA,SAAAxoB,GAAA,SAAAwoB,IAAA,IAAAtoB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASqqB,UAQlB,OATuC5uB,EAAAinB,EAAAxoB,GASvCwoB,EATA,CAAuC8G,GAA1Bn9B,EAAAq2B,oBAYb,IAAAE,EAAA,SAAA1oB,GAAA,SAAA0oB,IAAA,IAAAxoB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYC,SAI5B,OAL6CzR,EAAAmnB,EAAA1oB,GAK7C0oB,EALA,CAA6C6G,GAAhCp9B,EAAAu2B,0BAQb,IAAAE,EAAA,SAAA5oB,GAAA,SAAA4oB,IAAA,IAAA1oB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASmd,MAChB/iB,EAAAkI,KAAO,QACPlI,EAAA4kB,OAAS5oB,EAAAzG,cAAcqC,SACzB,OAJqCyJ,EAAAqnB,EAAA5oB,GAIrC4oB,EAJA,CAAqC/D,GAAxB1yB,EAAAy2B,kBAOb,IAAAE,EAAA,SAAA9oB,GAAA,SAAA8oB,IAAA,IAAA5oB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASsqB,KAChBlwB,EAAAkI,KAAO,OACPlI,EAAA4kB,OAAS5oB,EAAAzG,cAAcoC,QACzB,OAJoC0J,EAAAunB,EAAA9oB,GAIpC8oB,EAJA,CAAoCjE,GAAvB1yB,EAAA22B,iBAOb,IAAAE,EAAA,SAAAhpB,GAAA,SAAAgpB,IAAA,IAAA9oB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS0c,KAChBtiB,EAAAkI,KAAO,OACPlI,EAAA4kB,OAAS5oB,EAAAzG,cAAckC,QACzB,OAJoC4J,EAAAynB,EAAAhpB,GAIpCgpB,EAJA,CAAoCnE,GAAvB1yB,EAAA62B,iBAOb,IAAArC,EAAA,SAAA3mB,GAAA,SAAA2mB,IAAA,IAAAzmB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS2c,MAChBviB,EAAAkI,KAAO,QACPlI,EAAA4kB,OAAS5oB,EAAAzG,cAAcmC,SACzB,OAJqC2J,EAAAolB,EAAA3mB,GAIrC2mB,EAJA,CAAqC9B,GAAxB1yB,EAAAw0B,kBAOb,IAAA0J,EAAA,SAAArwB,GAAA,SAAAqwB,mDAMA,OAN8C9uB,EAAA8uB,EAAArwB,GAM9CqwB,EANA,CAA8Cf,GAAxBn9B,EAAAk+B,kBAStB,IAAAlH,EAAA,SAAAnpB,GAAA,SAAAmpB,IAAA,IAAAjpB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASwqB,eAClB,OAF4C/uB,EAAA4nB,EAAAnpB,GAE5CmpB,EAFA,CAA4CkH,GAA/Bl+B,EAAAg3B,yBAKb,IAAAE,EAAA,SAAArpB,GAAA,SAAAqpB,IAAA,IAAAnpB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASyqB,cAClB,OAF2ChvB,EAAA8nB,EAAArpB,GAE3CqpB,EAFA,CAA2CgH,GAA9Bl+B,EAAAk3B,wBAOb,IAGYtoB,EAHZyvB,EAAA,SAAAxwB,GAAA,SAAAwwB,mDAA+C,OAAPjvB,EAAAivB,EAAAxwB,GAAOwwB,EAA/C,CAAwCnuB,GAAlBlQ,EAAAq+B,YAGtB,SAAYzvB,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAA5O,EAAA4O,aAAA5O,EAAA4O,WAAU,KAUtB,IAAAD,EAAA,SAAAd,GAwBE,SAAAc,EAAYkV,EAAwB5N,EAAcvC,GAAlD,IAAA3F,EACEF,EAAA/M,KAAAR,OAAOA,KAxBTyN,EAAA2F,KAAOC,EAAS2qB,OAChBvwB,EAAAmD,OAAS,KAeTnD,EAAAwwB,UAA8B,KAE9BxwB,EAAA0a,gBAAuB,EAEvB1a,EAAAywB,YAAkC,KAKhCzwB,EAAK0wB,WAAa/qB,EAClB3F,EAAK8V,eAAiBA,EACtB,IAAIhC,EAAe6W,GAAmB3qB,EAAK8V,gBAC3C9V,EAAK8T,aAAeA,EACpB,IAAI6c,EAAM7c,EAAa8c,YAAY50B,EAAAnH,uBACnCmL,EAAK6wB,WAAaF,GAAO,EAAI7c,EAAaG,UAAU0c,EAAM,GAAK7c,EAC/D9T,EAAKwF,WAAa,IAAIhM,MACtBwG,EAAKkC,MAAQ,IAAIggB,EAAAlX,MAAMhL,EAAM,EAAGkI,EAAK7K,QACrC2C,EAAKkI,KAAOA,IAOhB,OAzC4B7G,EAAAT,EAAAd,GAsC1BxM,OAAAC,eAAIqN,EAAApM,UAAA,UAAO,KAAX,WAAsB,OAAOjC,KAAKm+B,YAAc7vB,EAAWiwB,uCAE3Dx9B,OAAAC,eAAIqN,EAAApM,UAAA,YAAS,KAAb,WAAwB,OAAOjC,KAAKm+B,YAAc7vB,EAAWC,yCAC/DF,EAzCA,CAA4BuB,GAAflQ,EAAA2O,SA4Cb,IAAAmwB,GAAA,SAAAjxB,GAAA,SAAAixB,IAAA,IAAA/wB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YAIEyN,EAAA6P,WAAqC,KAErC7P,EAAAgC,MAAqBhG,EAAApH,YAAYqN,OAQnC,OAdmDZ,EAAA0vB,EAAAjxB,GASjDixB,EAAAv8B,UAAAoa,GAAA,SAAGoB,GAA2B,OAAQzd,KAAKyP,MAAQgO,IAASA,GAE5D+gB,EAAAv8B,UAAA6c,MAAA,SAAMrB,GAA2B,OAA8B,IAAtBzd,KAAKyP,MAAQgO,IAEtD+gB,EAAAv8B,UAAAyM,IAAA,SAAI+O,GAA2Bzd,KAAKyP,OAASgO,GAC/C+gB,EAdA,CAAmDT,GAA7Br+B,EAAA8+B,wBAiBtB,IAAArE,GAAA,SAAA5sB,GAAA,SAAA4sB,IAAA,IAAA1sB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS8L,4BAMlB,OAP+CrQ,EAAAqrB,EAAA5sB,GAO/C4sB,EAPA,CAA+CqE,IAAlC9+B,EAAAy6B,6BAUb,IAAAsE,GAAA,SAAAlxB,GAAA,SAAAkxB,mDAMA,OAN+D3vB,EAAA2vB,EAAAlxB,GAM/DkxB,EANA,CAA+DD,IAAzC9+B,EAAA++B,oCAStB,IAAA3H,GAAA,SAAAvpB,GAAA,SAAAupB,IAAA,IAAArpB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASqrB,QAIlB,OALoC5vB,EAAAgoB,EAAAvpB,GAKpCupB,EALA,CAAoCiH,GAAvBr+B,EAAAo3B,kBAQb,IAAAG,GAAA,SAAA1pB,GAAA,SAAA0pB,IAAA,IAAAxpB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASsrB,QAIlB,OALoC7vB,EAAAmoB,EAAA1pB,GAKpC0pB,EALA,CAAoC8G,GAAvBr+B,EAAAu3B,kBAQb,IAAAE,GAAA,SAAA5pB,GAAA,SAAA4pB,IAAA,IAAA1pB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASQ,mBAelB,OAhBsC/E,EAAAqoB,EAAA5pB,GAYpCxM,OAAAC,eAAIm2B,EAAAl1B,UAAA,YAAS,KAAb,WACE,IAAIkiB,EAAiBnkB,KAAKmkB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAerZ,OAAS,mCAE7DqsB,EAhBA,CAAsCqH,IAAzB9+B,EAAAy3B,oBAmBb,IAAAE,GAAA,SAAA9pB,GAAA,SAAA8pB,IAAA,IAAA5pB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASurB,WAIlB,OALuC9vB,EAAAuoB,EAAA9pB,GAKvC8pB,EALA,CAAuC0G,GAA1Br+B,EAAA23B,qBAQb,IAAAE,GAAA,SAAAhqB,GAAA,SAAAgqB,IAAA,IAAA9pB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASwrB,KAMlB,OAPiC/vB,EAAAyoB,EAAAhqB,GAOjCgqB,EAPA,CAAiCwG,GAApBr+B,EAAA63B,eAUb,IAAAE,GAAA,SAAAlqB,GAAA,SAAAkqB,IAAA,IAAAhqB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASpQ,QAClB,OAFoC6L,EAAA2oB,EAAAlqB,GAEpCkqB,EAFA,CAAoCsG,GAAvBr+B,EAAA+3B,kBAKb,IAAAE,GAAA,SAAApqB,GAAA,SAAAoqB,IAAA,IAAAlqB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASU,kBAIlB,OALqCjF,EAAA6oB,EAAApqB,GAKrCoqB,EALA,CAAqC6G,IAAxB9+B,EAAAi4B,mBAQb,IAAAE,GAAA,SAAAtqB,GAAA,SAAAsqB,IAAA,IAAApqB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASyrB,uBAKlB,OAN0ChwB,EAAA+oB,EAAAtqB,GAM1CsqB,EANA,CAA0C4G,IAA7B/+B,EAAAm4B,wBASb,IAAAY,GAAA,SAAAlrB,GAAA,SAAAkrB,IAAA,IAAAhrB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS0rB,eAMlB,OAP2CjwB,EAAA2pB,EAAAlrB,GAO3CkrB,EAPA,CAA2C7oB,GAA9BlQ,EAAA+4B,yBAUb,IAAAE,GAAA,SAAAprB,GAAA,SAAAorB,IAAA,IAAAlrB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS2rB,eAMlB,OAPkClwB,EAAA6pB,EAAAprB,GAOlCorB,EAPA,CAAkC/oB,GAArBlQ,EAAAi5B,gBAUb,IAAAX,GAAA,SAAAzqB,GAAA,SAAAyqB,IAAA,IAAAvqB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASzB,SAYlB,OAbqC9C,EAAAkpB,EAAAzqB,GAarCyqB,EAbA,CAAqC+F,GAAxBr+B,EAAAs4B,mBAgBb,IAAAM,GAAA,SAAA/qB,GAAA,SAAA+qB,IAAA,IAAA7qB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASE,gBAIlB,OAL4CzE,EAAAwpB,EAAA/qB,GAK5C+qB,EALA,CAA4CyF,GAA/Br+B,EAAA44B,0BAQb,IAAAO,GAAA,SAAAtrB,GAAA,SAAAsrB,IAAA,IAAAprB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS4rB,aAIlB,OALyCnwB,EAAA+pB,EAAAtrB,GAKzCsrB,EALA,CAAyCkF,GAA5Br+B,EAAAm5B,uBAQb,IAAAc,GAAA,SAAApsB,GAAA,SAAAosB,IAAA,IAAAlsB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASsL,iBAGhBlR,EAAAkb,gBAAuB,IACzB,OALsC7Z,EAAA6qB,EAAApsB,GAKtCosB,EALA,CAAsC8E,IAAzB/+B,EAAAi6B,oBAQb,IAAAG,GAAA,SAAAvsB,GAAA,SAAAusB,IAAA,IAAArsB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAAS6rB,MAalB,OAdkCpwB,EAAAgrB,EAAAvsB,GAclCusB,EAdA,CAAkCiE,GAArBr+B,EAAAo6B,gBAiBb,SAAkBqF,GAEhBA,IAAA,eAEAA,IAAA,6CAEAA,IAAA,+BANF,CAAkBz/B,EAAAy/B,YAAAz/B,EAAAy/B,UAAS,KAU3B,IAAApF,GAAA,SAAAxsB,GAAA,SAAAwsB,IAAA,IAAAtsB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASY,sBA6BlB,OA9ByCnF,EAAAirB,EAAAxsB,GAYvCxM,OAAAC,eAAI+4B,EAAA93B,UAAA,YAAS,KAAb,WACE,IAAIkiB,EAAiBnkB,KAAKmkB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAerZ,OAAS,mCAI3DivB,EAAA93B,UAAAm9B,MAAA,WACE,OAAOxvB,EAAKQ,0BACVpQ,KAAKY,KACLZ,KAAKmkB,eACLnkB,KAAK2Q,UACL3Q,KAAKqlB,KACLrlB,KAAKsd,WACLtd,KAAKyP,MACLzP,KAAKslB,UACLtlB,KAAK2P,QAGXoqB,EA9BA,CAAyCyE,IAA5B9+B,EAAAq6B,uBAiCb,IAAAd,GAAA,SAAA1rB,GAAA,SAAA0rB,IAAA,IAAAxrB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASgsB,KAQlB,OATiCvwB,EAAAmqB,EAAA1rB,GASjC0rB,EATA,CAAiC8E,GAApBr+B,EAAAu5B,eAYb,IAAAM,GAAA,SAAAhsB,GAAA,SAAAgsB,IAAA,IAAA9rB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASisB,oBAIlB,OALuCxwB,EAAAyqB,EAAAhsB,GAKvCgsB,EALA,CAAuCiF,IAA1B9+B,EAAA65B,qBAQb,IAAAH,GAAA,SAAA7rB,GAAA,SAAA6rB,IAAA,IAAA3rB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASI,SAYlB,OAbqC3E,EAAAsqB,EAAA7rB,GAarC6rB,EAbA,CAAqC2E,GAAxBr+B,EAAA05B,mBAgBb,IAAAK,GAAA,SAAAlsB,GAAA,SAAAksB,IAAA,IAAAhsB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASc,uBAClB,OAF0CrF,EAAA2qB,EAAAlsB,GAE1CksB,EAFA,CAA0CtC,IAA7Bz3B,EAAA+5B,wBAKb,IAAAY,GAAA,SAAA9sB,GAAA,SAAA8sB,IAAA,IAAA5sB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASwL,oBAClB,OAFuC/P,EAAAurB,EAAA9sB,GAEvC8sB,EAFA,CAAuCN,IAA1Br6B,EAAA26B,qBAKb,IAAAC,GAAA,SAAA/sB,GAAA,SAAA+sB,IAAA,IAAA7sB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASgB,uBAIlB,OAL0CvF,EAAAwrB,EAAA/sB,GAK1C+sB,EALA,CAA0CkE,IAA7B9+B,EAAA46B,wBAQb,IAAAE,GAAA,SAAAjtB,GAAA,SAAAitB,IAAA,IAAA/sB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASksB,SAIlB,OALqCzwB,EAAA0rB,EAAAjtB,GAKrCitB,EALA,CAAqCuD,GAAxBr+B,EAAA86B,mBAQb,IAAAK,GAAA,SAAAttB,GAAA,SAAAstB,IAAA,IAAAptB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASmsB,aAMlB,OAPgC1wB,EAAA+rB,EAAAttB,GAOhCstB,EAPA,CAAgCjrB,GAAnBlQ,EAAAm7B,cAUb,IAAAF,GAAA,SAAAptB,GAAA,SAAAotB,IAAA,IAAAltB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASosB,SAMlB,OAPqC3wB,EAAA6rB,EAAAptB,GAOrCotB,EAPA,CAAqCoD,GAAxBr+B,EAAAi7B,mBAUb,IAAAI,GAAA,SAAAxtB,GAAA,SAAAwtB,IAAA,IAAAttB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASqsB,QAIlB,OALoC5wB,EAAAisB,EAAAxtB,GAKpCwtB,EALA,CAAoCgD,GAAvBr+B,EAAAq7B,kBAQb,IAAAK,GAAA,SAAA7tB,GAAA,SAAA6tB,IAAA,IAAA3tB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASssB,MAUlB,OAXkC7wB,EAAAssB,EAAA7tB,GAWlC6tB,EAXA,CAAkC2C,GAArBr+B,EAAA07B,gBAcb,IAAAC,GAAA,SAAA9tB,GAAA,SAAA8tB,IAAA,IAAA5tB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASkB,kBAMlB,OAPqCzF,EAAAusB,EAAA9tB,GAOrC8tB,EAPA,CAAqCmD,IAAxB9+B,EAAA27B,mBAUb,IAAAG,GAAA,SAAAjuB,GAAA,SAAAiuB,IAAA,IAAA/tB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASusB,sBAClB,OAFyC9wB,EAAA0sB,EAAAjuB,GAEzCiuB,EAFA,CAAyCiD,IAA5B/+B,EAAA87B,uBAKb,IAAAD,GAAA,SAAAhuB,GAAA,SAAAguB,IAAA,IAAA9tB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASM,WAMlB,OAPuC7E,EAAAysB,EAAAhuB,GAOvCguB,EAPA,CAAuCwC,GAA1Br+B,EAAA67B,qBAUb,IAAAG,GAAA,SAAAnuB,GAAA,SAAAmuB,IAAA,IAAAjuB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASwsB,OAIlB,OALmC/wB,EAAA4sB,EAAAnuB,GAKnCmuB,EALA,CAAmCqC,GAAtBr+B,EAAAg8B,iBAQb,IAAAE,GAAA,SAAAruB,GAAA,SAAAquB,IAAA,IAAAnuB,EAAA,OAAAF,KAAA8V,MAAArjB,KAAAkgB,YAAAlgB,YACEyN,EAAA2F,KAAOC,EAASysB,QAMlB,OAPoChxB,EAAA8sB,EAAAruB,GAOpCquB,EAPA,CAAoCmC,GAqBpC,SAAgB3F,GAAmBzW,GAEjC,OADIA,EAAKF,SAAS,SAAQE,EAAOA,EAAKD,UAAU,EAAGC,EAAK7W,OAAS,IAC1D6W,EAvBIjiB,EAAAk8B,kBAUbl8B,EAAAqgC,cAAA,SAA8B3sB,EAAqBkK,GACjD,GAAIA,EACF,IAAK,IAAIjd,EAAI,EAAGyS,EAAIwK,EAAWxS,OAAQzK,EAAIyS,IAAKzS,EAAG,CACjD,IAAImd,EAAYF,EAAWjd,GAC3B,GAAImd,EAAU7S,eAAiByI,EAAM,OAAOoK,EAGhD,OAAO,MAIT9d,EAAA04B,sBAMA14B,EAAAsgC,cAAA,SAA8BhkB,GAC5B,GAAIA,EAAK5I,MAAQC,EAAS0oB,UAAW,CACnC,IAAIn7B,EAAuBob,EAAMpb,KACjC,QAASA,EAAKgU,MAAQhU,EAAKoP,WAAW2F,KAAK7K,QAE7C,OAAO,oRC7/DT,IAaYm1B,EAqBAC,EAlCZz2B,EAAAtJ,EAAA,IAaA,SAAY8/B,GACVA,IAAA,KAAOE,qBAAmB,OAC1BF,IAAA,IAAOG,sBAAoB,MAC3BH,IAAA,IAAOI,sBAAoB,MAC3BJ,IAAA,IAAOK,wBAAsB,MAC7BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,KAAOO,uBAAqB,OAC5BP,IAAA,YAAcQ,4BAA0B,cACxCR,IAAA,KAAOS,qBAAmB,OAR5B,CAAYT,EAAAvgC,EAAAugC,aAAAvgC,EAAAugC,WAAU,KAWtB,SAAYU,GACVA,IAAA,QAAUC,2BAAyB,UACnCD,IAAA,eAAiBE,kCAAgC,iBACjDF,IAAA,mBAAqBG,sCAAoC,qBACzDH,IAAA,QAAUI,2BAAyB,UACnCJ,IAAA,WAAaK,8BAA4B,aACzCL,IAAA,QAAUM,2BAAyB,UACnCN,IAAA,kBAAoBO,qCAAmC,oBAPzD,CAAYxhC,EAAAihC,eAAAjhC,EAAAihC,aAAY,KAUxB,SAAYT,GACVA,IAAA,QAAUiB,sBAAoB,UAC9BjB,IAAA,MAAQkB,oBAAkB,QAC1BlB,IAAA,GAAKmB,iBAAe,KACpBnB,IAAA,KAAOoB,mBAAiB,OACxBpB,IAAA,MAAQqB,oBAAkB,QAC1BrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,KAAOuB,mBAAiB,OACxBvB,IAAA,aAAewB,2BAAyB,eACxCxB,IAAA,SAAWyB,uBAAqB,WAChCzB,IAAA,SAAW0B,uBAAqB,WAChC1B,IAAA,UAAY2B,wBAAsB,YAClC3B,IAAA,UAAY4B,wBAAsB,YAClC5B,IAAA,KAAO6B,mBAAiB,OACxB7B,IAAA,MAAQ8B,oBAAkB,QAC1B9B,IAAA,MAAQ+B,oBAAkB,QAC1B/B,IAAA,MAAQgC,oBAAkB,QAC1BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,OAASkC,qBAAmB,SAC5BlC,IAAA,KAAOmC,mBAAiB,OACxBnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,KAAOqC,mBAAiB,OACxBrC,IAAA,IAAMsC,kBAAgB,MACtBtC,IAAA,YAAcuC,0BAAwB,cACtCvC,IAAA,cAAgBwC,4BAA0B,gBAC1CxC,IAAA,UAAYyC,wBAAsB,YAClCzC,IAAA,WAAa0C,yBAAuB,aACpC1C,IAAA,aAAe2C,2BAAyB,eACxC3C,IAAA,YAAc4C,0BAAwB,cACtC5C,IAAA,YAAc6C,0BAAwB,cACtC7C,IAAA,YAAc8C,0BAAwB,cACtC9C,IAAA,cAAgB+C,4BAA0B,gBAC1C/C,IAAA,UAAYgD,wBAAsB,YAClChD,IAAA,WAAaiD,yBAAuB,aACpCjD,IAAA,SAAWkD,uBAAqB,WAChClD,IAAA,WAAamD,yBAAuB,aACpCnD,IAAA,WAAaoD,yBAAuB,aApCtC,CAAYpD,EAAAxgC,EAAAwgC,eAAAxgC,EAAAwgC,aAAY,KAuCxB,SAAYqD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAa1CpD,IAAA,cAAgBqD,0BAAwB,gBACxCrD,IAAA,cAAgBsD,0BAAwB,gBACxCtD,IAAA,cAAgBuD,0BAAwB,gBACxCvD,IAAA,cAAgBwD,0BAAwB,gBACxCxD,IAAA,cAAgByD,0BAAwB,gBACxCzD,IAAA,cAAgB0D,0BAAwB,gBACxC1D,IAAA,UAAY2D,sBAAoB,YAChC3D,IAAA,YAAc4D,wBAAsB,cACpC5D,IAAA,gBAAkB6D,4BAA0B,kBAC5C7D,IAAA,gBAAkB8D,4BAA0B,kBAC5C9D,IAAA,YAAc+D,wBAAsB,cACpC/D,IAAA,gBAAkBgE,4BAA0B,kBAC5ChE,IAAA,gBAAkBiE,4BAA0B,kBAC5CjE,IAAA,YAAckE,wBAAsB,cACpClE,IAAA,gBAAkBmE,4BAA0B,kBAC5CnE,IAAA,gBAAkBoE,4BAA0B,kBAC5CpE,IAAA,YAAcqE,wBAAsB,cACpCrE,IAAA,gBAAkBsE,4BAA0B,kBAC5CtE,IAAA,gBAAkBuE,4BAA0B,kBAC5CvE,IAAA,YAAcwE,wBAAsB,cACpCxE,IAAA,YAAcyE,wBAAsB,cACpCzE,IAAA,aAAe0E,yBAAuB,eACtC1E,IAAA,YAAc2E,wBAAsB,cACpC3E,IAAA,YAAc4E,wBAAsB,cACpC5E,IAAA,aAAe6E,yBAAuB,eACtC7E,IAAA,4BAA8B8E,wCAAsC,8BACpE9E,IAAA,4BAA8B+E,wCAAsC,8BACpE/E,IAAA,4BAA8BgF,wCAAsC,8BACpEhF,IAAA,4BAA8BiF,wCAAsC,8BACpEjF,IAAA,2BAA6BkF,uCAAqC,6BAClElF,IAAA,2BAA6BmF,uCAAqC,6BAClEnF,IAAA,2BAA6BoF,uCAAqC,6BAClEpF,IAAA,2BAA6BqF,uCAAqC,6BAnGpE,CAAYlpC,EAAA6jC,UAAA7jC,EAAA6jC,QAAO,KAsGnB,SAAYsF,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QAG5B5E,IAAA,WAAa6E,uBAAqB,aAClC7E,IAAA,WAAa8E,uBAAqB,aAClC9E,IAAA,YAAc+E,wBAAsB,cACpC/E,IAAA,YAAcgF,wBAAsB,cACpChF,IAAA,YAAciF,wBAAsB,cACpCjF,IAAA,YAAckF,wBAAsB,cACpClF,IAAA,YAAcmF,wBAAsB,cACpCnF,IAAA,YAAcoF,wBAAsB,cACpCpF,IAAA,YAAcqF,wBAAsB,cACpCrF,IAAA,YAAcsF,wBAAsB,cACpCtF,IAAA,WAAauF,uBAAqB,aAClCvF,IAAA,WAAawF,uBAAqB,aAClCxF,IAAA,YAAcyF,wBAAsB,cACpCzF,IAAA,YAAc0F,wBAAsB,cACpC1F,IAAA,YAAc2F,wBAAsB,cACpC3F,IAAA,YAAc4F,wBAAsB,cACpC5F,IAAA,YAAc6F,wBAAsB,cACpC7F,IAAA,YAAc8F,wBAAsB,cACpC9F,IAAA,YAAc+F,wBAAsB,cACpC/F,IAAA,YAAcgG,wBAAsB,cACpChG,IAAA,WAAaiG,uBAAqB,aAClCjG,IAAA,WAAakG,uBAAqB,aAClClG,IAAA,YAAcmG,wBAAsB,cACpCnG,IAAA,YAAcoG,wBAAsB,cACpCpG,IAAA,YAAcqG,wBAAsB,cACpCrG,IAAA,YAAcsG,wBAAsB,cACpCtG,IAAA,YAAcuG,wBAAsB,cACpCvG,IAAA,YAAcwG,wBAAsB,cACpCxG,IAAA,YAAcyG,wBAAsB,cACpCzG,IAAA,YAAc0G,wBAAsB,cACpC1G,IAAA,WAAa2G,uBAAqB,aAClC3G,IAAA,WAAa4G,uBAAqB,aAClC5G,IAAA,WAAa6G,uBAAqB,aAClC7G,IAAA,WAAa8G,uBAAqB,aAClC9G,IAAA,WAAa+G,uBAAqB,aAClC/G,IAAA,WAAagH,uBAAqB,aAClChH,IAAA,WAAaiH,uBAAqB,aAClCjH,IAAA,WAAakH,uBAAqB,aAClClH,IAAA,WAAamH,uBAAqB,aAClCnH,IAAA,WAAaoH,uBAAqB,aAClCpH,IAAA,WAAaqH,uBAAqB,aAClCrH,IAAA,WAAasH,uBAAqB,aAClCtH,IAAA,UAAYuH,sBAAoB,YAChCvH,IAAA,SAAWwH,qBAAmB,WAC9BxH,IAAA,UAAYyH,sBAAoB,YAChCzH,IAAA,YAAc0H,wBAAsB,cACpC1H,IAAA,gBAAkB2H,4BAA0B,kBAC5C3H,IAAA,gBAAkB4H,4BAA0B,kBAC5C5H,IAAA,YAAc6H,wBAAsB,cACpC7H,IAAA,gBAAkB8H,4BAA0B,kBAC5C9H,IAAA,gBAAkB+H,4BAA0B,kBAC5C/H,IAAA,YAAcgI,wBAAsB,cACpChI,IAAA,YAAciI,wBAAsB,cACpCjI,IAAA,gBAAkBkI,4BAA0B,kBAC5ClI,IAAA,gBAAkBmI,4BAA0B,kBAC5CnI,IAAA,YAAcoI,wBAAsB,cACpCpI,IAAA,gBAAkBqI,4BAA0B,kBAC5CrI,IAAA,gBAAkBsI,4BAA0B,kBAC5CtI,IAAA,YAAcuI,wBAAsB,cACpCvI,IAAA,YAAcwI,wBAAsB,cACpCxI,IAAA,YAAcyI,wBAAsB,cACpCzI,IAAA,YAAc0I,wBAAsB,cACpC1I,IAAA,YAAc2I,wBAAsB,cACpC3I,IAAA,YAAc4I,wBAAsB,cACpC5I,IAAA,YAAc6I,wBAAsB,cACpC7I,IAAA,YAAc8I,wBAAsB,cACpC9I,IAAA,YAAc+I,wBAAsB,cACpC/I,IAAA,YAAcgJ,wBAAsB,cACpChJ,IAAA,YAAciJ,wBAAsB,cACpCjJ,IAAA,YAAckJ,wBAAsB,cACpClJ,IAAA,YAAcmJ,wBAAsB,cACpCnJ,IAAA,YAAcoJ,wBAAsB,cACpCpJ,IAAA,YAAcqJ,wBAAsB,cACpCrJ,IAAA,YAAcsJ,wBAAsB,cACpCtJ,IAAA,YAAcuJ,wBAAsB,cACpCvJ,IAAA,YAAcwJ,wBAAsB,cA1JtC,CAAY3yC,EAAAmpC,WAAAnpC,EAAAmpC,SAAQ,KA6JpB,SAAYyJ,GACVA,IAAA,WAAaC,uBAAqB,aAClCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAY9yC,EAAA4yC,SAAA5yC,EAAA4yC,OAAM,KAKlB,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYrzC,EAAA+yC,cAAA/yC,EAAA+yC,YAAW,KASvB,SAAYO,GACVA,IAAA,qBAAuBC,iCAA+B,uBACtDD,IAAA,qBAAuBE,iCAA+B,uBACtDF,IAAA,qBAAuBG,iCAA+B,uBACtDH,IAAA,qBAAuBI,iCAA+B,uBACtDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBACpDN,IAAA,oBAAsBO,gCAA8B,sBACpDP,IAAA,oBAAsBQ,gCAA8B,sBARtD,CAAY9zC,EAAAszC,gBAAAtzC,EAAAszC,cAAa,KAWzB,SAAYS,GACVA,IAAA,oBAAsBC,gCAA8B,sBACpDD,IAAA,oBAAsBE,gCAA8B,sBACpDF,IAAA,oBAAsBG,gCAA8B,sBACpDH,IAAA,oBAAsBI,gCAA8B,sBACpDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBANtD,CAAYr0C,EAAA+zC,gBAAA/zC,EAAA+zC,cAAa,KASzB,SAAYO,GACVA,IAAA,YAAcC,wBAAsB,cACpCD,IAAA,aAAeE,yBAAuB,eACtCF,IAAA,aAAeG,yBAAuB,eACtCH,IAAA,YAAcI,wBAAsB,cACpCJ,IAAA,aAAeK,yBAAuB,eACtCL,IAAA,aAAeM,yBAAuB,eACtCN,IAAA,YAAcO,wBAAsB,cACpCP,IAAA,aAAeQ,yBAAuB,eACtCR,IAAA,aAAeS,yBAAuB,eACtCT,IAAA,YAAcU,wBAAsB,cACpCV,IAAA,aAAeW,yBAAuB,eACtCX,IAAA,aAAeY,yBAAuB,eAZxC,CAAYl1C,EAAAs0C,cAAAt0C,EAAAs0C,YAAW,KAevB,IAAAa,EAAA,oBAAAA,KAWA,OANSA,EAAAlzC,OAAP,SAAcuN,EAAoBC,GAChC,IAAI2lC,EAAU,IAAID,EAGlB,OAFAC,EAAQ5lC,OAASA,EACjB4lC,EAAQ3lC,OAASA,EACV2lC,GAEXD,EAXA,GAAan1C,EAAAm1C,gBAab,IAAAE,EAAA,WAyBE,SAAAA,IAwbQ/0C,KAAAg1C,sBAA6B,EAoO7Bh1C,KAAAi1C,sBAA+B,EAyE/Bj1C,KAAAk1C,cAAmC,IAAI9tC,IA4IjD,OAp4BS2tC,EAAApzC,OAAP,WACE,IAAIhC,EAAS,IAAIo1C,EAGjB,OAFAp1C,EAAOwmB,IAAMgvB,wBACbx1C,EAAOy1C,IAAMC,OAAOC,SAASC,0BACtB51C,GAGFo1C,EAAAS,WAAP,SAAkBtmC,GAChB,IAAIumC,EAAOC,EAAaxmC,GACxB,IACE,IAAIvP,EAAS,IAAIo1C,EAGjB,OAFAp1C,EAAOwmB,IAAMwvB,oBAAoBF,EAAMvmC,EAAOpE,QAC9CnL,EAAOy1C,IAAMC,OAAOC,SAASC,0BACtB51C,UAEP01C,OAAO5sC,KAAKmtC,WAAkBH,MAQlCV,EAAA9yC,UAAA4zC,gBAAA,SACEj1C,EACAk1C,EACAC,GAEA,IAAIC,EAAOh2C,KAAKi2C,kBAAkBr1C,GAC9B60C,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyBn2C,KAAKmmB,IAAK6vB,EAAMF,EAAQL,EAAMM,EAAaA,EAAWjrC,OAAS,WAE/FuqC,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAm0C,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoCr2C,KAAKmmB,IAAK2vB,EAAQL,EAAMM,EAAaA,EAAWjrC,OAAS,WAEpGuqC,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAq0C,mBAAA,SAAmB11C,GACjB,IAAIo1C,EAAOh2C,KAAKi2C,kBAAkBr1C,GAClC21C,4BAA4Bv2C,KAAKmmB,IAAK6vB,IAKxCjB,EAAA9yC,UAAAmB,IAAA,SAAI9B,GACF,IAAIk1C,EAAMx2C,KAAKo1C,IAEf,OADAqB,sBAAsBD,EAAKl1C,GACpBo1C,eAAe12C,KAAKmmB,IAAKqwB,IAGlCzB,EAAA9yC,UAAAoB,IAAA,SAAIszC,EAAeC,QAAA,IAAAA,MAAA,GACjB,IAAIJ,EAAMx2C,KAAKo1C,IAEf,OADAyB,sBAAsBL,EAAKG,EAAUC,GAC9BF,eAAe12C,KAAKmmB,IAAKqwB,IAGlCzB,EAAA9yC,UAAA4B,IAAA,SAAIvC,GACF,IAAIk1C,EAAMx2C,KAAKo1C,IAEf,OADA0B,wBAAwBN,EAAKl1C,GACtBo1C,eAAe12C,KAAKmmB,IAAKqwB,IAGlCzB,EAAA9yC,UAAA6B,IAAA,SAAIxC,GACF,IAAIk1C,EAAMx2C,KAAKo1C,IAEf,OADA2B,wBAAwBP,EAAKl1C,GACtBo1C,eAAe12C,KAAKmmB,IAAKqwB,IAGlCzB,EAAA9yC,UAAA8B,KAAA,SAAKizC,GACHnsC,OAAuB,IAAhBmsC,EAAMlsC,QAEb,IADA,IAAI0rC,EAAMx2C,KAAKo1C,IACN/0C,EAAI,EAAGA,EAAI,KAAMA,EAAG42C,MAAUT,EAAMn2C,EAAG22C,EAAM32C,IAEtD,OADA62C,uBAAuBV,EAAKA,GACrBE,eAAe12C,KAAKmmB,IAAKqwB,IAKlCzB,EAAA9yC,UAAAk1C,MAAA,SACEC,EACAjlB,GAEA,OAAOklB,eAAer3C,KAAKmmB,IAAKixB,EAAIjlB,IAGtC4iB,EAAA9yC,UAAAq1C,OAAA,SACEF,EACAnkB,EACAC,GAEA,OAAOqkB,gBAAgBv3C,KAAKmmB,IAAKixB,EAAInkB,EAAMC,IAG7C6hB,EAAA9yC,UAAAu1C,KAAA,SACEJ,EACAx2C,EACA62C,QADA,IAAA72C,MAAA,WACA,IAAA62C,MAAA,MAEA,IAAIzB,EAAOh2C,KAAKi2C,kBAAkBr1C,GAC9B60C,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAc33C,KAAKmmB,IAAKixB,EAAIpB,EAAMP,EAAMgC,EAA6BA,EAAU3sC,OAAS,WAE/FuqC,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAA21C,UAAA,SACE3yB,EACAjJ,GAEA,OAAO67B,kBAAkB73C,KAAKmmB,IAAKlB,EAAOjJ,IAG5C+4B,EAAA9yC,UAAA61C,UAAA,SACE7yB,EACA3jB,GAEA,OAAOy2C,kBAAkB/3C,KAAKmmB,IAAKlB,EAAO3jB,IAG5CyzC,EAAA9yC,UAAA+1C,WAAA,SACEp3C,EACAob,GAEA,IAAIg6B,EAAOh2C,KAAKi2C,kBAAkBr1C,GAClC,OAAOq3C,mBAAmBj4C,KAAKmmB,IAAK6vB,EAAMh6B,IAG5C+4B,EAAA9yC,UAAAi2C,KAAA,SACElB,EACAmB,EACAC,EACAp8B,EACA7M,EACAkpC,GAEA,YAHA,IAAAlpC,MAAA,QACA,IAAAkpC,MAAArB,GAEOsB,cAAct4C,KAAKmmB,IAAK6wB,EAAOmB,EAAS,EAAI,EAAGhpC,EAAQkpC,EAAOr8B,EAAMo8B,IAG7ErD,EAAA9yC,UAAAg1C,MAAA,SACED,EACAoB,EACA92C,EACA0a,EACA7M,EACAkpC,GAEA,QAHA,IAAAlpC,MAAA,QACA,IAAAkpC,MAAArB,GAEIh7B,EAAOikB,EAAWsY,MAAQv8B,EAAOikB,EAAWl5B,KAAM,MAAM,IAAIoS,MAAM,SAAW6C,GACjF,OAAOw8B,eAAex4C,KAAKmmB,IAAK6wB,EAAO7nC,EAAQkpC,EAAOD,EAAK92C,EAAO0a,IAGpE+4B,EAAA9yC,UAAAw2C,YAAA,SACEzB,EACAoB,EACAp8B,EACA7M,GAEA,YAFA,IAAAA,MAAA,GAEOupC,oBAAoB14C,KAAKmmB,IAAK6wB,EAAO7nC,EAAQ6M,EAAMo8B,IAG5DrD,EAAA9yC,UAAA02C,aAAA,SACE3B,EACAoB,EACA92C,EACA0a,EACA7M,GAEA,YAFA,IAAAA,MAAA,GAEOypC,qBAAqB54C,KAAKmmB,IAAK6wB,EAAO7nC,EAAQipC,EAAK92C,EAAO0a,IAGnE+4B,EAAA9yC,UAAA42C,WAAA,SACEzB,EACAJ,EACA7nC,EACAipC,EACA92C,EACA0a,GAEA,OAAO88B,mBAAmB94C,KAAKmmB,IAAKixB,EAAIJ,EAAO7nC,EAAQipC,EAAK92C,EAAO0a,IAGrE+4B,EAAA9yC,UAAA82C,eAAA,SACE/B,EACA7nC,EACAipC,EACAY,EACAC,EACAj9B,GAEA,OAAOk9B,uBAAuBl5C,KAAKmmB,IAAK6wB,EAAO7nC,EAAQipC,EAAKY,EAAUC,EAAaj9B,IAGrF+4B,EAAA9yC,UAAAk3C,YAAA,SACEf,EACAY,EACAI,EACAC,GAEA,OAAOC,oBAAoBt5C,KAAKmmB,IAAKiyB,EAAKY,EAAUI,EAASC,IAG/DtE,EAAA9yC,UAAAs3C,cAAA,SACEnB,EACAoB,GAEA,OAAOC,sBAAsBz5C,KAAKmmB,IAAKiyB,EAAKoB,IAK9CzE,EAAA9yC,UAAAy3C,UAAA,SACEz0B,EACA3jB,GAEA,OAAOq4C,kBAAkB35C,KAAKmmB,IAAKlB,EAAO3jB,IAG5CyzC,EAAA9yC,UAAA23C,WAAA,SACEh5C,EACAU,GAEA,IAAI00C,EAAOh2C,KAAKi2C,kBAAkBr1C,GAClC,OAAOi5C,mBAAmB75C,KAAKmmB,IAAK6vB,EAAM10C,IAG5CyzC,EAAA9yC,UAAA63C,MAAA,SACE9iB,EACA+iB,EACA/9B,QAAA,IAAAA,MAAmBikB,EAAWsY,MAE9B,IAAIvC,EAAOh2C,KAAKi2C,kBAAkBjf,GAC9Bye,EAAOiC,EAAcqC,GACzB,IACE,OAAOC,eAAeh6C,KAAKmmB,IAAK6vB,EAAMP,EAAMsE,EAASjvC,OAAQkR,WAE7Dq5B,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAg4C,GAAA,SACEjjB,EACApB,EACAt0B,QADA,IAAAs0B,MAAA,QACA,IAAAt0B,MAAA,GAEA,IAAI00C,EAAOh2C,KAAKi2C,kBAAkBjf,GAClC,OAAOkjB,eAAel6C,KAAKmmB,IAAK6vB,EAAMpgB,EAAWt0B,IAGnDyzC,EAAA9yC,UAAAk4C,KAAA,SACEvnB,GAEA,OAAOwnB,cAAcp6C,KAAKmmB,IAAKyM,IAGjCmiB,EAAA9yC,UAAAo4C,KAAA,SACErjB,EACA3R,GAEA,IAAI2wB,EAAOh2C,KAAKi2C,kBAAkBjf,GAClC,OAAOsjB,cAAct6C,KAAKmmB,IAAK6vB,EAAM3wB,IAGvC0vB,EAAA9yC,UAAAs4C,GAAA,SACE3kB,EACAmD,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOwhB,YAAYx6C,KAAKmmB,IAAKyP,EAAWmD,EAAQC,IAGlD+b,EAAA9yC,UAAAw4C,IAAA,WACE,OAAOC,aAAa16C,KAAKmmB,MAG3B4uB,EAAA9yC,UAAA04C,OAAA,SACE/nB,GAEA,YAFA,IAAAA,MAAA,GAEOgoB,gBAAgB56C,KAAKmmB,IAAKyM,IAGnCmiB,EAAA9yC,UAAA44C,OAAA,SACE9hB,EACAC,EACApD,GAEA,OAAOklB,gBAAgB96C,KAAKmmB,IAAKyP,EAAWmD,EAAQC,IAGtD+b,EAAA9yC,UAAA84C,OAAA,SACE9lB,EACA+lB,EACAplB,EACAt0B,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI25C,EAAWhmB,EAAMnqB,OACjBowC,EAAO,IAAIj0C,MAAag0C,GACnB56C,EAAI,EAAGA,EAAI46C,IAAY56C,EAC9B66C,EAAK76C,GAAKL,KAAKi2C,kBAAkBhhB,EAAM50B,IAEzC,IAAIo1C,EAAOS,EAAcgF,GACrBlF,EAAOh2C,KAAKi2C,kBAAkB+E,GAClC,IACE,OAAOG,gBAAgBn7C,KAAKmmB,IAAKsvB,EAAMwF,EAAUjF,EAAMpgB,EAAWt0B,WAElE+zC,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAzB,KAAA,SACEoqB,EACA6sB,EACAzmB,GAEA,IAAIglB,EAAOh2C,KAAKi2C,kBAAkBrrB,GAC9B6qB,EAAOiC,EAAcD,GACzB,IACE,OAAO2D,cAAcp7C,KAAKmmB,IAAK6vB,EAAMP,EAAMgC,GAAYA,EAAS3sC,QAAU,EAAGkmB,WAE7EqkB,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAo5C,cAAA,SACEp2B,EACAwyB,EACA9mB,GAEA,IAAIqlB,EAAOh2C,KAAKi2C,kBAAkBtlB,GAC9B8kB,EAAOiC,EAAcD,GACzB,IACE,OAAO6D,sBAAsBt7C,KAAKmmB,IAAKlB,EAAOwwB,EAAMgC,GAAYA,EAAS3sC,QAAU,EAAGkrC,WAEtFX,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAs5C,YAAA,WACE,OAAOC,qBAAqBx7C,KAAKmmB,MAKnC4uB,EAAA9yC,UAAAw5C,YAAA,SACEjvB,EACAzZ,EACA2oC,GAEA,OAAOC,oBAAoB37C,KAAKmmB,IAAKqG,EAAMzZ,EAAQ2oC,IAGrD3G,EAAA9yC,UAAA25C,YAAA,SACEpvB,EACAlrB,EACAo6C,GAEA,OAAOG,oBAAoB77C,KAAKmmB,IAAKqG,EAAMlrB,EAAOo6C,IAKpD3G,EAAA9yC,UAAA65C,aAAA,SACE1E,EACA2E,EACAC,GAEA,OAAOC,qBAAqBj8C,KAAKmmB,IAAKixB,EAAI2E,EAAKC,IAGjDjH,EAAA9yC,UAAAi6C,aAAA,SACE9E,EACA2E,EACAC,EACA16C,GAEA,OAAO66C,qBAAqBn8C,KAAKmmB,IAAKixB,EAAI2E,EAAKC,EAAK16C,IAGtDyzC,EAAA9yC,UAAAm6C,aAAA,SACEC,EACAC,EACAC,GAEA1xC,OAAsB,IAAf0xC,EAAKzxC,QACZ,IAAI2qC,EAAOC,EAAa6G,GACxB,IACE,OAAOC,qBAAqBx8C,KAAKmmB,IAAKk2B,EAAMC,EAAM7G,WAElDJ,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAw6C,eAAA,SACEJ,EACAC,EACAI,GAEA,OAAOC,uBAAuB38C,KAAKmmB,IAAKk2B,EAAMC,EAAMI,IAGtD3H,EAAA9yC,UAAA26C,WAAA,SACExF,EACA2E,EACAc,GAEA,OAAOC,mBAAmB98C,KAAKmmB,IAAKixB,EAAI2E,EAAKc,IAK/C9H,EAAA9yC,UAAA86C,UAAA,SACEn8C,EACAob,EACAghC,EACAv4B,GAEA,IAAIuxB,EAAOh2C,KAAKi2C,kBAAkBr1C,GAClC,OAAOq8C,mBAAmBj9C,KAAKmmB,IAAK6vB,EAAMh6B,EAAMghC,EAAU,EAAI,EAAGv4B,IAGnEswB,EAAA9yC,UAAAi7C,aAAA,SACEt8C,GAEA,IAAIo1C,EAAOh2C,KAAKi2C,kBAAkBr1C,GAClCu8C,sBAAsBn9C,KAAKmmB,IAAK6vB,IAGlCjB,EAAA9yC,UAAAm7C,YAAA,SACEx8C,EACAob,EACAqhC,EACAh4B,GAEA,IAAI2wB,EAAOh2C,KAAKi2C,kBAAkBr1C,GAC9B60C,EAAOS,EAAcmH,GACzB,IACE,OAAOC,qBAAqBt9C,KAAKmmB,IAAK6vB,EAAMh6B,EAAMy5B,EAAM4H,EAAWA,EAASvyC,OAAS,EAAGua,WAExFgwB,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAs7C,eAAA,SAAe38C,GACb,IAAIo1C,EAAOh2C,KAAKi2C,kBAAkBr1C,GAClC48C,wBAAwBx9C,KAAKmmB,IAAK6vB,IAKpCjB,EAAA9yC,UAAAw7C,qBAAA,SAAqB3H,EAAoBC,EAAiC1wB,GACxErlB,KAAKg1C,qBAAuBnqC,QAAQ7K,KAAKg1C,sBACzC,IAAI0I,EAAW19C,KAAKi2C,kBAAkB,IAClCR,EAAOS,EAAcH,GACzB,IACE,IAAI4H,EAAUxH,yBAAyBn2C,KAAKmmB,IAAKu3B,EAAU5H,EAAQL,EAAMM,EAAaA,EAAWjrC,OAAS,GAC1G,OAAOwyC,qBAAqBt9C,KAAKmmB,IAAKu3B,EAAUC,EAAS,EAAG,EAAGt4B,WAE/DgwB,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAA27C,wBAAA,WACE59C,KAAKg1C,sBAAwBnqC,OAAO7K,KAAKg1C,sBACzC,IAAI0I,EAAW19C,KAAKi2C,kBAAkB,IACtCuH,wBAAwBx9C,KAAKmmB,IAAKu3B,GAClCnH,4BAA4Bv2C,KAAKmmB,IAAKu3B,IAGxC3I,EAAA9yC,UAAA47C,kBAAA,SACElvC,EACA6pB,GAEA,IAAIslB,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkBzd,GACnC,OAAOwlB,2BAA2Bh+C,KAAKmmB,IAAK23B,EAAOC,IAGrDhJ,EAAA9yC,UAAAg8C,eAAA,SACEtvC,EACA6pB,GAEA,IAAIslB,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkBzd,GACnC,OAAO0lB,wBAAwBl+C,KAAKmmB,IAAK23B,EAAOC,IAGlDhJ,EAAA9yC,UAAAk8C,gBAAA,SACExvC,EACA6pB,GAEA,IAAIslB,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkBzd,GACnC,OAAO4lB,yBAAyBp+C,KAAKmmB,IAAK23B,EAAOC,IAGnDhJ,EAAA9yC,UAAAo8C,gBAAA,SACE1vC,EACA6pB,GAEA,IAAIslB,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkBzd,GACnC,OAAO8lB,yBAAyBt+C,KAAKmmB,IAAK23B,EAAOC,IAGnDhJ,EAAA9yC,UAAAs8C,aAAA,SAAa/lB,GACX,IAAIwd,EAAOh2C,KAAKi2C,kBAAkBzd,GAClCgmB,sBAAsBx+C,KAAKmmB,IAAK6vB,IAGlCjB,EAAA9yC,UAAAw8C,kBAAA,SACE9vC,EACA+vC,EACAC,EACAC,GAEA,IAAId,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkByI,GAC/BG,EAAQ7+C,KAAKi2C,kBAAkB0I,GACnC,OAAOG,2BAA2B9+C,KAAKmmB,IAAK23B,EAAOC,EAAOc,EAAOD,IAGnE7J,EAAA9yC,UAAA88C,eAAA,SACEpwC,EACA+vC,EACAC,GAEA,IAAIb,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkByI,GAC/BG,EAAQ7+C,KAAKi2C,kBAAkB0I,GACnC,OAAOK,wBAAwBh/C,KAAKmmB,IAAK23B,EAAOC,EAAOc,IAGzD9J,EAAA9yC,UAAAg9C,gBAAA,SACEtwC,EACA+vC,EACAC,EACAO,QAAA,IAAAA,OAAA,GAEA,IAAIpB,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkByI,GAC/BG,EAAQ7+C,KAAKi2C,kBAAkB0I,GACnC,OAAOQ,yBAAyBn/C,KAAKmmB,IAAK23B,EAAOC,EAAOc,EAAOK,IAGjEnK,EAAA9yC,UAAAm9C,gBAAA,SACEzwC,EACA+vC,EACAC,EACAU,GAEA,IAAIvB,EAAQ99C,KAAKi2C,kBAAkBtnC,GAC/BovC,EAAQ/9C,KAAKi2C,kBAAkByI,GAC/BG,EAAQ7+C,KAAKi2C,kBAAkB0I,GACnC,OAAOW,yBAAyBt/C,KAAKmmB,IAAK23B,EAAOC,EAAOc,EAAOQ,IAMjEtK,EAAA9yC,UAAAs9C,UAAA,SACEC,EACAC,EACAC,EACA90B,EACAtU,EACA4oC,QADA,IAAA5oC,MAAA,WACA,IAAA4oC,OAAA,GAQA,IANA,IAAIlJ,EAAOh2C,KAAKi2C,kBAAkB3/B,GAC9BxD,EAAI4sC,EAAS50C,OACb60C,EAAO,IAAI14C,MAAa6L,GACxB8sC,EAAO,IAAI34C,MAAU6L,GACrB+sC,EAAO,IAAI54C,MAAqB6L,GAChCgtC,EAAO,IAAI74C,MAAa6L,GACnBzS,EAAI,EAAGA,EAAIyS,IAAKzS,EAAG,CAC1B,IAAI6O,EAASwwC,EAASr/C,GAAG6O,OACrBC,EAASuwC,EAASr/C,GAAG8O,OACzBwwC,EAAKt/C,GAAKq1C,EAAaxmC,GACvB0wC,EAAKv/C,GAAK,EACVw/C,EAAKx/C,GAAKuqB,GAAUnhB,EAAAL,OAAO+I,OACvBnS,KAAKqD,IAAI08C,QAAQ5wC,GAAS6wC,SAAS7wC,IACnCnP,KAAKoD,IAAI28C,QAAQ5wC,IACrB2wC,EAAKz/C,GAAK6O,EAAOpE,OAEnB,IAAIm1C,EAAQ/J,EAAcyJ,GACtBO,EAAQxK,EAAakK,GACrBO,EAAQjK,EAAc2J,GACtBO,EAAQlK,EAAc4J,GAC1B,IACEO,mBAAmBrgD,KAAKmmB,IAAKq5B,EAASC,EAASzJ,EAAMiK,EAAOC,EAAOC,EAAOC,EAAOttC,EAAGosC,WAEpF7J,OAAO5sC,KAAK23C,GACZ/K,OAAO5sC,KAAK03C,GACZ9K,OAAO5sC,KAAKy3C,GACZ7K,OAAO5sC,KAAKw3C,GACZ,IAAS5/C,EAAIyS,EAAI,EAAGzS,GAAK,IAAKA,EAAGg1C,OAAO5sC,KAAKk3C,EAAKt/C,MAItD00C,EAAA9yC,UAAAq+C,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAItF,EAAWsF,EAAMz1C,OACjBmqB,EAAQ,IAAIhuB,MAAag0C,GACpB56C,EAAI,EAAGA,EAAI46C,IAAY56C,EAC9B40B,EAAM50B,GAAKL,KAAKi2C,kBAAkBsK,EAAMlgD,IAE1C,IAAIo1C,EAAOS,EAAcjhB,GACzB,IACEurB,0BAA0BxgD,KAAKmmB,IAAKq5B,EAASC,EAAShK,EAAMwF,WAE5D5F,OAAO5sC,KAAKgtC,KAIhBV,EAAA9yC,UAAAw+C,SAAA,SAASC,GACPC,kBAAkB3gD,KAAKmmB,IAAKu6B,IAG9B3L,EAAA9yC,UAAA2+C,iBAAA,WACE,OAAOC,6BAGT9L,EAAA9yC,UAAA6+C,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5BhM,EAAA9yC,UAAAg/C,eAAA,WACE,OAAOC,2BAGTnM,EAAA9yC,UAAAk/C,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1BhM,EAAA9yC,UAAAo/C,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBvM,EAAA9yC,UAAAu/C,YAAA,WACE,OAAOC,2BAA2BzhD,KAAKmmB,MAGzC4uB,EAAA9yC,UAAAy/C,YAAA,SAAYC,GACVC,2BAA2B5hD,KAAKmmB,IAAKw7B,IAGvC5M,EAAA9yC,UAAA4/C,SAAA,SAASnB,QAAA,IAAAA,MAAA,GACHA,EACFoB,0BAA0BpB,EAAM1gD,KAAKmmB,KAErC47B,wBAAwB/hD,KAAKmmB,MAIjC4uB,EAAA9yC,UAAA+/C,UAAA,SAAUC,EAAkBvB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAIzF,EAAWgH,EAAOn3C,OAClBmqB,EAAQ,IAAIhuB,MAAag0C,GACpB56C,EAAI,EAAGA,EAAI46C,IAAY56C,EAC9B40B,EAAM50B,GAAK6hD,EAAYD,EAAO5hD,IAEhC,IAAIo1C,EAAOS,EAAcjhB,GACzB,IACMyrB,EACFyB,2BAA2BzB,EAAM1gD,KAAKmmB,IAAKsvB,EAAMwF,GAEjDmH,yBAAyBpiD,KAAKmmB,IAAKsvB,EAAMwF,WAG3C5F,OAAO5sC,KAAKgtC,GACZ,IAASp1C,EAAI46C,EAAU56C,GAAK,IAAKA,EAAGg1C,OAAO5sC,KAAKwsB,EAAM50B,MAM1D00C,EAAA9yC,UAAAogD,qBAAA,SAAqBlwB,GAEnB,IAAImwB,EAAwBzB,4BACxB0B,EAAsBrB,0BACtBsB,EAAoBC,wBACxBzB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIvlC,EAAO0mC,2BAA2BvwB,GAClCuuB,EAAO1gD,KAAKy9C,qBAAqBzhC,EAAM,KAAMmW,GAC7C8C,EAAQj1B,KAAKi1C,sBAkBjB,OAjBKhgB,IACHj1B,KAAKi1C,sBAAwBhgB,EAAQihB,EAAc,CACjDl2C,KAAKi2C,kBAAkB,UACvBj2C,KAAKi2C,kBAAkB,iBAG3BkM,2BAA2BzB,EAAM1gD,KAAKmmB,IAAK8O,EAAO,GAClD9C,EAAOwwB,yBAAyBjC,GAC5BkC,yBAAyBzwB,IAAS+N,EAAa2iB,SACjD1wB,EAAO2wB,wBAAwB3wB,IAEjCnyB,KAAK49C,0BAGLoD,0BAA0BsB,GAC1BlB,wBAAwBmB,GACxBhB,sBAAsBiB,GACfrwB,GAGT4iB,EAAA9yC,UAAA8gD,SAAA,WACE,OAA4C,GAArCC,wBAAwBhjD,KAAKmmB,MAGtC4uB,EAAA9yC,UAAAghD,UAAA,WACEC,yBAAyBljD,KAAKmmB,MAGhC4uB,EAAA9yC,UAAAkhD,SAAA,SAASC,GACP,IAAI5M,EAAMx2C,KAAKo1C,IACfvqC,OAAO0qC,0BAA4B,IACnC,IAAIS,EAAOkM,EAAYkB,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgC/M,EAAKx2C,KAAKmmB,IAAK6vB,GAC/CqN,EAAYG,EAAQhN,GACpB,IAAIiN,EAAcD,EAAQhN,EAAM,GAChC8M,EAAeE,EAAQhN,EAAM,GAC7B,IAAIkN,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OA2jBV,SAAoBxL,EAAYttC,GAE9B,IADA,IAAI44C,EAAM,IAAI77C,WAAWiD,GAChBzK,EAAW,EAAGA,EAAIyK,IAAUzK,EACnCqjD,EAAIrjD,GAAK63C,KAASE,EAAM/3C,GAE1B,OAAOqjD,EAhkBUG,CAAWR,EAAWI,GACnCC,EAAI37B,UAAY+7B,EAAWR,GACpBI,UAEH1N,GAAMX,OAAO5sC,KAAKutC,GAClBqN,GAAWhO,OAAO5sC,KAAK46C,GACvBC,GAAcjO,OAAO5sC,KAAK66C,KAIlCvO,EAAA9yC,UAAA8hD,OAAA,WACE,MAAM,IAAI5qC,MAAM,oBAGlB47B,EAAA9yC,UAAA+hD,QAAA,WACE,MAAM,IAAI7qC,MAAM,oBAKV47B,EAAA9yC,UAAAg0C,kBAAR,SAA0BgO,GACxB,GAAW,MAAPA,EAAa,OAAO,EACxB,IAAI/O,EAAgBl1C,KAAKk1C,cACzB,GAAIA,EAAchkC,IAAI+yC,GAAM,OAAc/O,EAAch0C,IAAI+iD,GAC5D,IAAI7L,EAAM8J,EAAY+B,GAEtB,OADA/O,EAAcxmC,IAAIu1C,EAAK7L,GAChBA,GAGTrD,EAAA9yC,UAAAiiD,QAAA,mBACEr5C,OAAO7K,KAAKmmB,SACZ,IAAgB,IAAApC,EAAArP,EAAA1U,KAAKk1C,cAAc56B,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAA,CAAtC,IAAIwjC,EAAGj9B,EAAA7Z,MAAiC+zC,OAAO5sC,KAAK2vC,qGACzDp4C,KAAKk1C,cAAgB,IAAI9tC,IACzBiuC,OAAO5sC,KAAKzI,KAAKo1C,KACjBC,OAAO5sC,KAAKzI,KAAKi1C,uBACjBj1C,KAAKi1C,sBAAwB,EAC7BkP,uBAAuBnkD,KAAKmmB,KAC5BnmB,KAAKmmB,IAAM,GAGb4uB,EAAA9yC,UAAAmiD,eAAA,WACE,OAAOC,EAAS1iD,OAAO3B,OAGzB+0C,EAAA9yC,UAAAqiD,gBAAA,SACEnyB,EACAoyB,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBphD,IAAIqhD,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEJ,OALAH,GAAY,EAKJ5B,yBAAyBzwB,IAC/B,KAAK+N,EAAa0kB,MAChB,OAAQlC,2BAA2BvwB,IACjC,KAAK8N,EAAW75B,IACd,OAAOpG,KAAKoD,IAAIyhD,0BAA0B1yB,IAE5C,KAAK8N,EAAW55B,IACd,OAAOrG,KAAKqD,IACVyhD,6BAA6B3yB,GAC7B4yB,8BAA8B5yB,IAGlC,KAAK8N,EAAWp5B,IACd,OAAO7G,KAAK6D,IAAImhD,0BAA0B7yB,IAE5C,KAAK8N,EAAWn5B,IACd,OAAO9G,KAAK8D,IAAImhD,0BAA0B9yB,IAE5C,KAAK8N,EAAWl5B,KAEd,OAAO,EAET,QACE,MAAM,IAAIoS,MAAM,0BAItB,KAAK+mB,EAAaglB,SAChB,OAAOrN,kBAAkB73C,KAAKmmB,IAC5Bg/B,0BAA0BhzB,GAC1BuwB,2BAA2BvwB,IAG/B,KAAK+N,EAAaklB,UAChB,IAAIC,EAAaC,0BAA0BnzB,GAC3C,IAAKkzB,EAAY,MACjB,OAAOpN,mBAAmBj4C,KAAKmmB,IAAKk/B,EAAY3C,2BAA2BvwB,IAE7E,KAAK+N,EAAaqlB,KAChB,KAAMb,EAAU1kD,KAAKskD,gBAAgBkB,oBAAoBrzB,GAAOoyB,EAAeC,IAC7E,MAEF,OACEiB,sBAAsBtzB,GAClBumB,oBAAoB14C,KAAKmmB,IACvBu/B,sBAAsBvzB,GACtBwzB,uBAAuBxzB,GACvBuwB,2BAA2BvwB,GAC3BuyB,GAEFpM,cAAct4C,KAAKmmB,IACjBu/B,sBAAsBvzB,GACtByzB,sBAAsBzzB,GAAQ,EAAI,EAClCwzB,uBAAuBxzB,GACvB0zB,sBAAsB1zB,GACtBuwB,2BAA2BvwB,GAC3BuyB,GAIV,KAAKxkB,EAAa4lB,MAChB,KAAMpB,EAAU1kD,KAAKskD,gBAAgByB,uBAAuB5zB,GAAOoyB,EAAeC,IAChF,MAEF,OAAOnN,eAAer3C,KAAKmmB,IAAK6/B,oBAAoB7zB,GAAOuyB,GAE7D,KAAKxkB,EAAa+lB,OAChB,KAAMvB,EAAU1kD,KAAKskD,gBAAgB4B,uBAAuB/zB,GAAOoyB,EAAeC,IAChF,MAEF,KAAMG,EAAU3kD,KAAKskD,gBAAgB6B,wBAAwBh0B,GAAOoyB,EAAeC,IACjF,MAEF,OAAOjN,gBAAgBv3C,KAAKmmB,IAAKigC,qBAAqBj0B,GAAOuyB,EAASC,GAG1E,OAAO,GAKT5P,EAAA9yC,UAAAokD,iBAAA,SAAiBzlD,GACf,IAAIo1C,EAAOkM,EAAYthD,GACvB,IACE,OAAO0lD,oCAAoCtmD,KAAKmmB,IAAK6vB,WAErDX,OAAO5sC,KAAKutC,KAIhBjB,EAAA9yC,UAAAskD,iBAAA,SAAiBthC,GACf,OAAO6+B,EAAW0C,oCAAoCxmD,KAAKmmB,IAAKlB,KAGlE8vB,EAAA9yC,UAAAgmB,iBAAA,SACEy4B,EACAvuB,EACAs0B,EACAC,EACAC,GAEAC,kCAAkClG,EAAMvuB,EAAMs0B,EAAWC,EAAYC,IAzUvD5R,EAAA8R,kBAAkC,EA2UpD9R,EA14BA,GA84BA,SAAgB+R,EAAgB30B,GAC9B,OAAOywB,yBAAyBzwB,GA/4BrBzyB,EAAAq1C,SA84Bbr1C,EAAAonD,kBAIApnD,EAAAqnD,kBAAA,SAAkC50B,GAChC,OAAOuwB,2BAA2BvwB,IAGpCzyB,EAAAsnD,iBAAA,SAAiC70B,GAC/B,OAAO0yB,0BAA0B1yB,IAGnCzyB,EAAAunD,oBAAA,SAAoC90B,GAClC,OAAO2yB,6BAA6B3yB,IAGtCzyB,EAAAwnD,qBAAA,SAAqC/0B,GACnC,OAAO4yB,8BAA8B5yB,IAGvCzyB,EAAAynD,iBAAA,SAAiCh1B,GAC/B,OAAO6yB,0BAA0B7yB,IAGnCzyB,EAAA0nD,iBAAA,SAAiCj1B,GAC/B,OAAO8yB,0BAA0B9yB,IAGnCzyB,EAAA2nD,iBAAA,SAAiCl1B,GAC/B,OAAOgzB,0BAA0BhzB,IAGnCzyB,EAAA4nD,iBAAA,SAAiCn1B,GAC/B,OAAOo1B,0BAA0Bp1B,IAGnCzyB,EAAA8nD,iBAAA,SAAiCr1B,GAC/B,OAAOs1B,0BAA0Bt1B,IAGnCzyB,EAAAgoD,WAAA,SAA2Bv1B,GACzB,OAAOw1B,uBAAuBx1B,IAGhCzyB,EAAAkoD,iBAAA,SAAiCz1B,GAC/B,OAAO2xB,EAAWwB,0BAA0BnzB,KAG9CzyB,EAAAmoD,YAAA,SAA4B11B,GAC1B,OAAOi0B,qBAAqBj0B,IAG9BzyB,EAAAooD,cAAA,SAA8B31B,GAC5B,OAAO+zB,uBAAuB/zB,IAGhCzyB,EAAAqoD,eAAA,SAA+B51B,GAC7B,OAAOg0B,wBAAwBh0B,IAGjCzyB,EAAAsoD,WAAA,SAA2B71B,GACzB,OAAO6zB,oBAAoB7zB,IAG7BzyB,EAAAuoD,cAAA,SAA8B91B,GAC5B,OAAO4zB,uBAAuB5zB,IAGhCzyB,EAAAwoD,aAAA,SAA6B/1B,GAC3B,OAAOuzB,sBAAsBvzB,IAG/BzyB,EAAAyoD,cAAA,SAA8Bh2B,GAC5B,OAAOwzB,uBAAuBxzB,IAGhCzyB,EAAA0oD,WAAA,SAA2Bj2B,GACzB,OAAOqzB,oBAAoBrzB,IAG7BzyB,EAAA2oD,aAAA,SAA6Bl2B,GAC3B,OAAOyzB,sBAAsBzzB,IAG/BzyB,EAAA4oD,cAAA,SAA8Bn2B,GAC5B,OAAOo2B,uBAAuBp2B,IAGhCzyB,EAAA8oD,eAAA,SAA+Br2B,GAC7B,OAAOs2B,wBAAwBt2B,IAGjCzyB,EAAAgpD,YAAA,SAA4Bv2B,GAC1B,OAAOw2B,qBAAqBx2B,IAG9BzyB,EAAAkpD,cAAA,SAA8Bz2B,GAC5B,OAAO02B,uBAAuB12B,IAGhCzyB,EAAAopD,aAAA,SAA6B32B,GAC3B,OAAO2xB,EAAWiF,sBAAsB52B,KAG1CzyB,EAAAspD,mBAAA,SAAmC72B,GACjC,OAAO82B,6BAA6B92B,IAGtCzyB,EAAAwpD,cAAA,SAA8B/2B,EAAqBlN,GACjD,OAAOkkC,uBAAuBh3B,EAAMlN,IAGtCvlB,EAAA0pD,eAAA,SAA+Bj3B,GAC7B,OAAOk3B,wBAAwBl3B,IAGjCzyB,EAAA4pD,UAAA,SAA0Bn3B,GACxB,OAAOo3B,qBAAqBp3B,IAG9BzyB,EAAA8pD,WAAA,SAA2Br3B,GACzB,OAAOs3B,sBAAsBt3B,IAG/BzyB,EAAAgqD,YAAA,SAA4Bv3B,GAC1B,OAAO2xB,EAAW6F,qBAAqBx3B,KAGzCzyB,EAAAkqD,YAAA,SAA4Bz3B,GAC1B,OAAO03B,qBAAqB13B,IAG9BzyB,EAAAoqD,aAAA,SAA6B33B,GAC3B,OAAO2xB,EAAWiG,sBAAsB53B,KAG1CzyB,EAAAsqD,kBAAA,SAAkC73B,GAChC,OAAO83B,2BAA2B93B,IAGpCzyB,EAAAwqD,cAAA,SAA8B/3B,GAC5B,OAAOg4B,yBAAyBh4B,IAGlCzyB,EAAA0qD,cAAA,SAA8Bj4B,GAC5B,OAAOk4B,0BAA0Bl4B,IAGnCzyB,EAAA4qD,mBAAA,SAAmCn4B,GACjC,OAAOo4B,4BAA4Bp4B,IAGrCzyB,EAAA8qD,aAAA,SAA6Br4B,GAC3B,OAAOs4B,sBAAsBt4B,IAG/BzyB,EAAAgrD,eAAA,SAA+Bv4B,GAC7B,OAAO2wB,wBAAwB3wB,IAGjCzyB,EAAAirD,cAAA,SAA8Bx4B,GAC5B,OAAO2xB,EAAW8G,uBAAuBz4B,KAG3CzyB,EAAAmrD,oBAAA,SAAoC14B,GAClC,OAAO24B,4BAA4B34B,IAGrCzyB,EAAAqrD,eAAA,SAA+B54B,EAAqBlN,GAClD,OAAO+lC,wBAAwB74B,EAAMlN,IAGvCvlB,EAAAurD,UAAA,SAA0B94B,GACxB,OAAO+4B,mBAAmB/4B,IAG5BzyB,EAAAyrD,oBAAA,SAAoCh5B,GAClC,OAAOi5B,4BAA4Bj5B,IAGrCzyB,EAAA2rD,eAAA,SAA+Bl5B,EAAqBlN,GAClD,OAAOqmC,wBAAwBn5B,EAAMlN,IAGvCvlB,EAAA6rD,YAAA,SAA4Bp5B,GAC1B,OAAO2xB,EAAW0H,4BAA4Br5B,KAKhDzyB,EAAA+rD,gBAAA,SAAgC/K,GAC9B,OAAOiC,yBAAyBjC,IAGlChhD,EAAAgsD,gBAAA,SAAgChL,GAC9B,OAAOoD,EAAW6H,yBAAyBjL,KAG7ChhD,EAAAksD,sBAAA,SAAsClL,GACpC,OAAOmL,8BAA8BnL,IAGvChhD,EAAAosD,qBAAA,SAAqCpL,EAAmBz7B,GACtD,OAAO8mC,0BAA0BrL,EAAMz7B,IAGzCvlB,EAAAssD,sBAAA,SAAsCtL,GACpC,OAAOuL,2BAA2BvL,IAGpC,IAAA2D,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAA1iD,OAAP,SAAchC,GACZ,IAAIusD,EAAW,IAAI7H,EAGnB,OAFA6H,EAASvsD,OAASA,EAClBusD,EAAS/lC,IAAMgmC,gBAAgBxsD,EAAOwmB,KAC/B+lC,GAKT7H,EAAApiD,UAAAmqD,SAAA,SAASn+B,GACP,OAAOo+B,kBAAkBrsD,KAAKmmB,IAAK8H,IAGrCo2B,EAAApiD,UAAAqqD,UAAA,SACEC,EACAC,EACA52B,EACA3H,QADA,IAAA2H,MAAA,QACA,IAAA3H,MAAA,GAEAw+B,mBAAmBF,EAAMC,EAAI52B,EAAW3H,IAG1Co2B,EAAApiD,UAAAyqD,mBAAA,SAAmBz+B,EAAqB2H,GACtC,OAAO+2B,4BAA4B3sD,KAAKmmB,IAAK8H,EAAM2H,IAGrDyuB,EAAApiD,UAAA2qD,mBAAA,SACEL,EACAC,EACAK,EACA5+B,QAAA,IAAAA,MAAA,GAEA,IAAIwnB,EAAOS,EAAc2W,GACzB,IACEC,4BAA4BP,EAAMC,EAAI/W,EAAMoX,EAAQ/hD,OAAQmjB,WAE5DonB,OAAO5sC,KAAKgtC,KAIhB4O,EAAApiD,UAAA8qD,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0BltD,KAAKmmB,IAAK6mC,EAAOC,IAEtD5I,EAhDA,GA4FA,SAAS3O,EAAayX,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIriD,OAChBstC,EAAM/C,OAAOC,SAAS8X,GACtBpR,EAAM5D,EACD/3C,EAAI,EAAGA,EAAI+sD,IAAa/sD,EAC/B42C,MAAU+E,IAAOmR,EAAI9sD,IAEvB,OAAO+3C,EAGT,SAASlC,EAAcmX,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIjV,EAAM/C,OAAOC,SAAS+X,EAAKviD,QAAU,GACrCkxC,EAAM5D,EACD/3C,EAAI,EAAGyS,EAAIu6C,EAAKviD,OAAQzK,EAAIyS,IAAKzS,EAAG,CAC3C,IAAIitD,EAAMD,EAAKhtD,GAEf42C,MAAU+E,EAAyB,IAAdsR,GACrBrW,MAAU+E,EAAM,EAAKsR,GAAS,EAAK,KACnCrW,MAAU+E,EAAM,EAAKsR,GAAQ,GAAM,KACnCrW,MAAU+E,EAAM,EAAKsR,IAAQ,IAC7BtR,GAAO,EAET,OAAO5D,EAGT,SAASV,EAAc6V,GACrB,OAAOrX,EAAcqX,GA2BvB,SAASrL,EAAY+B,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAI7L,EAAM/C,OAAOC,SA1BnB,SAA0B2O,GAExB,IADA,IAAIl1B,EAAM,EACD1uB,EAAI,EAAGyS,EAAImxC,EAAIn5C,OAAQzK,EAAIyS,IAAKzS,EAAG,CAC1C,IAAImtD,EAAIvJ,EAAI/4C,WAAW7K,GACnBmtD,GAAK,OAAUA,GAAK,OAAUntD,EAAI,EAAIyS,IACxC06C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBvJ,EAAI/4C,aAAa7K,IAEpDmtD,GAAK,MACLz+B,EAEFA,GADSy+B,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOz+B,EAKmB0+B,CAAiBxJ,GAAO,GAE9CjI,EAAM5D,EACD/3C,EAAI,EAAGyS,EAAImxC,EAAIn5C,OAAQzK,EAAIyS,IAAKzS,EAAG,CAC1C,IAAImtD,EAAIvJ,EAAI/4C,WAAW7K,GACnBmtD,GAAK,OAAUA,GAAK,OAAUntD,EAAI,EAAIyS,IACxC06C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBvJ,EAAI/4C,aAAa7K,IAEpDmtD,GAAK,IACPvW,MAAU+E,IAAOwR,GACRA,GAAK,MACdvW,MAAU+E,IAAQ,IAASwR,IAAM,GACjCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,OACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,SACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,UACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,KAE3BvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAI/B,OADAvW,MAAU+E,EAAK,GACR5D,EAGT,SAASoL,EAAQpL,GACf,OACGF,KAASE,GACTF,KAASE,EAAM,IAAO,EACtBF,KAASE,EAAM,IAAM,GACrBF,KAASE,EAAM,IAAM,GAY1B,SAAgB0L,EAAW1L,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEIsV,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAI9mD,MAIPymD,EAAKxV,KAASE,MACR,IAALsV,GAINC,EAAuB,GAAlBzV,KAASE,KACK,MAAT,IAALsV,IAILE,EAAuB,GAAlB1V,KAASE,KACK,MAAT,IAALsV,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlB3V,KAASE,KACK,MAAT,IAALsV,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlB5V,KAASE,KAEZsV,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlB5V,KAASE,OAKpB2V,EAAIxvC,KAAKmvC,IApBPK,EAAIxvC,MAAY,GAALmvC,IAAY,EAAKC,IAL5BI,EAAIxvC,KAAKmvC,GAmCb,OAAO1mD,OAAOgnD,eAAeD,GA1PlBruD,EAAA2kD,WA+Mb3kD,EAAAokD,aA+CA,IAAAH,EAAA,WAKA,OALA,gBAAajkD,EAAAikD,eAQbjkD,EAAAuuD,yBAAA,SAAgBA,EAAyB97B,GAEvC,GAAIuwB,2BAA2BvwB,IAAS8N,EAAWiuB,YAAa,OAAO,EAEvE,OAAQtL,yBAAyBzwB,IAC/B,KAAK+N,EAAaguB,YAClB,KAAKhuB,EAAa2iB,OAAQ,OAAO,EACjC,KAAK3iB,EAAaiuB,MAAO,OAA2C,GAApClE,2BAA2B93B,GAC3D,KAAK+N,EAAakuB,MAChB,IAAKrF,sBAAsB52B,GAAO,CAChC,IAAIk8B,EAAcpF,6BAA6B92B,GAC/C,OAAOk8B,EAAc,GAAKJ,EAAyB9E,uBAAuBh3B,EAAMk8B,EAAc,KAIpG,OAAO,GAIT3uD,EAAA4uD,SAAA,SAA4Bn8B,EAAqBo8B,EAASxlD,GACxD,OAAQ+9C,EAAgB30B,IACtB,KAAK+N,EAAakuB,MAChB,IAAK,IAAI/tD,EAAI,EAAGyB,EAAImnD,6BAA6B92B,GAAO9xB,EAAIyB,IAAKzB,EAC/D0I,EAAMogD,uBAAuBh3B,EAAM9xB,GAAIkuD,GAEzC,MAEF,KAAKruB,EAAasuB,GAChBzlD,EAAMsgD,wBAAwBl3B,GAAOo8B,GACrCxlD,EAAMwgD,qBAAqBp3B,GAAOo8B,GAClC,IAAIv1B,EAAUywB,sBAAsBt3B,GAChC6G,GAASjwB,EAAMiwB,EAASu1B,GAC5B,MAEF,KAAKruB,EAAauuB,KAChB1lD,EAAM8gD,qBAAqB13B,GAAOo8B,GAClC,MAEF,KAAKruB,EAAaiuB,MAChB,IAAIv4B,EAAYq0B,2BAA2B93B,GACvCyD,GAAW7sB,EAAM6sB,EAAW24B,GAChC,MAEF,KAAKruB,EAAawuB,OAChB3lD,EAAM4lD,4BAA4Bx8B,GAAOo8B,GACzC,MAEF,KAAKruB,EAAa0uB,KAChB,IAASvuD,EAAI,EAAGyB,EAAIgpD,4BAA4B34B,GAAO9xB,EAAIyB,IAAKzB,EAC9D0I,EAAMiiD,wBAAwB74B,EAAM9xB,GAAIkuD,GAE1C,MAEF,KAAKruB,EAAa2uB,aAChB,IAASxuD,EAAI,EAAGyB,EAAIgtD,oCAAoC38B,GAAO9xB,EAAIyB,IAAKzB,EACtE0I,EAAMgmD,gCAAgC58B,EAAM9xB,GAAIkuD,GAElD,MAEF,KAAKruB,EAAaglB,SAChB,MAEF,KAAKhlB,EAAa8uB,SAChBjmD,EAAM0+C,0BAA0Bt1B,GAAOo8B,GACvC,MAEF,KAAKruB,EAAaklB,UAChB,MAEF,KAAKllB,EAAa+uB,UAChBlmD,EAAMmmD,2BAA2B/8B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAaqlB,KAChBx8C,EAAMy8C,oBAAoBrzB,GAAOo8B,GACjC,MAEF,KAAKruB,EAAaivB,MAChBpmD,EAAM4/C,qBAAqBx2B,GAAOo8B,GAClCxlD,EAAM8/C,uBAAuB12B,GAAOo8B,GACpC,MAEF,KAAKruB,EAAakvB,UAChBrmD,EAAMsmD,yBAAyBl9B,GAAOo8B,GACtCxlD,EAAMumD,2BAA2Bn9B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAaqvB,cAChBxmD,EAAMymD,6BAA6Br9B,GAAOo8B,GAC1CxlD,EAAM0mD,kCAAkCt9B,GAAOo8B,GAC/CxlD,EAAM2mD,qCAAqCv9B,GAAOo8B,GAClD,MAEF,KAAKruB,EAAayvB,WAChB5mD,EAAM6mD,0BAA0Bz9B,GAAOo8B,GACvCxlD,EAAM8mD,+BAA+B19B,GAAOo8B,GAC5CxlD,EAAM+mD,8BAA8B39B,GAAOo8B,GAC3C,MAEF,KAAKruB,EAAa6vB,aAChBhnD,EAAMinD,4BAA4B79B,GAAOo8B,GACzC,MAEF,KAAKruB,EAAa+vB,YAChBlnD,EAAMmnD,2BAA2B/9B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAaiwB,YAChBpnD,EAAMqnD,2BAA2Bj+B,GAAOo8B,GACxCxlD,EAAMsnD,6BAA6Bl+B,GAAOo8B,GAC1C,MAEF,KAAKruB,EAAaowB,YAChBvnD,EAAMwnD,4BAA4Bp+B,GAAOo8B,GACzCxlD,EAAMynD,6BAA6Br+B,GAAOo8B,GAC1C,MAEF,KAAKruB,EAAauwB,cAChB1nD,EAAM2nD,8BAA8Bv+B,GAAOo8B,GAC3CxlD,EAAM4nD,+BAA+Bx+B,GAAOo8B,GAC5CxlD,EAAM6nD,8BAA8Bz+B,GAAOo8B,GAC3C,MAEF,KAAKruB,EAAa2wB,UAChB9nD,EAAM+nD,yBAAyB3+B,GAAOo8B,GACtCxlD,EAAMgoD,2BAA2B5+B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAa8wB,WAChBjoD,EAAMkoD,2BAA2B9+B,GAAOo8B,GACxCxlD,EAAMmoD,6BAA6B/+B,GAAOo8B,GAC1CxlD,EAAMooD,2BAA2Bh/B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAakxB,SAChB,MAEF,KAAKlxB,EAAamxB,WAChBtoD,EAAMuoD,2BAA2Bn/B,GAAOo8B,GACxCxlD,EAAMwoD,6BAA6Bp/B,GAAOo8B,GAC1CxlD,EAAMyoD,2BAA2Br/B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAauxB,WAChB1oD,EAAM2oD,2BAA2Bv/B,GAAOo8B,GACxCxlD,EAAM4oD,4BAA4Bx/B,GAAOo8B,GACzCxlD,EAAM6oD,2BAA2Bz/B,GAAOo8B,GACxC,MAEF,KAAKruB,EAAa0kB,MAChB,MAEF,KAAK1kB,EAAa4lB,MAChB/8C,EAAMg9C,uBAAuB5zB,GAAOo8B,GACpC,MAEF,KAAKruB,EAAa+lB,OAChBl9C,EAAMm9C,uBAAuB/zB,GAAOo8B,GACpCxlD,EAAMo9C,wBAAwBh0B,GAAOo8B,GACrC,MAEF,KAAKruB,EAAa2xB,OAChB9oD,EAAMohD,yBAAyBh4B,GAAOo8B,GACtCxlD,EAAMshD,0BAA0Bl4B,GAAOo8B,GACvCxlD,EAAMwhD,4BAA4Bp4B,GAAOo8B,GACzC,MAEF,KAAKruB,EAAa4xB,KAChB/oD,EAAM0hD,sBAAsBt4B,GAAOo8B,GACnC,MAEF,KAAKruB,EAAa2iB,OAChB95C,EAAM+5C,wBAAwB3wB,GAAOo8B,GACrC,MAEF,KAAKruB,EAAa6xB,KAChB,IAAS1xD,EAAI,EAAGyB,EAAIspD,4BAA4Bj5B,GAAO9xB,EAAIyB,IAAKzB,EAC9D0I,EAAMuiD,wBAAwBn5B,EAAM9xB,GAAIkuD,GAE1C,MAEF,KAAKruB,EAAa8xB,IAGlB,KAAK9xB,EAAaguB,YAChB,MAEF,QAASrjD,QAAO,GAElB,OAAO,kFC76DT,IAAAonD,EAAA9xD,EAAA,GAOA+xD,EAAA/xD,EAAA,IAOA,SAAkBgyD,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAKAA,IAAA,gBA7CF,CAAkBzyD,EAAAyyD,WAAAzyD,EAAAyyD,SAAQ,KAiD1B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,sBAvBF,CAAkB1yD,EAAA0yD,YAAA1yD,EAAA0yD,UAAS,KA0B3B,IAAMC,EAAY,IAAIxqD,WAAW,IAGjCyJ,EAAA,WAoBE,SAAAA,EAAY8B,EAAgB3D,EAAkBisC,GAHtC17C,KAAAsyD,mBAAkC,KAIxCtyD,KAAKoT,KAAOA,EACZpT,KAAKyP,MAAQA,EACbzP,KAAK07C,KAAOA,EACZ17C,KAAKuyD,SAAgBC,KAAe9W,EAAO,GAC3C17C,KAAKksB,eAAiB,KACtBlsB,KAAKyyD,mBAAqB,KAC1BzyD,KAAK0yD,gBAAkB1yD,KA6Z3B,OAzZEe,OAAAC,eAAIsQ,EAAArP,UAAA,UAAO,KAAX,WACE,OAAQjC,KAAKoT,MACX,OAAkB,OAAO9B,EAAKpO,GAC9B,OAAmB,OAAOoO,EAAKnO,IAC/B,QACA,OAAmB,OAAOmO,EAAKlO,IAC/B,QACA,OAAmB,OAAOkO,EAAKjO,IAC/B,OAAqB,OAAoB,IAAbrD,KAAK07C,KAAapqC,EAAKqhD,QAAUrhD,EAAKshD,QAClE,OAAkB,OAAOthD,EAAK/N,GAC9B,OAAmB,OAAO+N,EAAK9N,IAC/B,OAAmB,OAAO8N,EAAK7N,IAC/B,OAAmB,OAAO6N,EAAK5N,IAC/B,OAAqB,OAAoB,IAAb1D,KAAK07C,KAAapqC,EAAKuhD,QAAUvhD,EAAKwhD,QAClE,QACA,QAAS,OAAOxhD,EAAKlO,sCAKzBrC,OAAAC,eAAIsQ,EAAArP,UAAA,aAAU,KAAd,WACE,OAAa,IAATjC,KAAKoT,KAA8B9B,EAAKyhD,KACrC/yD,sCAITe,OAAAC,eAAIsQ,EAAArP,UAAA,YAAS,KAAb,WACE,OAAO,GAAK+wD,IAAShzD,KAAKuyD,2CAI5BxxD,OAAAC,eAAIsQ,EAAArP,UAAA,YAAS,KAAb,WACE,IAAIiqB,EAAiBlsB,KAAKksB,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAe/T,aAAa85C,EAAA5kD,eAAekL,4CAIhFxX,OAAAC,eAAIsQ,EAAArP,UAAA,cAAW,KAAf,WACE,IAAIiqB,EAAiBlsB,KAAKksB,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAe/T,aAAa85C,EAAA5kD,eAAekL,4CAI/EjH,EAAArP,UAAAgxD,yBAAA,SAAyBC,GACvB,OAAOA,EAAWxX,KAAO17C,KAAK07C,MAIhCpqC,EAAArP,UAAAkxD,wBAAA,SAAwBD,GACtB,IAAIxX,EAAO17C,KAAKqc,GAAE,GAAuBrc,KAAK07C,KAAO17C,KAAK07C,KAAO,EACjE,OAAO,IAAQwX,EAAWxX,KAAOA,GAInCpqC,EAAArP,UAAAoa,GAAA,SAAG5M,GAA0B,OAAQzP,KAAKyP,MAAQA,IAAUA,GAE5D6B,EAAArP,UAAA6c,MAAA,SAAMrP,GAA0B,OAA+B,IAAvBzP,KAAKyP,MAAQA,IAGrD6B,EAAArP,UAAA+nB,QAAA,SAAQopC,GACNvoD,OAAgB,GAAT7K,KAAKoT,OAA2BpT,KAAKksB,gBAC5C,IAAIw3B,EAAM,IAAIpyC,EAAKtR,KAAKoT,MAAmB,IAAbpT,KAAKyP,MAAwB,IAAwBzP,KAAK07C,MAExF,OADAgI,EAAIx3B,eAAiBknC,EACd1P,GAITpyC,EAAArP,UAAAglB,WAAA,SAAWtW,GACT9F,OAAgB,GAAT7K,KAAKoT,OAAyBpT,KAAKyyD,oBAC1C,IAAI/O,EAAM,IAAIpyC,EAAKtR,KAAKoT,MAAmB,IAAbpT,KAAKyP,MAAwB,IAAwBzP,KAAK07C,MAExF,OADAgI,EAAI+O,mBAAqB9hD,EAClB+yC,GAITpyC,EAAArP,UAAAoxD,WAAA,WASE,OARAxoD,OAAO7K,KAAKqc,GAAE,MACTrc,KAAKsyD,qBACRznD,QAAQ7K,KAAKqc,GAAE,MACfrc,KAAKsyD,mBAAqB,IAAIhhD,EAAKtR,KAAKoT,KAAgB,IAAVpT,KAAKyP,MAA4BzP,KAAK07C,MACpF17C,KAAKsyD,mBAAmBI,gBAAkB1yD,KAC1CA,KAAKsyD,mBAAmBpmC,eAAiBlsB,KAAKksB,eAC9ClsB,KAAKsyD,mBAAmBG,mBAAqBzyD,KAAKyyD,oBAE7CzyD,KAAKsyD,oBAIdhhD,EAAArP,UAAA0oB,eAAA,SAAeC,EAAc0oC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,QAL2B,IAAAJ,OAAA,GAKvBtzD,KAAKqc,GAAE,MACT,GAAIuO,EAAOvO,GAAE,QACNrc,KAAKqc,GAAE,MAAwBuO,EAAOvO,GAAE,MAC3C,GAAIk3C,EAAevzD,KAAKksB,gBACtB,GAAIsnC,EAAc5oC,EAAOsB,eACvB,OAAOqnC,EAAa5oC,eAAe6oC,QAEhC,IAAIC,EAAkBzzD,KAAKyyD,sBAC5BiB,EAAiB9oC,EAAO6nC,oBAC1B,OAAOgB,EAAgB9oC,eAAe+oC,QAKzC,IAAK9oC,EAAOvO,GAAE,KACnB,GAAIrc,KAAKqc,GAAE,GACT,GAAIuO,EAAOvO,GAAE,IACX,IACGi3C,GACDtzD,MAAQsR,EAAK1N,MACb5D,KAAKqc,GAAE,IAAsBuO,EAAOvO,GAAE,GAEtC,OAAOrc,KAAK07C,MAAQ9wB,EAAO8wB,SAExB,IAAe,IAAX9wB,EAAOxX,KAChB,OAAOpT,KAAK07C,MAAQ,GACf,GAAe,IAAX9wB,EAAOxX,KAChB,OAAOpT,KAAK07C,MAAQ,QAEjB,GAAI17C,KAAKqc,GAAE,IAChB,GAAIuO,EAAOvO,GAAE,GACX,OAAOrc,KAAK07C,MAAQ9wB,EAAO8wB,UAExB,GAAI17C,KAAKqc,GAAE,OACZuO,EAAOvO,GAAE,MACX,OAAOrc,KAAK07C,MAAQ9wB,EAAO8wB,KAIjC,OAAO,GAITpqC,EAAArP,UAAA0xD,uBAAA,SAAuB/oC,EAAc0oC,GACnC,YADmC,IAAAA,OAAA,GAC/BtzD,KAAKqc,GAAE,KAA8Brc,KAAK2qB,eAAeC,IACpDA,EAAOvO,GAAE,OACdrc,KAAKqc,GAAE,GACFuO,EAAOvO,GAAE,IAAuBuO,EAAO8wB,MAAQ17C,KAAK07C,QACxD4X,GAAwBtzD,KAAKqc,GAAE,IAAsBuO,EAAOvO,GAAE,IAG5Drc,KAAKoT,MAAQwX,EAAOxX,OAItB9B,EAAAsiD,kBAAP,SAAyB3gC,EAAYC,EAAa2gC,GAChD,OAAI3gC,EAAMvI,eAAesI,EAAM4gC,GAA+B5gC,EACrDA,EAAKtI,eAAeuI,EAAO2gC,GAA+B3gC,EAC5D,MAIT5hB,EAAArP,UAAA6b,SAAA,WACE,GAAI9d,KAAKqc,GAAE,KAAuB,CAChC,IAAI6P,EAAiBlsB,KAAKksB,eAC1B,GAAIA,EACF,OAAOlsB,KAAKqc,GAAE,KACV6P,EAAevd,aAAe,UAC9Bud,EAAevd,aAErB,IAAI8jD,EAAqBzyD,KAAKyyD,mBAC9B,GAAIA,EACF,OAAOzyD,KAAKqc,GAAE,KACV,IAAMo2C,EAAmB30C,WAAa,WACtC20C,EAAmB30C,WAEzBjT,QAAO,GAET,OAAQ7K,KAAKoT,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAASvI,QAAO,GAChB,QAAoB,MAAO,SAO/ByG,EAAArP,UAAA6xD,aAAA,WACE,OAAQ9zD,KAAKoT,MACX,QAAS,OAAO8+C,EAAAjyB,WAAW75B,IAC3B,OACA,OAAmB,OAAO8rD,EAAAjyB,WAAW55B,IACrC,OACA,OAAqB,OAAoB,IAAbrG,KAAK07C,KAAawW,EAAAjyB,WAAW55B,IAAM6rD,EAAAjyB,WAAW75B,IAC1E,QAAmB,OAAO8rD,EAAAjyB,WAAWp5B,IACrC,QAAmB,OAAOqrD,EAAAjyB,WAAWn5B,IACrC,QAAoB,OAAOorD,EAAAjyB,WAAWl5B,KACtC,QAAqB,OAAOmrD,EAAAjyB,WAAWsY,OAK3CjnC,EAAArP,UAAA8xD,aAAA,SAAap0D,GACX,OAAQK,KAAKoT,MACX,QAAoBvI,QAAO,GAC3B,QAAS,OAAOlL,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK07C,KAAY,OAAO/7C,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,GACrC,QAAoB,OAAOnE,EAAOoE,KAAKsuD,KAK3C/gD,EAAArP,UAAA+xD,YAAA,SAAYr0D,GACV,OAAQK,KAAKoT,MACX,QACA,QAAoBvI,QAAO,GAC3B,QAAS,OAAOlL,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK07C,KAAY,OAAO/7C,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,KAKzCwN,EAAArP,UAAAgyD,eAAA,SAAet0D,GACb,OAAQK,KAAKoT,MACX,QACA,QAAoBvI,QAAO,GAC3B,QAAS,OAAOlL,EAAOyD,KAAK,GAC5B,OACA,OAAqB,GAAiB,IAAbpD,KAAK07C,KAAY,OAAO/7C,EAAOyD,KAAK,GAC7D,OACA,OAAmB,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,QAAmB,OAAO1D,EAAOkE,KAAK,GACtC,QAAmB,OAAOlE,EAAOmE,KAAK,KAK1CwN,EAAArP,UAAAwmB,kBAAA,WACE,OAAQzoB,KAAKoT,MAEX,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,MAAO,IAC3B,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAbpT,KAAK07C,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,IAC3B,QAAoB,MAAO,IAC3B,QAAS7wC,QAAO,GAElB,MAAO,KAMOyG,EAAApO,GAAY,IAAIoO,EAAI,EAClC,IAGmB,GAILA,EAAAnO,IAAY,IAAImO,EAAI,EAClC,IAGkB,IAIJA,EAAAlO,IAAY,IAAIkO,EAAI,EAClC,IAEkB,IAIJA,EAAAjO,IAAY,IAAIiO,EAAI,EAClC,IAGkB,IAIJA,EAAAshD,QAAgB,IAAIthD,EAAI,EACtC,IAGkB,IAIJA,EAAAqhD,QAAgB,IAAIrhD,EAAI,EACtC,IAIkB,IAIJA,EAAA/N,GAAW,IAAI+N,EAAI,EACjC,IAGmB,GAILA,EAAA9N,IAAY,IAAI8N,EAAI,EAClC,IAGkB,IAIJA,EAAA7N,IAAY,IAAI6N,EAAI,EAClC,IAEkB,IAIJA,EAAA5N,IAAY,IAAI4N,EAAI,EAClC,IAGkB,IAIJA,EAAAwhD,QAAgB,IAAIxhD,EAAI,EACtC,IAGkB,IAIJA,EAAAuhD,QAAgB,IAAIvhD,EAAI,EACtC,IAIkB,IAIJA,EAAA1N,KAAa,IAAI0N,EAAI,GACnC,IAGmB,GAILA,EAAAzN,IAAY,IAAIyN,EAAI,GAClC,IAEkB,IAIJA,EAAAxN,IAAY,IAAIwN,EAAI,GAClC,IAGkB,IAIJA,EAAAvN,KAAa,IAAIuN,EAAI,GACnC,KACiB,KAIHA,EAAAG,KAAa,IAAIH,EAAI,KAAgC,GAGrDA,EAAAyhD,KAAa,IAAIzhD,EAAKA,EAAKlO,IAAIgQ,KAAM9B,EAAKlO,IAAIqM,MAAO6B,EAAKlO,IAAIs4C,MAChFpqC,EAxbA,GAAa5R,EAAA4R,OA2bb5R,EAAAw0D,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMrpD,OACjB44C,EAAM,IAAIz8C,MAAkBmtD,GACvB/zD,EAAI,EAAGA,EAAI+zD,IAAY/zD,EAAGqjD,EAAIrjD,GAAK8zD,EAAM9zD,GAAGyzD,eACrD,OAAOpQ,GAIThkD,EAAA20D,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMrpD,OACrB,IAAKspD,EAAU,MAAO,GAEtB,IADA,IAAIjlC,EAAK,IAAIloB,MAAcmtD,GAClB/zD,EAAI,EAAGA,EAAI+zD,IAAY/zD,EAAG8uB,EAAG9uB,GAAK8zD,EAAM9zD,GAAGyd,WACpD,OAAOqR,EAAGzW,KAAK,MAIjB,IAAA+K,EAAA,WAoBE,SAAAA,EACE4D,EACA2J,EACA5J,QAFA,IAAAC,MAAA,WACA,IAAA2J,MAAA,WACA,IAAA5J,MAAA,MARFpnB,KAAAs0D,qBAA8C,KAU5Ct0D,KAAKqnB,eAAiBA,GAAkC,GACxDrnB,KAAKu0D,eAAiB,KACtBv0D,KAAKw0D,mBAAqB,EAC1Bx0D,KAAKgxB,WAAaA,GAA0B1f,EAAKG,KACjDzR,KAAKonB,SAAWA,EAChBpnB,KAAKy0D,SAAU,EACfz0D,KAAKgc,KAAO1K,EAAK7N,IAAIwjB,WAAWjnB,MAoGpC,OAjGEyjB,EAAAxhB,UAAAyyD,iBAAA,SAAiB9xC,GACf,IAAIgI,EAAS5qB,KAAKs0D,qBAGlB,OAFK1pC,EACA/f,OAAO+f,EAAOhI,SAAWA,GADjB5iB,KAAKs0D,qBAAuB1pC,EAAS,IAAIqnC,EAAA3pC,eAAetoB,KAAM4iB,GAEpEgI,GAITnH,EAAAxhB,UAAAulB,iBAAA,SAAiBvC,GACf,IAAIsvC,EAAiBv0D,KAAKu0D,eAC1B,OAAOA,GAAkBA,EAAezpD,OAASma,EAC7CsvC,EAAetvC,GACf0vC,EAAwB1vC,IAI9BxB,EAAAxhB,UAAA0oB,eAAA,SAAeC,GAIb,IAAIgqC,EAAe50D,KAAKonB,SACpBytC,EAAiBjqC,EAAOxD,SAC5B,GAAIwtC,GACF,IAAMC,IAAkBD,EAAajqC,eAAekqC,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAI70D,KAAKy0D,SAAW7pC,EAAO6pC,QAAS,OAAO,EAG3C,IAAIK,EAAqB90D,KAAKqnB,eAC1B0tC,EAAuBnqC,EAAOvD,eAC9B2tC,EAAgBF,EAAmBhqD,OACvC,GAAIkqD,GAAiBD,EAAqBjqD,OAAQ,OAAO,EACzD,IAAK,IAAIzK,EAAI,EAAGA,EAAI20D,IAAiB30D,EAAG,CACtC,IAAI40D,EAAoBH,EAAmBz0D,GACvC60D,EAAsBH,EAAqB10D,GAC/C,IAAK40D,EAAkBtqC,eAAeuqC,GAAsB,OAAO,EAIrE,IAAIC,EAAiBn1D,KAAKgxB,WACtBokC,EAAmBxqC,EAAOoG,WAC9B,OAAOmkC,GAAkBC,GAAoBD,EAAexqC,eAAeyqC,IAItE3xC,EAAA4xC,oBAAP,SAA2BhuC,EAA+B2J,EAAkB5J,QAAA,IAAAA,MAAA,MAC1E,IAAI+H,EAAK,GAGT,GAFAA,EAAG5Q,KAAKyS,EAAWvI,qBACfrB,GAAU+H,EAAG5Q,KAAK6I,EAASqB,qBAC3BpB,EACF,IAAK,IAAIhnB,EAAI,EAAGyS,EAAIuU,EAAevc,OAAQzK,EAAIyS,IAAKzS,EAAG8uB,EAAG5Q,KAAK8I,EAAehnB,GAAGooB,qBAEnF,MAAO,WAAa0G,EAAGzW,KAAK,KAI9B+K,EAAAxhB,UAAAwmB,kBAAA,WACE,OAAOhF,EAAU4xC,oBAAoBr1D,KAAKqnB,eAAgBrnB,KAAKgxB,WAAYhxB,KAAKonB,WAIlF3D,EAAAxhB,UAAA6b,SAAA,WACE,IAAIqR,EAAK,IAAIloB,MACbkoB,EAAG5Q,KAAK,KACR,IAAI0G,EAAQ,EACRmC,EAAWpnB,KAAKonB,SAChBA,IACF+H,EAAG5Q,KAAK,UACR1T,QAAQuc,EAASqrC,oBACjBtjC,EAAG5Q,KAAK6I,EAAStJ,YACjBmH,EAAQ,GAEV,IAAI8L,EAAa/wB,KAAKqnB,eAClB2tC,EAAgBjkC,EAAWjmB,OAC/B,GAAIkqD,EAKF,IAJA,IAAI//B,EAAQj1B,KAAKu0D,eACbtZ,EAAWhmB,EAAQA,EAAMnqB,OAAS,EAClCwqD,EAAgBt1D,KAAKw0D,mBACrBe,EAAYv1D,KAAKy0D,QAAUO,EAAgB,GAAK,EAC3C30D,EAAI,EAAGA,EAAI20D,IAAiB30D,IAAK4kB,EACpCA,GAAOkK,EAAG5Q,KAAK,MACfle,GAAKk1D,GAAWpmC,EAAG5Q,KAAK,OACxBle,EAAI46C,EAAU9rB,EAAG5Q,KAAgB0W,EAAO50B,IACvC8uB,EAAG5Q,KAAKo2C,EAAwBt0D,IACjCA,GAAKi1D,GAAiBj1D,GAAKk1D,EAAWpmC,EAAG5Q,KAAK,OAC7C4Q,EAAG5Q,KAAK,MACb4Q,EAAG5Q,KAAKwS,EAAW1wB,GAAGyd,YAK1B,OAFAqR,EAAG5Q,KAAK,SACR4Q,EAAG5Q,KAAKve,KAAKgxB,WAAWlT,YACjBqR,EAAGzW,KAAK,KAEnB+K,EAnIA,GAAa/jB,EAAA+jB,YAwIb,IAAI+xC,EAA+C,KAGnD,SAAgBb,EAAwB1vC,GACjCuwC,IAA6BA,EAA8B,IAChE,IAAK,IAAIn1D,EAAIm1D,EAA4B1qD,OAAQzK,GAAK4kB,IAAS5kB,EAC7Dm1D,EAA4Bj3C,KAAK,OAASle,EAAEyd,SAAS,KAEvD,OAAO03C,EAA4BvwC,EAAQ,GAL7CvlB,EAAAi1D,ybC/qBA,IAuBY/kC,EAwIA6lC,EA/JZ/rD,EAAAvJ,EAAA,GAMAyJ,EAAAzJ,EAAA,GAKA0J,EAAA1J,EAAA,GA0JA,SAAgBu1D,EAAiB//C,GAE/B,OADA9K,OAAO8K,EAAK7K,QACJ6K,EAAKzK,WAAW,IACtB,QACE,OAAQyK,GACN,IAAK,WAAY,OAAOia,EAAMlQ,SAC9B,IAAK,KAAM,OAAOkQ,EAAM+lC,GACxB,IAAK,QAAS,OAAO/lC,EAAMgmC,MAC3B,IAAK,QAAS,OAAOhmC,EAAMimC,MAE7B,MAEF,QACE,OAAQlgD,GACN,IAAK,QAAS,OAAOia,EAAM+O,MAE7B,MAEF,QACE,OAAQhpB,GACN,IAAK,OAAQ,OAAOia,EAAMkmC,KAC1B,IAAK,QAAS,OAAOlmC,EAAMmmC,MAC3B,IAAK,QAAS,OAAOnmC,EAAMhU,MAC3B,IAAK,WAAY,OAAOgU,EAAMgP,SAC9B,IAAK,QAAS,OAAOhP,EAAMpT,MAC3B,IAAK,cAAe,OAAOoT,EAAM9P,YAEnC,MAEF,SACE,OAAQnK,GACN,IAAK,WAAY,OAAOia,EAAMomC,SAC9B,IAAK,UAAW,OAAOpmC,EAAMnN,QAC7B,IAAK,UAAW,OAAOmN,EAAMqmC,QAC7B,IAAK,SAAU,OAAOrmC,EAAMsmC,OAC5B,IAAK,KAAM,OAAOtmC,EAAMiP,GAE1B,MAEF,SACE,OAAQlpB,GACN,IAAK,OAAQ,OAAOia,EAAMumC,KAC1B,IAAK,OAAQ,OAAOvmC,EAAMvL,KAC1B,IAAK,SAAU,OAAOuL,EAAMhe,OAC5B,IAAK,UAAW,OAAOge,EAAMwmC,QAE/B,MAEF,SACE,OAAQzgD,GACN,IAAK,QAAS,OAAOia,EAAMI,MAC3B,IAAK,UAAW,OAAOJ,EAAMymC,QAC7B,IAAK,MAAO,OAAOzmC,EAAMsP,IACzB,IAAK,OAAQ,OAAOtP,EAAM0mC,KAC1B,IAAK,WAAY,OAAO1mC,EAAMlU,SAEhC,MAEF,SACE,OAAQ/F,GACN,IAAK,MAAO,OAAOia,EAAM7Q,IAE3B,MAEF,SACE,OAAQpJ,GACN,IAAK,KAAM,OAAOia,EAAMyP,GACxB,IAAK,aAAc,OAAOzP,EAAM2mC,WAChC,IAAK,SAAU,OAAO3mC,EAAMnc,OAC5B,IAAK,KAAM,OAAOmc,EAAM4mC,GACxB,IAAK,aAAc,OAAO5mC,EAAMyN,WAChC,IAAK,YAAa,OAAOzN,EAAMlG,UAC/B,IAAK,KAAM,OAAOkG,EAAM6mC,GAE1B,MAEF,SACE,OAAQ9gD,GACN,IAAK,QAAS,OAAOia,EAAM8mC,MAE7B,MAEF,SACE,OAAQ/gD,GACN,IAAK,MAAO,OAAOia,EAAM+mC,IAE3B,MAEF,SACE,OAAQhhD,GACN,IAAK,SAAU,OAAOia,EAAMgnC,OAE9B,MAEF,SACE,OAAQjhD,GACN,IAAK,YAAa,OAAOia,EAAMxL,UAC/B,IAAK,MAAO,OAAOwL,EAAM2N,IACzB,IAAK,OAAQ,OAAO3N,EAAME,KAE5B,MAEF,SACE,OAAQna,GACN,IAAK,KAAM,OAAOia,EAAMinC,GAE1B,MAEF,SACE,OAAQlhD,GACN,IAAK,UAAW,OAAOia,EAAMknC,QAC7B,IAAK,UAAW,OAAOlnC,EAAMmnC,QAC7B,IAAK,YAAa,OAAOnnC,EAAMonC,UAC/B,IAAK,SAAU,OAAOpnC,EAAMqnC,OAE9B,MAEF,SACE,OAAQthD,GACN,IAAK,WAAY,OAAOia,EAAMtQ,SAC9B,IAAK,SAAU,OAAOsQ,EAAM2P,OAE9B,MAEF,SACE,OAAQ5pB,GACN,IAAK,MAAO,OAAOia,EAAM5Q,IACzB,IAAK,SAAU,OAAO4Q,EAAMxQ,OAC5B,IAAK,QAAS,OAAOwQ,EAAMY,MAC3B,IAAK,SAAU,OAAOZ,EAAM6P,OAE9B,MAEF,SACE,OAAQ9pB,GACN,IAAK,OAAQ,OAAOia,EAAM+N,KAC1B,IAAK,QAAS,OAAO/N,EAAM8P,MAC3B,IAAK,OAAQ,OAAO9P,EAAMG,KAC1B,IAAK,MAAO,OAAOH,EAAM+P,IACzB,IAAK,OAAQ,OAAO/P,EAAMsnC,KAC1B,IAAK,SAAU,OAAOtnC,EAAMunC,OAE9B,MAEF,SACE,OAAQxhD,GACN,IAAK,MAAO,OAAOia,EAAMwnC,IACzB,IAAK,OAAQ,OAAOxnC,EAAMiQ,KAE5B,MAEF,SACE,OAAQlqB,GACN,IAAK,QAAS,OAAOia,EAAMkQ,MAC3B,IAAK,OAAQ,OAAOlQ,EAAMynC,KAE5B,MAEF,SACE,OAAQ1hD,GACN,IAAK,QAAS,OAAOia,EAAM0nC,OAKjC,OAAO1nC,EAAMziB,QAGf,SAAgBoqD,EAAsBC,GACpC,OAAQA,GACN,KAAK5nC,EAAMlQ,SACX,KAAKkQ,EAAM+lC,GACX,KAAK/lC,EAAM9P,YACX,KAAK8P,EAAMnN,QACX,KAAKmN,EAAMsmC,OACX,KAAKtmC,EAAM0mC,KACX,KAAK1mC,EAAMsP,IACX,KAAKtP,EAAM7Q,IACX,KAAK6Q,EAAMyN,WACX,KAAKzN,EAAM6mC,GACX,KAAK7mC,EAAM8mC,MACX,KAAK9mC,EAAMgnC,OACX,KAAKhnC,EAAMxL,UACX,KAAKwL,EAAME,KACX,KAAKF,EAAMtQ,SACX,KAAKsQ,EAAM5Q,IACX,KAAK4Q,EAAMsnC,KACX,KAAKtnC,EAAMiQ,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYjQ,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAlwB,EAAAkwB,QAAAlwB,EAAAkwB,MAAK,KAwIjB,SAAY6lC,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA/1D,EAAA+1D,qBAAA/1D,EAAA+1D,mBAAkB,KAM9B/1D,EAAAg2D,mBAwKAh2D,EAAA63D,wBAwBA73D,EAAA+3D,4BAAA,SAA4C72D,GAE1C,OADAiK,OAAOjK,EAAKkK,QACJlK,EAAKsK,WAAW,IACtB,SAAiB,MAAe,UAARtK,EACxB,SAAiB,MAAe,OAARA,EACxB,SAAiB,MAAe,cAARA,EACxB,SAAiB,MAAe,QAARA,EACxB,SAAiB,MAAe,QAARA,EAE1B,OAAO,GAGTlB,EAAAg4D,sBAAA,SAAsCF,GACpC,OAAQA,GACN,KAAK5nC,EAAMsmC,OAAQ,MAAO,SAC1B,KAAKtmC,EAAM4mC,GAAI,MAAO,KACtB,KAAK5mC,EAAMyN,WAAY,MAAO,aAC9B,KAAKzN,EAAM2N,IAAK,MAAO,MACvB,KAAK3N,EAAMunC,OAAQ,MAAO,SAC1B,KAAKvnC,EAAMiQ,KAAM,MAAO,OACxB,KAAKjQ,EAAM0nC,MAAO,MAAO,QACzB,KAAK1nC,EAAM+nC,YAAa,MAAO,MAC/B,KAAK/nC,EAAMuN,MAAO,MAAO,IACzB,KAAKvN,EAAMgoC,SAAU,MAAO,IAC5B,KAAKhoC,EAAMioC,YAAa,MAAO,IAC/B,KAAKjoC,EAAMkoC,gBAAiB,MAAO,KACnC,KAAKloC,EAAMmoC,mBAAoB,MAAO,KACtC,KAAKnoC,EAAMooC,cAAe,MAAO,KACjC,KAAKpoC,EAAMqoC,mBAAoB,MAAO,KACtC,KAAKroC,EAAMsoC,qBAAsB,MAAO,MACxC,KAAKtoC,EAAMuoC,0BAA2B,MAAO,MAC7C,KAAKvoC,EAAMljB,KAAM,MAAO,IACxB,KAAKkjB,EAAMhjB,MAAO,MAAO,IACzB,KAAKgjB,EAAMwoC,kBAAmB,MAAO,KACrC,KAAKxoC,EAAMyoC,SAAU,MAAO,IAC5B,KAAKzoC,EAAM0oC,MAAO,MAAO,IACzB,KAAK1oC,EAAM2oC,QAAS,MAAO,IAC3B,KAAK3oC,EAAM4oC,UAAW,MAAO,KAC7B,KAAK5oC,EAAM6oC,YAAa,MAAO,KAC/B,KAAK7oC,EAAM8oC,kBAAmB,MAAO,KACrC,KAAK9oC,EAAM+oC,wBAAyB,MAAO,KAC3C,KAAK/oC,EAAMgpC,oCAAqC,MAAO,MACvD,KAAKhpC,EAAMipC,UAAW,MAAO,IAC7B,KAAKjpC,EAAMkpC,IAAK,MAAO,IACvB,KAAKlpC,EAAMmpC,MAAO,MAAO,IACzB,KAAKnpC,EAAMopC,YAAa,MAAO,IAC/B,KAAKppC,EAAMqpC,MAAO,MAAO,IACzB,KAAKrpC,EAAMspC,oBAAqB,MAAO,KACvC,KAAKtpC,EAAMupC,QAAS,MAAO,KAC3B,KAAKvpC,EAAMwpC,OAAQ,MAAO,IAC1B,KAAKxpC,EAAMypC,YAAa,MAAO,KAC/B,KAAKzpC,EAAM0pC,aAAc,MAAO,KAChC,KAAK1pC,EAAM2pC,gBAAiB,MAAO,KACnC,KAAK3pC,EAAM4pC,yBAA0B,MAAO,MAC5C,KAAK5pC,EAAM6pC,aAAc,MAAO,KAChC,KAAK7pC,EAAM8pC,eAAgB,MAAO,KAClC,KAAK9pC,EAAM+pC,yBAA0B,MAAO,MAC5C,KAAK/pC,EAAMgqC,+BAAgC,MAAO,MAClD,KAAKhqC,EAAMiqC,2CAA4C,MAAO,OAC9D,KAAKjqC,EAAMkqC,iBAAkB,MAAO,KACpC,KAAKlqC,EAAMmqC,WAAY,MAAO,KAC9B,KAAKnqC,EAAMoqC,aAAc,MAAO,KAChC,QAEE,OADAnvD,QAAO,GACA,KAKb,IAAA4N,EAAA,WAUE,SAAAA,EAAY1F,EAAgBic,EAAYC,GA6CxCjvB,KAAAkoB,aAAsB,EA5CpBloB,KAAK+S,OAASA,EACd/S,KAAKgvB,MAAQA,EACbhvB,KAAKivB,IAAMA,EA2Cf,OAxCSxW,EAAAC,KAAP,SAAYuhD,EAAUC,GACpB,GAAID,EAAElnD,QAAUmnD,EAAEnnD,OAAQ,MAAM,IAAIoG,MAAM,mBAC1C,OAAO,IAAIV,EAAMwhD,EAAElnD,OACjBknD,EAAEjrC,MAAQkrC,EAAElrC,MAAQirC,EAAEjrC,MAAQkrC,EAAElrC,MAChCirC,EAAEhrC,IAAMirC,EAAEjrC,IAAMgrC,EAAEhrC,IAAMirC,EAAEjrC,MAI9BluB,OAAAC,eAAIyX,EAAAxW,UAAA,UAAO,KAAX,WACE,OAAO,IAAIwW,EAAMzY,KAAK+S,OAAQ/S,KAAKgvB,MAAOhvB,KAAKgvB,wCAGjDjuB,OAAAC,eAAIyX,EAAAxW,UAAA,QAAK,KAAT,WACE,OAAO,IAAIwW,EAAMzY,KAAK+S,OAAQ/S,KAAKivB,IAAKjvB,KAAKivB,sCAG/CluB,OAAAC,eAAIyX,EAAAxW,UAAA,OAAI,KAAR,WAGE,IAFA,IAAI0T,EAAO3V,KAAK+S,OAAO4C,KACnByS,EAAO,EACFgW,EAAMp+B,KAAKgvB,MAAOoP,GAAO,IAAKA,EACb,IAApBzoB,EAAKzK,WAAWkzB,IAA2BhW,IAEjD,OAAOA,mCAGTrnB,OAAAC,eAAIyX,EAAAxW,UAAA,SAAM,KAAV,WAGE,IAFA,IAAI0T,EAAO3V,KAAK+S,OAAO4C,KACnB0S,EAAS,EACJ+V,EAAMp+B,KAAKgvB,MAAQ,EAAGoP,GAAO,GACZ,IAApBzoB,EAAKzK,WAAWkzB,KADqBA,IAEvC/V,EAEJ,OAAOA,mCAGT5P,EAAAxW,UAAA6b,SAAA,WACE,OAAO9d,KAAK+S,OAAO4C,KAAK+L,UAAU1hB,KAAKgvB,MAAOhvB,KAAKivB,MAIvDxW,EAxDA,GAAa/Y,EAAA+Y,QAgEb,IAAA0hD,EAAA,SAAA5sD,GAgBE,SAAA4sD,EAAYpnD,EAAgBvF,QAAA,IAAAA,MAAA,MAA5B,IAAAC,EACEF,EAAA/M,KAAAR,KAAMwN,IAAYxN,KAdpByN,EAAAwhB,IAAW,EAEXxhB,EAAA2wB,IAAW,EACX3wB,EAAA+pD,OAAgB,EAChB/pD,EAAA2sD,SAAgB,EAEhB3sD,EAAA4sD,WAAoB,EACpB5sD,EAAA6sD,aAAoB,EACpB7sD,EAAA8sD,oBAA2B,EAE3B9sD,EAAA+sD,UAAmC,KAMjC/sD,EAAKsF,OAASA,EACdtF,EAAK2wB,IAAM,EACX3wB,EAAKwhB,IAAMlc,EAAO4C,KAAK7K,OACvB2C,EAAKD,YAAcA,GAAe,IAAIvG,MAEtC,IAAIgoB,EAAMxhB,EAAKwhB,IACXtZ,EAAO5C,EAAO4C,KAWlB,GAPElI,EAAK2wB,IAAMnP,GACc,OAAzBtZ,EAAKzK,WAAWuC,EAAK2wB,QAEnB3wB,EAAK2wB,IAKP3wB,EAAK2wB,IAAM,EAAInP,GACU,IAAzBtZ,EAAKzK,WAAWuC,EAAK2wB,MACQ,IAA7BzoB,EAAKzK,WAAWuC,EAAK2wB,IAAM,GAG3B,IADA3wB,EAAK2wB,KAAO,EAEV3wB,EAAK2wB,IAAMnP,GACc,IAAzBtZ,EAAKzK,WAAWuC,EAAK2wB,QAEnB3wB,EAAK2wB,aA8iCf,OA5lC+BtvB,EAAAqrD,EAAA5sD,GAoD7B4sD,EAAAl4D,UAAA2S,KAAA,SAAK6lD,GAEH,YAFG,IAAAA,MAAyChF,EAAmBQ,SAC/Dj2D,KAAKq6D,WAAa,EACXr6D,KAAKw3D,MAAQx3D,KAAK06D,WAAWD,IAG9BN,EAAAl4D,UAAAy4D,WAAR,SACED,EACAE,QADA,IAAAF,MAAyChF,EAAmBQ,cAC5D,IAAA0E,MAAsBv3D,IAAIqhD,WAI1B,IAFA,IAAIx1B,EAAMjvB,KAAKivB,IACXtZ,EAAO3V,KAAK+S,OAAO4C,KAChB3V,KAAKo+B,IAAMnP,GAAK,CACrBjvB,KAAKo6D,SAAWp6D,KAAKo+B,IACrB,IAAI19B,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,KAC7B,OAAQ19B,GACN,QACE,OACIV,KAAKo+B,IAAMnP,GACY,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,MACpB,MAGL,QACA,OACA,QACA,QACA,UACIp+B,KAAKo+B,IACP,MAEF,QAEE,QADEp+B,KAAKo+B,IAELu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,GACR,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IAELu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,GACR,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAMuoC,2BAERvoC,EAAMqoC,oBAERroC,EAAMopC,YAEf,QACA,QACA,QACE,OAAOppC,EAAMgrC,cAEf,QAEE,QADE56D,KAAKo+B,IAELu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,GACR,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAM8pC,gBAER9pC,EAAM2oC,QAEf,QAEE,KADEv4D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IACAxO,EAAMspC,oBAEf,GAAO,IAAH2B,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMkqC,iBAGjB,OAAOlqC,EAAMipC,UAEf,QAEE,QADE74D,KAAKo+B,IACAxO,EAAMkrC,UAEf,QAEE,QADE96D,KAAKo+B,IACAxO,EAAMmrC,WAEf,QAEE,KADE/6D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IACAxO,EAAM2pC,gBAEf,GAAO,IAAHsB,EAEF,QADE76D,KAAKo+B,IAELu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,GACR,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAM4pC,0BAER5pC,EAAMwoC,kBAGjB,OAAOxoC,EAAMyoC,SAEf,QAEE,KADEr4D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IACAxO,EAAM4oC,UAEf,GAAO,IAAHqC,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMypC,YAGjB,OAAOzpC,EAAMljB,KAEf,QAEE,QADE1M,KAAKo+B,IACAxO,EAAMuN,MAEf,QAEE,KADEn9B,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IACAxO,EAAM6oC,YAEf,GAAO,IAAHoC,EAEF,QADE76D,KAAKo+B,IACAxO,EAAM0pC,aAGjB,OAAO1pC,EAAMhjB,MAEf,QAEE,KADE5M,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CACxC,IAAI4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,KAC/B,GAAIv0B,EAAAmxD,eAAeH,GAEjB,QADE76D,KAAKo+B,IACAxO,EAAMqrC,aAEf,GACEN,EAAiB,GAAK36D,KAAKo+B,IAAM,EAAInP,GAClC,IAAH4rC,GAC6B,IAA7BllD,EAAKzK,WAAWlL,KAAKo+B,IAAM,GAG3B,OADAp+B,KAAKo+B,KAAO,EACLxO,EAAM+nC,YAGjB,OAAO/nC,EAAMsrC,IAEf,QACE,IAAIC,EAAkBn7D,KAAKo+B,IAE3B,KADEp+B,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MACJ,CACzB,IAAInM,EAAcroB,EAAA+yB,YAAYy+B,KAQ9B,IANEp7D,KAAKo+B,IAAM,EAAInP,GACc,IAA7BtZ,EAAKzK,WAAWlL,KAAKo+B,IAAM,OAEzBp+B,KAAKo+B,IACPnM,EAAcroB,EAAA+yB,YAAY0+B,UAEnBr7D,KAAKo+B,IAAMnP,GAClB,GAA6B,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,KAA2B,GAChDp+B,KAAKo+B,IACP,MAGAp+B,KAAKw6D,WACPx6D,KAAKw6D,UACHvoC,EACAtc,EAAK+L,UAAUy5C,EAAiBn7D,KAAKo+B,KACrCp+B,KAAK2P,MAAMwrD,EAAiBn7D,KAAKo+B,MAGrC,MAEF,GAAO,IAAHy8B,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJt7D,KAAKo+B,IAAMnP,GAElB,GACG,KAFHvuB,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,OAGvBp+B,KAAKo+B,IAAM,EAAInP,GACc,IAA7BtZ,EAAKzK,WAAWlL,KAAKo+B,IAAM,GAC3B,CACAp+B,KAAKo+B,KAAO,EACZk9B,GAAS,EACT,MAGCA,EAKMt7D,KAAKw6D,WACdx6D,KAAKw6D,UACH5wD,EAAA+yB,YAAY+B,MACZ/oB,EAAK+L,UAAUy5C,EAAiBn7D,KAAKo+B,KACrCp+B,KAAK2P,MAAMwrD,EAAiBn7D,KAAKo+B,MARnCp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACfv7D,KAAK2P,MAAM3P,KAAKo+B,KAAM,MAS1B,MAEF,GAAO,IAAHy8B,EAEF,QADE76D,KAAKo+B,IACAxO,EAAM6pC,aAGjB,OAAO7pC,EAAM0oC,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOt4D,KAAKw7D,cACR5rC,EAAM6rC,eACN7rC,EAAMqrC,aAEZ,QAEE,QADEj7D,KAAKo+B,IACAxO,EAAM8rC,MAEf,QAEE,QADE17D,KAAKo+B,IACAxO,EAAM+rC,UAEf,QAEE,KADE37D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IAELu8B,EAAiB,GACjB36D,KAAKo+B,IAAMnP,GACc,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAM+pC,0BAER/pC,EAAM8oC,kBAEf,GAAO,IAAHmC,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMkoC,gBAGjB,OAAOloC,EAAMgoC,SAEf,QAEE,KADE53D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IAELu8B,EAAiB,GACjB36D,KAAKo+B,IAAMnP,GACc,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAMsoC,sBAERtoC,EAAMooC,cAEf,GAAO,IAAH6C,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMgsC,mBAGjB,OAAOhsC,EAAMwpC,OAEf,QAEE,KADEp5D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MACE,CAE/B,KADEp+B,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,KADP4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAGzB,QADEp+B,KAAKo+B,IAELu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,GACR,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAMiqC,4CAERjqC,EAAMgpC,oCAEf,GAAO,IAAHiC,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMgqC,+BAGjB,OAAOhqC,EAAM+oC,wBAEf,GAAO,IAAHkC,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMmoC,mBAGjB,OAAOnoC,EAAMioC,YAEf,QAEE,QADE73D,KAAKo+B,IACAxO,EAAMisC,SAEf,QAEE,QADE77D,KAAKo+B,IACAxO,EAAMksC,YAEf,QAEE,QADE97D,KAAKo+B,IACAxO,EAAMmsC,aAEf,QAEE,QADE/7D,KAAKo+B,IAELu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,GACR,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAxO,EAAMoqC,cAERpqC,EAAMmpC,MAEf,SAEE,QADE/4D,KAAKo+B,IACAxO,EAAMosC,UAEf,SAEE,KADEh8D,KAAKo+B,IACHu8B,EAAiB,GAAK36D,KAAKo+B,IAAMnP,EAAK,CAExC,GAAO,MADH4rC,EAAMllD,EAAKzK,WAAWlL,KAAKo+B,MAG7B,QADEp+B,KAAKo+B,IACAxO,EAAMupC,QAEf,GAAO,IAAH0B,EAEF,QADE76D,KAAKo+B,IACAxO,EAAMmqC,WAGjB,OAAOnqC,EAAMkpC,IAEf,SAEE,QADE94D,KAAKo+B,IACAxO,EAAMqsC,WAEf,SAEE,QADEj8D,KAAKo+B,IACAxO,EAAMqpC,MAEf,QAEE,QADEj5D,KAAKo+B,IACAxO,EAAMssC,GAEf,QACE,GAAIryD,EAAAsyD,kBAAkBz7D,GAAI,CACxB,GAAImJ,EAAAuyD,mBAAmB17D,GAAI,CAEzB,IADA,IAAI27D,EAAYr8D,KAAKo+B,MAEjBp+B,KAAKo+B,IAAMnP,GACbplB,EAAAyyD,iBAAiB57D,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,OAE1C,IAAKv0B,EAAAuyD,mBAAmB17D,GAEtB,OADAV,KAAKo+B,IAAMi+B,EACJzsC,EAAMM,WAGjB,IACIqsC,EAAe7G,EADD//C,EAAK+L,UAAU26C,EAAWr8D,KAAKo+B,MAEjD,GACEm+B,IAAiB3sC,EAAMziB,SACvBstD,IAAuBhF,EAAmB+G,SAExC/B,IAAuBhF,EAAmBgH,SAC1ClF,EAAsBgF,IAGxB,OAAOA,EAETv8D,KAAKo+B,IAAMi+B,EAEb,OAAOzsC,EAAMM,WACR,GAAIrmB,EAAA6yD,aAAah8D,GAAI,GACxBV,KAAKo+B,IACP,MAOF,OALAp+B,KAAKqV,MACH3L,EAAA4L,eAAeqnD,kBACf38D,KAAK2P,MAAM3P,KAAKo+B,IAAKp+B,KAAKo+B,IAAM,MAEhCp+B,KAAKo+B,IACAxO,EAAMziB,SAInB,OAAOyiB,EAAMgtC,WAGfzC,EAAAl4D,UAAA46D,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyChF,EAAmBQ,cAC5D,IAAA8G,MAAyB35D,IAAIqhD,WAE7B,IAAI9uC,EAAO3V,KAAK+S,OAAO4C,KACvB,GAAI3V,KAAKq6D,UAAY,EAAG,CACtB,IAAIgC,EAAYr8D,KAAKo+B,IACjB4+B,EAAch9D,KAAKw3D,MACnByF,EAAiBj9D,KAAKo6D,SAG1B,GAFAp6D,KAAKq6D,UAAYr6D,KAAK06D,WAAWD,EAAoBsC,GACrD/8D,KAAKs6D,aAAet6D,KAAKo6D,SACrB0C,EAAgB,CAClB98D,KAAKu6D,oBAAqB,EAC1B,IAAK,IAAIn8B,EAAMi+B,EAAWptC,EAAMjvB,KAAKs6D,aAAcl8B,EAAMnP,IAAOmP,EAC9D,GAAIv0B,EAAAqlB,YAAYvZ,EAAKzK,WAAWkzB,IAAO,CACrCp+B,KAAKu6D,oBAAqB,EAC1B,OAINv6D,KAAKo+B,IAAMi+B,EACXr8D,KAAKw3D,MAAQwF,EACbh9D,KAAKo6D,SAAW6C,EAElB,OAAOj9D,KAAKq6D,WAGdF,EAAAl4D,UAAAi7D,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyChF,EAAmBgH,QAClEz8D,KAAKm9D,KAAKvtC,EAAMM,WAAYuqC,IAGrCN,EAAAl4D,UAAAk7D,KAAA,SAAK3F,EAAciD,QAAA,IAAAA,MAAyChF,EAAmBQ,SAC7E,IAAIoG,EAAYr8D,KAAKo+B,IACjB4+B,EAAch9D,KAAKw3D,MACnByF,EAAiBj9D,KAAKo6D,SACtB2C,EAAoB35D,IAAIqhD,UAC5B,OAAQ+S,GACN,KAAK5nC,EAAMioC,YACTkF,EAAoB,EAKxB,OADA/8D,KAAKw3D,MAAQx3D,KAAK06D,WAAWD,EAAoBsC,GAC7C/8D,KAAKw3D,OAASA,GAChBx3D,KAAKq6D,WAAa,GACX,IAEPr6D,KAAKo+B,IAAMi+B,EACXr8D,KAAKw3D,MAAQwF,EACbh9D,KAAKo6D,SAAW6C,GACT,IAIX9C,EAAAl4D,UAAAm7D,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMj/B,IAAMp+B,KAAKo+B,IACjBi/B,EAAM7F,MAAQx3D,KAAKw3D,MACnB6F,EAAMjD,SAAWp6D,KAAKo6D,SACfiD,GAGTlD,EAAAl4D,UAAAu7D,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAl4D,UAAAw7D,MAAA,SAAMJ,GACJr9D,KAAKo+B,IAAMi/B,EAAMj/B,IACjBp+B,KAAKw3D,MAAQ6F,EAAM7F,MACnBx3D,KAAKo6D,SAAWiD,EAAMjD,SACtBp6D,KAAKq6D,WAAa,GAGpBF,EAAAl4D,UAAA0N,MAAA,SAAMqf,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQhvB,KAAKo6D,SACbnrC,EAAMjvB,KAAKo+B,KACFnP,EAAM,IACfA,EAAMD,GAED,IAAIvW,EAAMzY,KAAK+S,OAAQic,EAAOC,IAGvCkrC,EAAAl4D,UAAAy7D,eAAA,WAIE,IAHA,IAAI/nD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACbnP,EAAMjvB,KAAKivB,MAEXjvB,KAAKo+B,IAAMnP,GACbplB,EAAAyyD,iBAAiB3mD,EAAKzK,WAAWlL,KAAKo+B,QAExC,OAAOzoB,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,MAGpC+7B,EAAAl4D,UAAA6hD,WAAA,WAME,IALA,IAAInuC,EAAO3V,KAAK+S,OAAO4C,KACnBgoD,EAAQhoD,EAAKzK,WAAWlL,KAAKo+B,OAC7BpP,EAAQhvB,KAAKo+B,IACbnP,EAAMjvB,KAAKivB,IACX6mB,EAAS,KACA,CACX,GAAI91C,KAAKo+B,KAAOnP,EAAK,CACnB6mB,GAAUngC,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,KACrCp+B,KAAKqV,MACH3L,EAAA4L,eAAesoD,4BACf59D,KAAK2P,MAAMqf,EAAQ,EAAGC,IAExB,MAEF,IAAIvuB,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,KAC7B,GAAI19B,GAAKi9D,EAAO,CACd7nB,GAAUngC,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,OACrC,MAEF,GAAK,IAAD19B,EAAJ,CAMA,GAAImJ,EAAAqlB,YAAYxuB,IAAW,IAALi9D,EAA4B,CAChD7nB,GAAUngC,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,KACrCp+B,KAAKqV,MACH3L,EAAA4L,eAAesoD,4BACf59D,KAAK2P,MAAMqf,EAAQ,EAAGhvB,KAAKo+B,MAE7B,QAEAp+B,KAAKo+B,SAbL0X,GAAUngC,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,KACrC0X,GAAU91C,KAAK69D,qBACf7uC,EAAQhvB,KAAKo+B,IAajB,OAAO0X,GAGTqkB,EAAAl4D,UAAA47D,mBAAA,WACE,IAAI5uC,EAAMjvB,KAAKivB,IACf,KAAMjvB,KAAKo+B,KAAOnP,EAKhB,OAJAjvB,KAAKqV,MACH3L,EAAA4L,eAAewoD,uBACf99D,KAAK2P,MAAMsf,IAEN,GAGT,IAAItZ,EAAO3V,KAAK+S,OAAO4C,KACnBjV,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,OAC7B,OAAQ19B,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKo+B,IAAMnP,GACc,KAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IACAp+B,KAAK+9D,6BAEP/9D,KAAKg+D,oBAEd,QAEIh+D,KAAKo+B,IAAMnP,GACc,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,QAEnBp+B,KAAKo+B,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOp3B,OAAOi3D,aAAav9D,KAIxCy5D,EAAAl4D,UAAAi8D,kBAAA,WAKE,IAJA,IAAIvoD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACbnP,EAAMjvB,KAAKivB,IACXkvC,GAAU,IACD,CACX,GAAIn+D,KAAKo+B,KAAOnP,EAAK,CACnBjvB,KAAKqV,MACH3L,EAAA4L,eAAe8oD,wCACfp+D,KAAK2P,MAAMqf,EAAOC,IAEpB,MAEF,GAA6B,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,KAAzB,CAKA,IAAI19B,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,KAC7B,IAAK+/B,GAAY,IAADz9D,EAAqB,MACrC,GAAImJ,EAAAqlB,YAAYxuB,GAAI,CAClBV,KAAKqV,MACH3L,EAAA4L,eAAe8oD,wCACfp+D,KAAK2P,MAAMqf,EAAOhvB,KAAKo+B,MAEzB,QAEAp+B,KAAKo+B,IACP+/B,GAAU,QAdNn+D,KAAKo+B,IACP+/B,GAAU,EAed,OAAOxoD,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,MAGpC+7B,EAAAl4D,UAAAo8D,gBAAA,WAKE,IAJA,IAAI1oD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACbnP,EAAMjvB,KAAKivB,IACXxf,EAAQ,EACLzP,KAAKo+B,IAAMnP,GAAK,CACrB,IAAIvuB,EAASiV,EAAKzK,WAAWlL,KAAKo+B,KAClC,IAAKv0B,EAAAyyD,iBAAiB57D,GAAI,MAI1B,SAHEV,KAAKo+B,IAGC19B,GACN,SACE+O,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFzP,KAAKqV,MACH3L,EAAA4L,eAAegpD,iCACft+D,KAAK2P,MAAMqf,EAAOhvB,KAAKo+B,MAGpBzoB,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,MAGpC+7B,EAAAl4D,UAAAu5D,YAAA,WACE,IAAIvsC,EAAMjvB,KAAKivB,IACXtZ,EAAO3V,KAAK+S,OAAO4C,KACvB,GAAI3V,KAAKo+B,IAAM,EAAInP,GAAgC,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,KAC7C,OAAQzoB,EAAKzK,WAAWlL,KAAKo+B,IAAM,IACjC,SACA,QACA,QACA,QACA,SACA,QAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMp+B,KAAKo+B,IACRA,EAAMnP,GAAK,CAChB,IAAIvuB,EAAIiV,EAAKzK,WAAWkzB,GACxB,GAAK,IAAD19B,GAAsB,KAADA,GAAoB,IAADA,EAAiB,OAAO,EACpE,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7D09B,IAEF,OAAO,GAGT+7B,EAAAl4D,UAAAs8D,YAAA,WACE,IAAI5oD,EAAO3V,KAAK+S,OAAO4C,KACvB,GAAI3V,KAAKo+B,IAAM,EAAIp+B,KAAKivB,KAAgC,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,KAAqB,CACvE,OAAQzoB,EAAKzK,WAAWlL,KAAKo+B,IAAM,IACjC,SACA,QAEE,OADAp+B,KAAKo+B,KAAO,EACLp+B,KAAKw+D,iBAEd,QACA,QAEE,OADAx+D,KAAKo+B,KAAO,EACLp+B,KAAKy+D,oBAEd,SACA,QAEE,OADAz+D,KAAKo+B,KAAO,EACLp+B,KAAK0+D,mBAGhB,GAAI70D,EAAA80D,aAAahpD,EAAKzK,WAAWlL,KAAKo+B,IAAM,IAAK,CAC/C,IAAIpP,EAAQhvB,KAAKo+B,MACfp+B,KAAKo+B,IACP,IAAI98B,EAAQtB,KAAK0+D,mBAKjB,OAJA1+D,KAAKqV,MACH3L,EAAA4L,eAAespD,8CACf5+D,KAAK2P,MAAMqf,EAAOhvB,KAAKo+B,MAElB98B,GAGX,OAAOtB,KAAK6+D,sBAGd1E,EAAAl4D,UAAAu8D,eAAA,WAOE,IANA,IAAI7oD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACb98B,EAAQ2Q,QAAQ,GAChB6sD,EAAQ7sD,QAAQ,GAChB8sD,EAAS/vC,EACTC,EAAMjvB,KAAKivB,IACRjvB,KAAKo+B,IAAMnP,GAAK,CACrB,IAAImP,EAAMp+B,KAAKo+B,IACX19B,EAAIiV,EAAKzK,WAAWkzB,GACxB,GAAI19B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ09D,QACNC,QAAQ39D,EAAOw9D,GACf7sD,QAAQvR,EAAC,UAEL,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQ09D,QACNC,QAAQ39D,EAAOw9D,GACf7sD,QAAQ,GAAKvR,EAAC,UAEX,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQ09D,QACNC,QAAQ39D,EAAOw9D,GACf7sD,QAAQ,GAAKvR,EAAC,SAEX,IAAK,IAADA,EAWT,MAVIq+D,GAAU3gC,GACZp+B,KAAKqV,MACH0pD,GAAU/vC,EACNtlB,EAAA4L,eAAe4pD,wCACfx1D,EAAA4L,eAAe6pD,0DACnBn/D,KAAK2P,MAAMyuB,IAGf2gC,EAAS3gC,EAAM,EAIjBp+B,KAAKo+B,IAAMA,EAAM,EAanB,OAXIp+B,KAAKo+B,KAAOpP,EACdhvB,KAAKqV,MACH3L,EAAA4L,eAAe8pD,2BACfp/D,KAAK2P,MAAMqf,IAEJ+vC,GAAU/+D,KAAKo+B,KACxBp+B,KAAKqV,MACH3L,EAAA4L,eAAe4pD,wCACfl/D,KAAK2P,MAAMovD,EAAS,IAGjBz9D,GAGT64D,EAAAl4D,UAAA48D,mBAAA,WAOE,IANA,IAAIlpD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACbnP,EAAMjvB,KAAKivB,IACX3tB,EAAQ2Q,QAAQ,GAChBotD,EAASptD,QAAQ,IACjB8sD,EAAS/vC,EACNhvB,KAAKo+B,IAAMnP,GAAK,CACrB,IAAImP,EAAMp+B,KAAKo+B,IACX19B,EAAIiV,EAAKzK,WAAWkzB,GACxB,GAAI19B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ09D,QACNM,QAAQh+D,EAAO+9D,GACfptD,QAAQvR,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIq+D,GAAU3gC,GACZp+B,KAAKqV,MACH0pD,GAAU/vC,EACNtlB,EAAA4L,eAAe4pD,wCACfx1D,EAAA4L,eAAe6pD,0DACnBn/D,KAAK2P,MAAMyuB,IAGf2gC,EAAS3gC,EAAM,EAIjBp+B,KAAKo+B,IAAMA,EAAM,EAanB,OAXIp+B,KAAKo+B,KAAOpP,EACdhvB,KAAKqV,MACH3L,EAAA4L,eAAeiqD,eACfv/D,KAAK2P,MAAMqf,IAEJ+vC,GAAU/+D,KAAKo+B,KACxBp+B,KAAKqV,MACH3L,EAAA4L,eAAe4pD,wCACfl/D,KAAK2P,MAAMovD,EAAS,IAGjBz9D,GAGT64D,EAAAl4D,UAAAy8D,iBAAA,WAOE,IANA,IAAI/oD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACb98B,EAAQ2Q,QAAQ,GAChButD,EAAQvtD,QAAQ,GAChB8sD,EAAS/vC,EACTC,EAAMjvB,KAAKivB,IACRjvB,KAAKo+B,IAAMnP,GAAK,CACrB,IAAImP,EAAMp+B,KAAKo+B,IACX19B,EAAIiV,EAAKzK,WAAWkzB,GACxB,GAAI19B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ09D,QACNC,QAAQ39D,EAAOk+D,GACfvtD,QAAQvR,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIq+D,GAAU3gC,GACZp+B,KAAKqV,MACH0pD,GAAU/vC,EACNtlB,EAAA4L,eAAe4pD,wCACfx1D,EAAA4L,eAAe6pD,0DACnBn/D,KAAK2P,MAAMyuB,IAGf2gC,EAAS3gC,EAAM,IAIfp+B,KAAKo+B,IAaT,OAXIp+B,KAAKo+B,KAAOpP,EACdhvB,KAAKqV,MACH3L,EAAA4L,eAAemqD,qBACfz/D,KAAK2P,MAAMqf,IAEJ+vC,GAAU/+D,KAAKo+B,KACxBp+B,KAAKqV,MACH3L,EAAA4L,eAAe4pD,wCACfl/D,KAAK2P,MAAMovD,EAAS,IAGjBz9D,GAGT64D,EAAAl4D,UAAAw8D,kBAAA,WAOE,IANA,IAAI9oD,EAAO3V,KAAK+S,OAAO4C,KACnBqZ,EAAQhvB,KAAKo+B,IACb98B,EAAQ2Q,QAAQ,GAChBytD,EAAQztD,QAAQ,GAChB8sD,EAAS/vC,EACTC,EAAMjvB,KAAKivB,IACRjvB,KAAKo+B,IAAMnP,GAAK,CACrB,IAAImP,EAAMp+B,KAAKo+B,IACX19B,EAAIiV,EAAKzK,WAAWkzB,GACxB,GAAK,IAAD19B,EAEFY,EAAQ29D,QAAQ39D,EAAOo+D,QAClB,GAAK,IAADh/D,EAETY,EAAQ09D,QACNC,QAAQ39D,EAAOo+D,GACfA,OAEG,IAAK,IAADh/D,EAWT,MAVIq+D,GAAU3gC,GACZp+B,KAAKqV,MACH0pD,GAAU/vC,EACNtlB,EAAA4L,eAAe4pD,wCACfx1D,EAAA4L,eAAe6pD,0DACnBn/D,KAAK2P,MAAMyuB,IAGf2gC,EAAS3gC,EAAM,EAIjBp+B,KAAKo+B,IAAMA,EAAM,EAanB,OAXIp+B,KAAKo+B,KAAOpP,EACdhvB,KAAKqV,MACH3L,EAAA4L,eAAeqqD,sBACf3/D,KAAK2P,MAAMqf,IAEJ+vC,GAAU/+D,KAAKo+B,KACxBp+B,KAAKqV,MACH3L,EAAA4L,eAAe4pD,wCACfl/D,KAAK2P,MAAMovD,EAAS,IAGjBz9D,GAGT64D,EAAAl4D,UAAA29D,UAAA,WAWE,OAAO5/D,KAAK6/D,oBAGd1F,EAAAl4D,UAAA49D,iBAAA,WAKE,IAHA,IAAI7wC,EAAQhvB,KAAKo+B,IACbnP,EAAMjvB,KAAKivB,IACXtZ,EAAO3V,KAAK+S,OAAO4C,KAChB3V,KAAKo+B,IAAMnP,GAAOplB,EAAAmxD,eAAerlD,EAAKzK,WAAWlL,KAAKo+B,SACzDp+B,KAAKo+B,IAET,GAAIp+B,KAAKo+B,IAAMnP,GAAgC,IAAzBtZ,EAAKzK,WAAWlL,KAAKo+B,KAEzC,MADEp+B,KAAKo+B,IACAp+B,KAAKo+B,IAAMnP,GAAOplB,EAAAmxD,eAAerlD,EAAKzK,WAAWlL,KAAKo+B,SACzDp+B,KAAKo+B,IAGX,GAAIp+B,KAAKo+B,IAAMnP,EAAK,CAClB,IAAIvuB,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,KAC7B,GAAK,KAAD19B,GAAoB,IAADA,EAQrB,OANIV,KAAKo+B,IAAMnP,GACkB,KAA9BvuB,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,OAA4B,IAAD19B,GACrDmJ,EAAAmxD,eAAerlD,EAAKzK,WAAWlL,KAAKo+B,IAAM,QAExCp+B,KAAKo+B,IAEFp+B,KAAKo+B,IAAMnP,GAAOplB,EAAAmxD,eAAerlD,EAAKzK,WAAWlL,KAAKo+B,SACzDp+B,KAAKo+B,IAIb,OAAO0hC,WAAWnqD,EAAK+L,UAAUsN,EAAOhvB,KAAKo+B,OAG/C+7B,EAAAl4D,UAAA89D,aAAA,WACE,MAAM,IAAI5mD,MAAM,oBAGlBghD,EAAAl4D,UAAA+7D,kBAAA,WAKE,IAJA,IAAIgC,EAAS,EACT1+D,EAAQ,EACR2tB,EAAMjvB,KAAKivB,IACXtZ,EAAO3V,KAAK+S,OAAO4C,KAChB3V,KAAKo+B,IAAMnP,GAAK,CACrB,IAAIvuB,EAAIiV,EAAKzK,WAAWlL,KAAKo+B,OAC7B,GAAI19B,GAAC,IAAmBA,GAAC,GACvBY,GAASA,GAAS,GAAKZ,EAAC,QACnB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKqV,MACH3L,EAAA4L,eAAe8pD,2BACfp/D,KAAK2P,MAAM3P,KAAKo+B,IAAM,EAAGp+B,KAAKo+B,MAEzB,GANP98B,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVs/D,EAAa,MAErB,OAAIA,GACFhgE,KAAKqV,MACH3L,EAAA4L,eAAewoD,uBACf99D,KAAK2P,MAAM3P,KAAKo+B,MAEX,IAEFp3B,OAAOi3D,aAAa38D,IAGrB64D,EAAAl4D,UAAA87D,0BAAR,WACE,IAAI/uC,EAAQhvB,KAAKo+B,IACb98B,EAAQtB,KAAKw+D,iBACbyB,EAAUlgB,QAAQz+C,GAClB4+D,GAAU,EAEdr1D,QAAQm1C,SAAS1+C,IACb2+D,EAAU,UACZjgE,KAAKqV,MACH3L,EAAA4L,eAAe6qD,4EACfngE,KAAK2P,MAAMqf,EAAOhvB,KAAKo+B,MAEzB8hC,GAAU,GAGZ,IAAIjxC,EAAMjvB,KAAKivB,IACXtZ,EAAO3V,KAAK+S,OAAO4C,KAiBvB,OAhBI3V,KAAKo+B,KAAOnP,GACdjvB,KAAKqV,MACH3L,EAAA4L,eAAewoD,uBACf99D,KAAK2P,MAAMqf,EAAOC,IAEpBixC,GAAU,GACwB,KAAzBvqD,EAAKzK,WAAWlL,KAAKo+B,OAC5Bp+B,KAAKo+B,KAEPp+B,KAAKqV,MACH3L,EAAA4L,eAAe8qD,qCACfpgE,KAAK2P,MAAMqf,EAAOhvB,KAAKo+B,MAEzB8hC,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbj5D,OAAOi3D,aAAagC,GACpBj5D,OAAOi3D,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B9F,EAAAl4D,UAAAo+D,OAAA,aAEFlG,EA5lCA,CAA+BzwD,EAAAgZ,mBAAlBhjB,EAAAy6D,YA+lCb,IAAAoD,EAAA,WAOA,OAPA,gBAAa79D,EAAA69D,QAUb,IAAID,EAA8B,oBC5lDlC,IAAAgD,EAGAA,EAAA,WACA,OAAAtgE,KADA,GAIA,IAEAsgE,KAAA,IAAAxvD,SAAA,iBACC,MAAAyvD,GAED,iBAAAC,SAAAF,EAAAE,QAOA7gE,EAAAD,QAAA4gE,44BCdA,IAoFYG,EApFZ/2D,EAAAvJ,EAAA,GAKA8xD,EAAA9xD,EAAA,GAuBAyJ,EAAAzJ,EAAA,GA6BAwJ,EAAAxJ,EAAA,GAQAsJ,EAAAtJ,EAAA,GAKA0J,EAAA1J,EAAA,GAKAwvB,EAAAxvB,EAAA,GAIAugE,EAAAvgE,EAAA,KAKA,SAAYsgE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAA/gE,EAAA+gE,aAAA/gE,EAAA+gE,WAAU,KAQtB,IAAA5xD,EAAA,SAAAtB,GAWE,SAAAsB,EAEE+T,GAFF,IAAAnV,EAIEF,EAAA/M,KAAAR,KAAM4iB,EAAQpV,cAAYxN,YAT5ByN,EAAAkzD,sBAA2C,KAE3ClzD,EAAAmzD,yBAA+C,KAQ7CnzD,EAAKmV,QAAUA,IAkvDnB,OAlwD8B9T,EAAAD,EAAAtB,GAoB5BsB,EAAA5M,UAAA4+D,YAAA,SAEE9uC,EAEA+uC,EAEAh7C,EAEAi7C,GAIA,QANA,IAAAj7C,MAAA,WAEA,IAAAi7C,MAAyBN,EAAWO,QAIhCjvC,EAAK3e,MAAQxJ,EAAAyJ,SAAS2oB,aAAc,CACtC,IAAI/K,EAAsCc,EAAMd,iBAC5C7J,EAAwB,KAC5B,GAAI6J,KACF7J,EAAWpnB,KAAK6gE,YACd5vC,EACA6vC,EACAh7C,EACAi7C,IAEa,OAAO,KAQxB,IANA,IAAIE,EAAoClvC,EAAMhB,WAC1CikC,EAAgBiM,EAAen2D,OAC/Buc,EAAiB,IAAIpgB,MAAY+tD,GACjCT,EAAiB,IAAIttD,MAAc+tD,GACnCR,EAAqB,EACrBC,GAAU,EACLp0D,EAAI,EAAGA,EAAI20D,IAAiB30D,EAAG,CACtC,IAAI6gE,EAAgBD,EAAe5gE,GACnC,OAAQ6gE,EAAczvC,eACpB,KAAK7nB,EAAAsyB,cAAc+5B,QACjBzB,EAAqBn0D,EAAI,EACzB,MAEF,KAAKuJ,EAAAsyB,cAAcilC,KACjBt2D,OAAOxK,GAAK20D,GACZP,GAAU,EAId,IAAI2M,EAAoBF,EAAcllD,KACtC,GAAIpS,EAAAo2B,cAAcohC,GAOhB,OANIL,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfD,EAAkBzxD,OAGf,KAET,IAAI2X,EAAgBtnB,KAAK6gE,YACvBO,EACAN,EACAh7C,EACAi7C,GAEF,IAAKz5C,EAAe,OAAO,KAC3BD,EAAehnB,GAAKinB,EACpBitC,EAAel0D,GAAK6gE,EAActgE,KAAK+U,KAEzC,IAAI2rD,EAAoCvvC,EAAMf,WAC9C,GAAIpnB,EAAAo2B,cAAcshC,GAOhB,OANIP,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfC,EAAe3xD,OAGZ,KAET,IAAIqhB,OAAU,EACd,GAAIswC,GAOF,KANAtwC,EAAahxB,KAAK6gE,YAChBS,EACAR,EACAh7C,EACAi7C,IAEe,OAAO,UAExB/vC,EAAarnB,EAAA2H,KAAKG,KAEpB,IAAId,EAAY,IAAIhH,EAAA8Z,UAAU4D,EAAgB2J,EAAY5J,GAI1D,OAHAzW,EAAU4jD,eAAiBA,EAC3B5jD,EAAU6jD,mBAAqBA,EAC/B7jD,EAAU8jD,QAAUA,EACb1iC,EAAKlB,WAAalgB,EAAUqL,KAAKq3C,aAAe1iD,EAAUqL,KAInEnR,OAAOknB,EAAK3e,MAAQxJ,EAAAyJ,SAAS0oB,WAC7B,IAAIwlC,EAA0BxvC,EAC1BpB,EAAW4wC,EAAS3gE,KACpB4gE,EAAoBD,EAAS/3C,cAC7Bi4C,GAAgB9wC,EAAS/b,KAG7B,GAAI6sD,GACE37C,GAA2BA,EAAwB5U,IAAIyf,EAAS3gB,WAAW2F,MAAO,CACpF,IAAIqG,EAAO8J,EAAwB5kB,IAAIyvB,EAAS3gB,WAAW2F,MAS3D,OAR0B,OAAtB6rD,GAA8BA,EAAkB12D,QAC9Ci2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf3vC,EAAKpiB,MAAOqM,EAAK8B,YAInBiU,EAAKlB,YACF7U,EAAKK,GAAE,MACN0kD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeqsD,gCACf5vC,EAAKpiB,MAAOqM,EAAK8B,YAIhB9B,EAAKq3C,cAEPr3C,EAKX,IAAIvG,EAAUzV,KAAKiY,gBAAgB0Y,EAAUmwC,EAASC,GACtD,IAAKtrD,EAAS,OAAO,KAGrB,GAAIA,EAAQoN,WACVpN,EAAUA,EAAQoN,eAEb,CAEL,GAAIpN,EAAQrC,MAAQ6+C,EAAA7kD,YAAYiX,KAiB9B,OAhB0B,OAAtBm9C,GAA8BA,EAAkB12D,QAC9Ci2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf3vC,EAAKpiB,MAAO8F,EAAQ9G,cAItBojB,EAAKlB,YACHkwC,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeqsD,gCACf5vC,EAAKpiB,MAAO8F,EAAQ7U,MAInB+I,EAAA2H,KAAKlO,IAId,GAAIqS,EAAQrC,MAAQ6+C,EAAA7kD,YAAY+J,gBAAiB,CAC/C,IAAIyO,EAAW5lB,KAAK4hE,8BACFnsD,EAChB+rD,EACAV,EACAj3D,EAAAg4D,QAAqB/7C,GACrBiM,GAEF,OAAKnM,EACEmM,EAAKlB,WAAajL,EAAS5J,KAAKq3C,aAAeztC,EAAS5J,KADzC,MAM1B,GAAIvG,EAAQrC,MAAQ6+C,EAAA7kD,YAAY6W,eAAgB,CAG9C,GAAIxO,EAAQ4G,GAAG5S,EAAApH,YAAYihB,UAAW,CACV,OAAtBk+C,GAA8BA,EAAkB12D,QAC9Ci2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf3vC,EAAKpiB,MAAO8F,EAAQ9G,cAI1B,IAAImzD,EAAwBrsD,EAASuG,KACrC,GAAI+V,EAAKlB,WAAY,CACnB,GAAKixC,EAAKzlD,GAAE,KAQV,OAAOylD,EAAKzO,aAPR0N,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeqsD,gCACfJ,EAAS3gE,KAAK+O,MAAOghB,EAAS3gB,WAAW2F,MAOjD,OAAOmsD,EAIT,GAAIL,EACF,OAAQ9wC,EAAS3gB,WAAWqiB,QAC1B,KAAK5oB,EAAAzG,cAAc8B,OAAQ,OAAO9E,KAAK+hE,yBAAyBR,EAAUT,EAASh7C,EAAyBi7C,GAC5G,KAAKt3D,EAAAzG,cAAc+B,QAAS,OAAO/E,KAAKgiE,0BAA0BT,EAAUT,EAASh7C,EAAyBi7C,GAC9G,KAAKt3D,EAAAzG,cAAcgC,QAAS,OAAOhF,KAAKiiE,0BAA0BV,EAAUT,EAASh7C,EAAyBi7C,GAKlH,IAAIz2C,EAAsC7U,EAAS6U,mBAEnD,GAAIA,GASF,IARgBtqB,KAAKkiE,qBACnB53C,EACAk3C,EACAV,EACAh7C,EAA0Bjc,EAAAg4D,QAAQ/7C,GAClCiM,EACAgvC,GAEkB,OAAO,UAClBS,GAAqBA,EAAkB12D,QAChD9K,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACfH,EAAS5xD,MAAOghB,EAAS3gB,WAAW2F,MAUxC,KANIqG,EAAOhc,KAAK6gE,YACGprD,EAAS8rD,SAC1B9rD,EACAqQ,EACAi7C,IAES,OAAO,KAClB,GAAIhvC,EAAKlB,WAAY,CACnB,GAAK7U,EAAKK,GAAE,KAQV,OAAOL,EAAKq3C,aAPR0N,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeqsD,gCACfJ,EAAS3gE,KAAK+O,MAAOghB,EAAS3gB,WAAW2F,MAOjD,OAAOqG,EAQT,OANI+kD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfZ,EAAS3gE,KAAK+O,MAAOghB,EAAS3gB,WAAW2F,MAGtC,MAGD9G,EAAA5M,UAAA8/D,yBAAR,SAEER,EAEAT,EAEAh7C,EAEAi7C,QAFA,IAAAj7C,MAAA,WAEA,IAAAi7C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAAS/3C,cACjC,IAAMg4C,GAAiD,GAA5BA,EAAkB12D,OAO3C,OANIi2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe8sD,oCACfb,EAAS5xD,MAAO,KAAM6xD,EAAoBA,EAAkB12D,OAAS,GAAGgT,SAAS,KAG9E,KAET,IAAIukD,EAAeriE,KAAK6gE,YAAYW,EAAkB,GAAIV,EAASh7C,EAAyBi7C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,OAAQA,EAAajvD,MACnB,OACA,OACA,OAAmB,OAAOzJ,EAAA2H,KAAKlO,IAC/B,OAAqB,IAAKpD,KAAK4iB,QAAQxR,QAAQc,SAAU,OAAOvI,EAAA2H,KAAKlO,IACrE,OAAmB,OAAOuG,EAAA2H,KAAKjO,IAC/B,OACA,OACA,OACA,QAAoB,OAAOsG,EAAA2H,KAAK7N,IAChC,OAAqB,IAAKzD,KAAK4iB,QAAQxR,QAAQc,SAAU,OAAOvI,EAAA2H,KAAK7N,IACrE,OAAmB,OAAOkG,EAAA2H,KAAK5N,IAC/B,QAAmB,OAAOiG,EAAA2H,KAAKzN,IAC/B,QAAmB,OAAO8F,EAAA2H,KAAKxN,IAC/B,QAAoB,OAAO6F,EAAA2H,KAAKvN,KAChC,QAAoB,OAAO4F,EAAA2H,KAAKG,KAChC,QAAS5G,QAAO,GAElB,OAAO,MAGDgE,EAAA5M,UAAA+/D,0BAAR,SAEET,EAEAT,EAEAh7C,EAEAi7C,QAFA,IAAAj7C,MAAA,WAEA,IAAAi7C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAAS/3C,cACjC,IAAMg4C,GAAiD,GAA5BA,EAAkB12D,OAO3C,OANIi2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe8sD,oCACfb,EAAS5xD,MAAO,KAAM6xD,EAAoBA,EAAkB12D,OAAS,GAAGgT,SAAS,KAG9E,KAET,IAAIukD,EAAeriE,KAAK6gE,YAAYW,EAAkB,GAAIV,EAASh7C,EAAyBi7C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,IAAIn2C,EAAiBm2C,EAAan2C,eAClC,IAAKA,EAOH,OANI60C,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACfd,EAAkB,GAAG7xD,MAAO0yD,EAAavkD,YAGtC,KAET,IAAIiN,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa2B,aAC1D,OAAI4f,EACEA,EAAS1O,GAAG5S,EAAApH,YAAY+c,SAC1BvU,OAAmD,GAA5CkgB,EAASpa,UAAU0W,eAAevc,QAClCigB,EAASpa,UAAU0W,eAAe,KAEzCxc,OAAmD,GAA5CkgB,EAASpa,UAAU0W,eAAevc,QAClCigB,EAASpa,UAAU0W,eAAe,KAGzC05C,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACfd,EAAkB,GAAG7xD,MAAO0yD,EAAavkD,YAGtC,OAGDjP,EAAA5M,UAAAggE,0BAAR,SAEEV,EAEAT,EAEAh7C,EAEAi7C,QAFA,IAAAj7C,MAAA,WAEA,IAAAi7C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAAS/3C,cACjC,IAAMg4C,GAAiD,GAA5BA,EAAkB12D,OAO3C,OANIi2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe8sD,oCACfb,EAAS5xD,MAAO,KAAM6xD,EAAoBA,EAAkB12D,OAAS,GAAGgT,SAAS,KAG9E,KAET,IAAIukD,EAAeriE,KAAK6gE,YAAYW,EAAkB,GAAIV,EAASh7C,EAAyBi7C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,IAAIn2C,EAAiBm2C,EAAan2C,eAClC,IAAKA,EAOH,OANI60C,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACfd,EAAkB,GAAG7xD,MAAO0yD,EAAavkD,YAGtC,KAGT,IAAIiN,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa2B,aAC1D,OAAI4f,EAAiBA,EAASpa,UAAUqgB,YACpC+vC,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACfd,EAAkB,GAAG7xD,MAAO0yD,EAAavkD,YAGtC,OAITjP,EAAA5M,UAAAgW,gBAAA,SAEE0Y,EAEAmwC,EAEAC,QAAA,IAAAA,MAAaN,EAAWO,QAExB,IAAIvrD,EAAUqrD,EAAQn9C,OAAOgN,EAAS3gB,WAAW2F,MACjD,IAAKF,EAOH,OANIsrD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfxxC,EAAShhB,MAAOghB,EAAS3gB,WAAW2F,MAGjC,KAIT,IAFA,IAAI4sD,EAAO5xC,EACP/b,EAAO+b,EAAS/b,KACbA,GAAM,CACX,KAAMa,EAAUA,EAAQgB,aAAa7B,EAAK5E,WAAW2F,OAOnD,OANIorD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACf5tD,EAAKjF,MAAOiF,EAAK5E,WAAW2F,KAAM4sD,EAAKvyD,WAAW2F,MAG/C,KAET4sD,EAAO3tD,EACPA,EAAOA,EAAKA,KAEd,OAAOa,GAIT5G,EAAA5M,UAAAigE,qBAAA,SAEE/9C,EAEAq9C,EAEAV,EAEAh7C,EAEA28C,EAEA1B,QAJA,IAAAj7C,MAA4Cjc,EAAAg4D,gBAE5C,IAAAY,MAAA,WAEA,IAAA1B,MAAyBN,EAAWO,QAIpC,IAFA,IAAI0B,EAAoB,EACpBC,EAAoB,EACftiE,EAAI,EAAGyS,EAAIqR,EAAerZ,OAAQzK,EAAIyS,IAAKzS,EAC7C8jB,EAAe9jB,GAAG+wB,eAAesxC,IACpCC,EAEJ,IAAIC,EAAgBpB,EAAoBA,EAAkB12D,OAAS,EACnE,GAAI83D,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXA3iE,KAAKqV,MACH3L,EAAA4L,eAAe8sD,oCACfQ,EACIh5D,EAAA6O,MAAMC,KACc8oD,EAAmB,GAAG7xD,MACtB6xD,EAAmBoB,EAAgB,GAAGjzD,OAE1D9E,OAAO43D,GAAuB9yD,OACjCizD,EAAgBF,EAAoBA,EAAoBC,GAAmB7kD,SAAS,IACrF8kD,EAAc9kD,SAAS,KAElB,KAET,IAAI0L,EAAgB,IAAIviB,MAAY07D,GACpC,IAAStiE,EAAI,EAAGA,EAAIsiE,IAAqBtiE,EAAG,CAC1C,IAAI2b,EAAO3b,EAAIuiE,EACX5iE,KAAK6gE,YACeW,EAAmBnhE,GACrCygE,EACAh7C,EACAi7C,GAEF/gE,KAAK6gE,YACHh2D,OAAOsZ,EAAe9jB,GAAG+wB,aACzB0vC,EACAh7C,EACAi7C,GAEN,IAAK/kD,EAAM,OAAO,KAElB8J,EAAwBpX,IAAIyV,EAAe9jB,GAAGO,KAAK+U,KAAMqG,GACzDwN,EAAcnpB,GAAK2b,EAErB,OAAOwN,GAIT3a,EAAA5M,UAAA4gE,kBAAA,SAEE7yD,EAEAyX,EAEAq5C,EAEAC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IACIvrD,EADA7U,EAAOoP,EAAW2F,KAEtB,OAAI8R,IACEhS,EAAUgS,EAAK9D,OAAO/iB,KACxBZ,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBnrD,GAGPqrD,IACErrD,EAAUqrD,EAAQn9C,OAAO/iB,KAC3BZ,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBnrD,IAGPA,EAAUzV,KAAK4iB,QAAQjM,aAAa/V,KACtCZ,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBnrD,IAELsrD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfnyD,EAAWL,MAAO/O,GAGf,OAITiO,EAAA5M,UAAA6gE,yBAAA,SAAyBxmD,EAAgBykD,GACvC,QADuC,IAAAA,MAAyBN,EAAWO,QACvE1kD,EAAOD,GAAG5S,EAAApH,YAAYihB,UAAW,OAAO,EAC5C,IAAIi+C,EAAWjlD,EAAOilD,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIvlD,EAAOhc,KAAK6gE,YACdU,EACAjlD,EAAO1L,OACP,KACAmwD,GAEF,QAAK/kD,IACLM,EAAOL,QAAQD,IACR,IAITnN,EAAA5M,UAAA8gE,gCAAA,SAEEC,EAEAv7C,EAEAw7C,EAEAlC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBF,EAAepwC,WAClChI,EAAS5qB,KAAKmjE,kBAAkBD,EAAkBz7C,EAAMw7C,EAAgBlC,GAC5E,IAAKn2C,EAAQ,OAAO,KACpB,IAAIw4C,EAAeJ,EAAehhE,SAAS2T,KAG3C,OAAQiV,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY6Q,OAAQ,IAAKje,KAAK8iE,yBAAiCl4C,EAAQm2C,GAAa,OAAO,KAChG,KAAK9O,EAAA7kD,YAAY8X,MACjB,KAAK+sC,EAAA7kD,YAAYuO,MACf,IAAIK,EAA6B4O,EAAQ5O,KAEzC,GAF+CnR,OAAOmR,GAAQrS,EAAA2H,KAAKG,QAC/Dya,EAAiBlQ,EAAKkQ,gBACL,CACnB,IAAIle,EAAchO,KAAK4iB,QAAQ5U,YAC/B,GAAKgO,EAAKK,GAAE,OAAyBrO,EAAYkD,IAAI8K,EAAK5I,MAOxD,OAJApT,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACfQ,EAAehhE,SAAS2N,MAAOyzD,EAAoCx4C,EAAQ5O,KAAK8B,YAE3E,KANPoO,EAAiBle,EAAY9M,IAAI8a,EAAK5I,MAS1CwX,EAASsB,EACT,MAEF,KAAK+lC,EAAA7kD,YAAYkO,mBAOf,KANI0N,EAAiBhpB,KAAKgb,gBACxBnQ,OAA2B+f,EAAQrP,iBACnC,KACA1R,EAAAg4D,UACAd,IAEmB,OAAO,KAE5B,KADI70C,EAAiBlD,EAAerY,UAAUqgB,WAAW9E,gBAMvD,OAJAlsB,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACfQ,EAAehhE,SAAS2N,MAAOyzD,EAAcp6C,EAAerY,UAAUqgB,WAAWlT,YAE5E,KAET8M,EAASsB,EACT,MAEF,KAAK+lC,EAAA7kD,YAAYqO,SACf,IAAIuN,EAEJ,KADIkD,GADAlD,EAAiBne,OAAkB+f,EAAQ5B,iBACXrY,UAAUqgB,WAAW9E,gBAMvD,OAJAlsB,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACfQ,EAAehhE,SAAS2N,MAAOyzD,EAAcp6C,EAAerY,UAAUqgB,WAAWlT,YAE5E,KAET8M,EAASsB,EACT,MAEF,KAAK+lC,EAAA7kD,YAAYwO,MACf,IAAIoY,EAAoBh0B,KAAK4gE,yBAC7B,GAAI5sC,EAAmB,CAGnB,IAAIqvC,EAAqBz4C,EAAQF,eAAeunC,EAAAzoD,aAAa2B,aAC7D,IAAKk4D,EAKH,OAJArjE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACftuC,EAAkBrkB,MAAeib,EAAQjc,cAEpC,KAET,IAAI20D,EAAYD,EAAW1yD,UAAUqgB,WAIvC,KADI9E,EAAiBo3C,EAAUp3C,gBACV,CACfle,EAAchO,KAAK4iB,QAAQ5U,YAC/B,GAAKs1D,EAAUjnD,GAAE,OAAyBrO,EAAYkD,IAAIoyD,EAAUlwD,MAOlE,OAJApT,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACfQ,EAAehhE,SAAS2N,MAAOyzD,EAAcE,EAAUxlD,YAElD,KANPoO,EAAiBle,EAAY9M,IAAIoiE,EAAUlwD,MAS/CwX,EAASsB,EAEX,MAEF,KAAK+lC,EAAA7kD,YAAY2N,mBACf,IAAI8H,EAAa+H,EAAO/H,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAWxG,GAAG5S,EAAApH,YAAYihB,UAAW,CACxC,IAAIigD,EAAevjE,KAAK6gE,YAAYh+C,EAAW0+C,SAAU1+C,EAAWjS,OAAQ,KAAMmwD,GAC9EwC,GAAc1gD,EAAW5G,QAAQsnD,GAEvC,IAAIr3C,KAAiBrJ,EAAW7G,KAAKkQ,kBACjBtB,EAASsB,EAAejqB,WAC5C,OAMN,OAAQ2oB,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY+J,gBACjB,KAAK86C,EAAA7kD,YAAYwO,MACf,OAAG,CAED,IADIC,EAAU+O,EAAO/O,UACNA,EAAQ3K,IAAIkyD,GAGzB,OAFApjE,KAAK2gE,sBAAwBuC,EAC7BljE,KAAK4gE,yBAA2B,KACzB/kD,EAAQ3a,IAAIkiE,GAGrB,GAAIx4C,EAAOxX,MAAQ6+C,EAAA7kD,YAAY+J,gBAAiB,CAC9C,IAAqByT,EAAQ1S,cAG3B,MAFA0S,EAA0CA,EAAQ1S,kBAK/C,IAAI0S,EAAOxX,MAAQ6+C,EAAA7kD,YAAYwO,MAOpC,MANA,IAAYgP,EAAQnB,KAGlB,MAFAmB,EAAwBA,EAAQnB,MAQtC,MAEF,QACE,IAAI5N,EACJ,IADIA,EAAU+O,EAAO/O,UACNA,EAAQ3K,IAAIkyD,GAGzB,OAFApjE,KAAK2gE,sBAAwBuC,EAC7BljE,KAAK4gE,yBAA2B,KACzB/kD,EAAQ3a,IAAIkiE,GAUzB,OAJApjE,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACfQ,EAAehhE,SAAS2N,MAAOyzD,EAAcx4C,EAAOjc,cAE/C,MAITE,EAAA5M,UAAAuhE,+BAAA,SAEEC,EAEAh8C,EAEAw7C,EAEAlC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBO,EAAc7wC,WACjChI,EAAS5qB,KAAKmjE,kBAAkBD,EAAkBz7C,EAAMw7C,EAAgBlC,GAC5E,IAAKn2C,EAAQ,OAAO,KACpB,OAAQA,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY6Q,OAAQ,IAAKje,KAAK8iE,yBAAiCl4C,EAAQm2C,GAAa,OAAO,KAChG,KAAK9O,EAAA7kD,YAAY8X,MACjB,KAAK+sC,EAAA7kD,YAAYuO,MAEf,GAAIiP,EAD6BA,EAAQ5O,KACvBkQ,eAGhB,OAFAlsB,KAAK2gE,sBAAwBuC,EAC7BljE,KAAK4gE,yBAA2B6C,EAAczvC,kBACvCpJ,EAET,MAEF,KAAKqnC,EAAA7kD,YAAYwO,MAGb,IAAIynD,EAAqBz4C,EAAQF,eAAeunC,EAAAzoD,aAAa2B,aAC7D,IAAKk4D,EAOH,OANItC,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACfmB,EAAc9zD,MAAeib,EAAQjc,cAGlC,KAET,IAAI20D,EAAYD,EAAW1yD,UAAUqgB,WAEvC,OAAIkyC,EAAiB9vD,MAAQxJ,EAAAyJ,SAASgd,eAChCzF,EAAS04C,EAAUp3C,iBACrBlsB,KAAK2gE,sBAAwBuC,EAC7BljE,KAAK4gE,yBAA2B6C,EAAczvC,kBACvCpJ,GAEF,MAET5qB,KAAK2gE,sBAAwBuC,EAC7BljE,KAAK4gE,yBAA2B6C,EAAczvC,kBACvCpJ,GASX,OANIm2C,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf4kD,EAAiBvzD,OAGd,MAITd,EAAA5M,UAAAyhE,4BAAA,SAEEC,EAEAV,GAEA,IAAKA,EAAe5mD,GAAE,KAEpB,OAAQ4mD,EAAe7vD,MACrB,OACE,GAAIwwD,UAAUD,GAAW,OAAOh6D,EAAA2H,KAAKpO,GACrC,MAEF,OACE,GAAI2gE,UAAUF,GAAW,OAAOh6D,EAAA2H,KAAK/N,GACrC,MAEF,OACE,GAAIugE,WAAWH,GAAW,OAAOh6D,EAAA2H,KAAKnO,IACtC,MAEF,OACE,GAAI4gE,WAAWJ,GAAW,OAAOh6D,EAAA2H,KAAK9N,IACtC,MAEF,OACE,GAAIwgE,WAAWL,GAAW,OAAOh6D,EAAA2H,KAAKlO,IACtC,MAEF,OACE,GAAI6gE,WAAWN,GAAW,OAAOh6D,EAAA2H,KAAK7N,IACtC,MAEF,QACE,GAAIygE,YAAYP,GAAW,OAAOh6D,EAAA2H,KAAK1N,KACvC,MAEF,OACE,IAAK5D,KAAK4iB,QAAQxR,QAAQc,SAAU,CAClC,GAAI8xD,WAAWL,GAAW,OAAOh6D,EAAA2H,KAAKshD,QACtC,MAEF,OAAOjpD,EAAA2H,KAAKqhD,QAEd,OACE,IAAK3yD,KAAK4iB,QAAQxR,QAAQc,SAAU,CAClC,GAAI+xD,WAAWN,GAAW,OAAOh6D,EAAA2H,KAAKwhD,QACtC,MAEF,OAAOnpD,EAAA2H,KAAKuhD,QAEd,OAAmB,OAAOlpD,EAAA2H,KAAKjO,IAC/B,OAAmB,OAAOsG,EAAA2H,KAAK5N,IAC/B,QAAmB,OAAOiG,EAAA2H,KAAKzN,IAC/B,QAAmB,OAAO8F,EAAA2H,KAAKxN,IAC/B,QAAoB,MACpB,QAAS+G,QAAO,GAIpB,OAAIm5D,WAAWL,GAAkBh6D,EAAA2H,KAAKlO,IAClC6gE,WAAWN,GAAkBh6D,EAAA2H,KAAK7N,IAC/BkG,EAAA2H,KAAKjO,KAIdwL,EAAA5M,UAAAkhE,kBAAA,SAEEvwC,EAEAnL,EAEAw7C,EAEAlC,GAEA,SAJA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAE7BpuC,EAAWxf,MAAQxJ,EAAAyJ,SAASid,eACjCsC,EAAuCA,EAAYA,WAErD,OAAQA,EAAWxf,MACjB,KAAKxJ,EAAAyJ,SAAS8c,UACZ,OAAOnwB,KAAKmkE,2BACWvxC,EACrBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAASyqB,YACZ,OAAO99B,KAAKokE,6BACaxxC,EACvBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAASwqB,aACZ,OAAO79B,KAAKqkE,8BACczxC,EACxBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAAS4pB,OACZ,OAAOj9B,KAAKskE,wBACQ1xC,EAClBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAASsqB,KACZ,OAAO39B,KAAKukE,sBACM3xC,EAChBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAASmd,MACZ,OAAOxwB,KAAKwkE,uBACO5xC,EACjBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAAS6c,WACZ,OAAOlwB,KAAK6iE,kBACYjwC,EACtBnL,EAAMA,EAAKg9C,eAAgB1D,GAG/B,KAAKn3D,EAAAyJ,SAAS+M,QACZ,OAAOpgB,KAAK0kE,yBACS9xC,EACnBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAASkd,eACZ,OAAOvwB,KAAK+iE,gCACgBnwC,EAC1BnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAASgd,cACZ,OAAOrwB,KAAKwjE,+BACe5wC,EACzBnL,EAAMw7C,EAAgBlC,GAG1B,KAAKn3D,EAAAyJ,SAAS+c,KACZ,OAAOpwB,KAAK2kE,sBACM/xC,EAChBnL,EAAMw7C,EAAgBlC,GAW5B,OANIA,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAGR,MAITd,EAAA5M,UAAAkiE,2BAAA,SAEEvxC,EAEAnL,EAEAw7C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAEhCpuC,EAAWD,eAAiB/oB,EAAAozB,cAAc4nC,QAC5C,OAAO5kE,KAAKmjE,kBACVvwC,EAAWA,WACXnL,EACAw7C,EACAlC,GAGJ,IAAI/kD,EAAOhc,KAAK6gE,YACdh2D,OAAO+nB,EAAWC,QAClBpL,EAAKg9C,eACLh9C,EAAK3B,wBACLi7C,GAEF,IAAK/kD,EAAM,OAAO,KAClB,IAAIvG,EAA0BuG,EAAKkQ,eACnC,IAAKzW,EAAS,CACZ,IAAI9E,EAAYqL,EAAKy2C,mBACrB,IAAK9hD,EAAW,OAAO,KACvB8E,EAAU9E,EAAU+jD,iBAAiB10D,KAAK4iB,SAI5C,OAFA5iB,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBnrD,GAIT5G,EAAA5M,UAAAmiE,6BAAA,SAEExxC,EAEAnL,EAEAw7C,EAEAlC,QAFA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAEpC,IAAIvqC,EAAU7D,EAAW6D,QAEzB,OAAQ7D,EAAWI,UACjB,KAAKrD,EAAAC,MAAMhjB,MAET,GAAI6pB,EAAQrjB,MAAQxJ,EAAAyJ,SAAS+M,SAA+BqW,EAASpW,aAAezW,EAAA0W,YAAYgd,QAAS,CACvG,IAAIthB,EAAOhc,KAAK0jE,4BACdmB,QAAQC,SAAqCruC,EAASn1B,OACtD2hE,GAGF,OADIj1D,EAAchO,KAAK4iB,QAAQ5U,aACZkD,IAAI8K,EAAK5I,MAAQpF,EAAY9M,IAAI8a,EAAK5I,MAAS,KAEpE,OAAOpT,KAAKmjE,kBACV1sC,EACAhP,EACAw7C,EACAlC,GAGJ,KAAKpxC,EAAAC,MAAMljB,KACX,KAAKijB,EAAAC,MAAM4oC,UACX,KAAK7oC,EAAAC,MAAM6oC,YACT,OAAOz4D,KAAKmjE,kBACVvwC,EAAW6D,QACXhP,EACAw7C,EACAlC,GAGJ,KAAKpxC,EAAAC,MAAMopC,YACT,IAAIhrD,EACJ,OADIA,EAAchO,KAAK4iB,QAAQ5U,aACZkD,IAAG,IAAkBlD,EAAY9M,IAAG,IAAmB,KAE5E,KAAKyuB,EAAAC,MAAMqpC,MAOT,IANsBj5D,KAAKmjE,kBACzBvwC,EAAW6D,QACXhP,EACAw7C,EACAlC,GAEoB,OAAO,KAE7B,MAEF,QAASl2D,QAAO,GAQlB,OANIk2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAGR,MAITd,EAAA5M,UAAAoiE,8BAAA,SAEEzxC,EAEAnL,EAEAw7C,EAEAlC,GAGA,YALA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAG5BpuC,EAAWI,UACjB,KAAKrD,EAAAC,MAAM4oC,UACX,KAAK7oC,EAAAC,MAAM6oC,YACT,OAAOz4D,KAAKmjE,kBACVvwC,EAAW6D,QACXhP,EACAw7C,EACAlC,GAGJ,QAASl2D,QAAO,GAQlB,OANIk2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAGR,MAITd,EAAA5M,UAAAqiE,wBAAA,SAEE1xC,EAEAnL,EAEAw7C,EAEAlC,GASA,YAXA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAGhCD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAGR,MAITd,EAAA5M,UAAAsiE,sBAAA,SAEE3xC,EAEAnL,EAEAw7C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAEhCv5C,EAAKpL,GAAE,OAA4B,CACrC,IAAI0oD,EAAYt9C,EAAKu9C,YAAYv7D,EAAAzG,cAAcoC,OAC/C,GAAI2/D,EAGF,OAFA/kE,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBmE,EAGX,IAAIn0D,EAAS6W,EAAKg9C,eAAe7zD,OACjC,OAAIA,GACF5Q,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBhwD,IAELmwD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe2vD,+CACfryC,EAAWjjB,OAGR,OAITd,EAAA5M,UAAAuiE,uBAAA,SAEE5xC,EAEAnL,EAEAw7C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAEhCv5C,EAAKpL,GAAE,OAA4B,CACrC,IAAI6oD,EAAaz9C,EAAKu9C,YAAYv7D,EAAAzG,cAAcqC,QAChD,GAAI6/D,EAGF,OAFAllE,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBsE,EAGX,IAAIt0D,EAAyB6W,EAAKg9C,eAAe7zD,OACjD,OAAIA,GAAUA,EAAOwC,MAAQ6+C,EAAA7kD,YAAYwO,QAAUhL,EAAiBA,EAAQ6Y,OAC1EzpB,KAAK2gE,sBAAwB,KAC7B3gE,KAAK4gE,yBAA2B,KACzBhwD,IAELmwD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe6vD,iDACfvyC,EAAWjjB,OAGR,OAITd,EAAA5M,UAAAyiE,yBAAA,SAEE9xC,EAEAnL,EAEAw7C,EAEAlC,GAEA,YAJA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAE5BpuC,EAAWvS,aACjB,KAAKzW,EAAA0W,YAAYgd,QACft9B,KAAK2gE,sBAAwB/tC,EAC7B5yB,KAAK4gE,yBAA2B,KAChC,IAAIwE,EAAcplE,KAAK0jE,4BACM9wC,EAAYtxB,MACvC2hE,GAGF,OADIj1D,EAAchO,KAAK4iB,QAAQ5U,aACZkD,IAAIk0D,EAAYhyD,MAAQpF,EAAY9M,IAAIkkE,EAAYhyD,MAAS,KAElF,KAAKxJ,EAAA0W,YAAY8c,MACfp9B,KAAK2gE,sBAAwB/tC,EAC7B5yB,KAAK4gE,yBAA2B,KAChC,IACI5yD,EADAo3D,EAAcnC,GAAkBt5D,EAAA2H,KAAKzN,IAAM8F,EAAA2H,KAAKzN,IAAM8F,EAAA2H,KAAKxN,IAE/D,OADIkK,EAAchO,KAAK4iB,QAAQ5U,aACZkD,IAAIk0D,EAAYhyD,MAAQpF,EAAY9M,IAAIkkE,EAAYhyD,MAAS,KAElF,KAAKxJ,EAAA0W,YAAYC,OAGf,OAFAvgB,KAAK2gE,sBAAwB/tC,EAC7B5yB,KAAK4gE,yBAA2B,KACzB5gE,KAAK4iB,QAAQ7L,eAWxB,OANIgqD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAGR,MAITd,EAAA5M,UAAA0iE,sBAAA,SAEE/xC,EAEAnL,EAEAw7C,EAEAlC,QAFA,IAAAkC,MAAuBt5D,EAAA2H,KAAKG,WAE5B,IAAAsvD,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBtwC,EAAWA,WAC9BhI,EAAS5qB,KAAKmjE,kBAChBD,EACAz7C,EACAw7C,EACAlC,GAGF,IAAKn2C,EAAQ,OAAO,KACpB,GAAIA,EAAOxX,MAAQ6+C,EAAA7kD,YAAY2N,mBAAoB,CAEjD,GACsB6P,EAAQjc,cAAgB+xD,EAAA2E,eAAex6C,WAC3D+H,EAAW1S,UAAUpV,OAAS,EAE9B,OAAO9K,KAAKmjE,kBAAkBvwC,EAAW1S,UAAU,GAAIuH,EAAMw7C,EAAgBlC,GAG/E,IAAIn7C,EAAW5lB,KAAKslE,iCACC16C,EACnBgI,EAAWpJ,cACX/B,EAAKg9C,eACL56D,EAAAg4D,QAAQp6C,EAAK3B,yBACb8M,EACAmuC,GAEF,IAAKn7C,EAAU,OAAO,KACtB,IAAIoL,EAAapL,EAASjV,UAAUqgB,WAChCoiC,EAAYpiC,EAAW9E,eAC3B,GAAIknC,EAGF,OAAOA,EAEP,IAAIziD,EAAYqgB,EAAWyhC,mBAC3B,GAAI9hD,EAIF,OAHqBA,EAAU+jD,iBAAiB10D,KAAK4iB,SAKrD,IAAI5U,EAAchO,KAAK4iB,QAAQ5U,YAC/B,OAAKgjB,EAAW3U,GAAE,MAAyBrO,EAAYkD,IAAI8f,EAAW5d,MAC7DpF,EAAY9M,IAAI8vB,EAAW5d,OAIpC2tD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeiwD,uGACfrC,EAAiBvzD,MAAOib,EAAOjc,cAG5B,MAQT,OANIoyD,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAGR,MAITd,EAAA5M,UAAA+Y,gBAAA,SAEE/Y,EAEAunB,EAEA1D,EAEAi7C,QAFA,IAAAj7C,MAA4Cjc,EAAAg4D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIwE,EAAevjE,EAAU2O,OAAOwC,MAAQ6+C,EAAA7kD,YAAYkO,mBACpDrZ,EAAU2O,OAAOA,OACjB3O,EAAU2O,OACVxB,EAA8B,KAC9BsW,EAAc8D,EAAgB7f,EAAA0qD,cAAc7qC,GAAiB,GAGjE,GAAIvnB,EAAUoa,GAAG5S,EAAApH,YAAY+f,UAAW,CAMtC,GALAvX,OAAO26D,EAAapyD,MAAQ6+C,EAAA7kD,YAAYwO,OACxCxM,EAAuBo2D,EAGnBC,EAAmBxjE,EAAUwjB,oBAAoBC,GAC/B,OAAO+/C,EAG7B,IAAIC,EAAqBt2D,EAAcoa,cACvC,GAAIk8C,EAAoB,CACtB,IAAIC,EAAsB96D,OAAOuE,EAAcnN,UAAUqoB,oBACrDs7C,EAAwBD,EAAoB76D,OAChDD,OAAO+6D,GAAyBD,EAAoB76D,QACpD,IAAK,IAAIzK,EAAI,EAAGA,EAAIulE,IAAyBvlE,EAAG,CAC9C,IAAIwlE,EAAyBF,EAAoBtlE,GAAGO,KAAK+U,KACpDmQ,EAAwB5U,IAAI20D,IAC/B//C,EAAwBpX,IACtBm3D,EACAH,EAAmBrlE,UAKtB,CAEL,IAAIolE,EACJ,GAFA56D,OAAO26D,EAAapyD,MAAQ6+C,EAAA7kD,YAAYwO,OACpC6pD,EAAmBxjE,EAAUwjB,oBAAoBC,GAC/B,OAAO+/C,EAI/B,IAEIK,EAFAC,EAAgB9jE,EAAU+jE,iBAC1B17C,EAAqBroB,EAAUqoB,mBAEnC,GAAId,IAAkBs8C,EAA2Bt8C,EAAc1e,QAAS,CACtED,OAAOyf,GAAsBw7C,GAA4Bx7C,EAAmBxf,QAC5E,IAASzK,EAAI,EAAGA,EAAIylE,IAA4BzlE,EAC9CylB,EAAwBpX,IACA4b,EAAoBjqB,GAAGO,KAAK+U,KAClD6T,EAAcnpB,SAIlBwK,QAAQyf,GAAmD,GAA7BA,EAAmBxf,QAInD,IAAIsc,EAAwB,KACxB6J,EAAmB80C,EAAc90C,iBACrC,GAAIA,EAAkB,CAOpB,KANA7J,EAAWpnB,KAAK6gE,YACd5vC,EACAhvB,EAAU2O,OACVkV,EACAi7C,IAEa,OAAO,KACtBj7C,EAAwBpX,IAAIjF,EAAAzG,cAAcoC,MAAOgiB,QACxChY,IACTgY,EAAWhY,EAAc4M,KACzB8J,EAAwBpX,IAAIjF,EAAAzG,cAAcoC,MAAOgiB,IAInD,IA8BI4J,EA9BAi1C,EAAsBF,EAAch1C,WACpCm1C,EAAyBD,EAAoBn7D,OAC7Cuc,EAAiB,IAAIpgB,MAAYi/D,GACjC3R,EAAiB,IAAIttD,MAAci/D,GACnC1R,EAAqB,EACzB,IAASn0D,EAAI,EAAGA,EAAI6lE,IAA0B7lE,EAAG,CAC/C,IAAI8lE,EAAuBF,EAAoB5lE,GAC3C8lE,EAAqB10C,eAAiB7nB,EAAAsyB,cAAc+5B,UACtDzB,EAAqBn0D,EAAI,GAE3B,IAAIkhE,EAAW4E,EAAqBnqD,KACpC,GAAIpS,EAAAo2B,cAAcuhC,GAKhB,OAJAvhE,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfE,EAAS5xD,OAEJ,KAET,IAAI2X,EAAgBtnB,KAAK6gE,YACvBU,EACAt/D,EAAU2O,OACVkV,EACAi7C,GAEF,IAAKz5C,EAAe,OAAO,KAC3BD,EAAehnB,GAAKinB,EACpBitC,EAAel0D,GAAK8lE,EAAqBvlE,KAAK+U,KAKhD,GAAI1T,EAAUoa,GAAG5S,EAAApH,YAAY2c,KAC3BgS,EAAarnB,EAAA2H,KAAKG,UACb,GAAIxP,EAAUoa,GAAG5S,EAAApH,YAAYyd,aAClCkR,EAAanmB,OAAOuE,GAAe4M,SAC9B,CACDulD,EAAWwE,EAAc/0C,WAC7B,GAAIpnB,EAAAo2B,cAAcuhC,GAKhB,OAJAvhE,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfE,EAAS5xD,OAEJ,KAET,IAAIqM,EAAOhc,KAAK6gE,YACdU,EACAt/D,EAAU2O,OACVkV,EACAi7C,GAEF,IAAK/kD,EAAM,OAAO,KAClBgV,EAAahV,EAGf,IAAIrL,EAAY,IAAIhH,EAAA8Z,UAAU4D,EAAgB2J,EAAY5J,GAC1DzW,EAAU4jD,eAAiBA,EAC3B5jD,EAAU6jD,mBAAqBA,EAE/B,IAAI3uC,EAAyB5jB,EAAUrB,KACnC8kB,EAAY5a,SAAQ+a,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAIqsC,EAAAnhD,SACjB+U,EACA5jB,EACA0O,EACAmV,GAGF,OADA7jB,EAAU0jB,oBAAoBD,EAAaE,GACpCA,GAIT/W,EAAA5M,UAAAqjE,iCAAA,SAEErjE,EAEAu/D,EAEAV,EAEAh7C,EAEAsgD,EAEArF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIwE,EAAevjE,EAAU2O,OAAOwC,MAAQ6+C,EAAA7kD,YAAYkO,mBACpDrZ,EAAU2O,OAAOA,OACjB3O,EAAU2O,OACVy1D,EAAuC,KAG3C,GAAIpkE,EAAUoa,GAAG5S,EAAApH,YAAYwP,SAAU,CAGrC,GAAI5P,EAAUoa,GAAG5S,EAAApH,YAAY+f,UAAW,CACtCvX,OAAO26D,EAAapyD,MAAQ6+C,EAAA7kD,YAAYwO,OACxC,IAAI8pD,EAA6BF,EAAch8C,cAC/C,GAAIk8C,EAAoB,CACtB,IAAIp7C,EAAqBzf,OAAe26D,EAAcvjE,UAAUqoB,oBAC5Ds7C,EAAwBF,EAAmB56D,OAC/CD,OAAO+6D,GAAyBt7C,EAAmBxf,QACnD,IAAK,IAAIzK,EAAI,EAAGA,EAAIulE,IAAyBvlE,EAC3CylB,EAAwBpX,IACtB4b,EAAmBjqB,GAAGO,KAAK+U,KAC3B+vD,EAAmBrlE,KAc3B,KARAgmE,EAAwBrmE,KAAKkiE,qBAC3Br3D,OAAO5I,EAAUqoB,oBACjBk3C,EACAV,EACAh7C,EACAsgD,EACArF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB12D,OAOlD,OANIi2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf0E,EAAWz2D,MAAO1N,EAAU0M,cAGzB,KAKX,OAAO3O,KAAKgb,gBACV/Y,EACAokE,EACAvgD,EACAi7C,IAKJlyD,EAAA5M,UAAA6Y,aAAA,SAEE7Y,EAEAunB,EAEA1D,EAEAi7C,wBAFA,IAAAj7C,MAA4Cjc,EAAAg4D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIt7C,EAAc8D,EAAgB7f,EAAA0qD,cAAc7qC,GAAiB,GAG7D5D,EAAW3jB,EAAUwjB,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAI4D,EAAe,CACjB,IACI88C,GADAh8C,EAAqBzf,OAAO5I,EAAUqoB,qBACCxf,OACvCyf,EAAmBf,EAAc1e,OACrCD,OAAO0f,GAAoB+7C,GAC3B,IAAK,IAAIjmE,EAAI,EAAGA,EAAIkqB,IAAoBlqB,EACtCylB,EAAwBpX,IAAI4b,EAAmBjqB,GAAGO,KAAK+U,KAAM6T,EAAcnpB,QAExE,CACL,IAAIiqB,EAAqBroB,EAAUqoB,mBACnCzf,SAASyf,GAAsBA,EAAmBxf,SAIpD,IAAIoN,EAAgBjW,EAAUiW,cAC1BquD,EAA0B,KAC9B,GAAIruD,EAAe,CACjB,IAAIH,EAAclN,OAAO5I,EAAU8V,aASnC,KARAwuD,EAAYvmE,KAAK4hE,8BACf1pD,EACAH,EAAYyR,cACZvnB,EAAU2O,OACV/G,EAAAg4D,QAAQ/7C,GACR/N,EACAgpD,IAEc,OAAO,KAIzB,IAAIyF,EAAwBvkE,EAAUrB,KAClC8kB,EAAY5a,SAAQ07D,GAAyB,IAAM9gD,EAAc,MACrEE,EAAW,IAAIqsC,EAAA1oC,MAAMi9C,EAAuBvkE,EAAWunB,EAAe+8C,IAC7DzgD,wBAA0BA,EACnC7jB,EAAU0jB,oBAAoBD,EAAaE,GAG3C,IAAIiD,EAAoB,EACxB,GAAI09C,EAAW,CAEb,GADIE,EAAcF,EAAU1qD,QACX,EACXX,EAAkB0K,EAAS/J,WACT+J,EAAS/J,QAAUX,EAAkB,IAAI9T,SAC/D,IAAyC,IAAAs/D,EAAAhyD,EAAA+xD,GAAWE,EAAAD,EAAA9xD,QAAA+xD,EAAA9xD,KAAA8xD,EAAAD,EAAA9xD,OAAE,CAA7C,IAAAwG,EAAArG,EAAA4xD,EAAArlE,MAAA,GAACslE,EAAAxrD,EAAA,GAAgByrD,EAAAzrD,EAAA,GACxBF,EAAgBxM,IAAIk4D,EAAgBC,sGAGxCh+C,EAAe09C,EAAU58C,oBAI3B,IAAIm9C,EAA2B7kE,EAAUiZ,gBACzC,GAAI4rD,MACF,IAAmB,IAAAhrD,EAAApH,EAAAoyD,EAAyBxsD,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAAjD,IAAIyG,EAAMU,EAAAza,MACb,OAAQ+Z,EAAOjI,MAGb,KAAK6+C,EAAA7kD,YAAYsb,gBACf,IAAIxN,EACJ,GADIA,EAAkB0K,EAAS/J,SAE1B,GAAIX,EAAgBhK,IAAImK,EAAOza,MAAO,CACzCZ,KAAKqV,MACH3L,EAAA4L,eAAeyH,uBACE1B,EAAQ/C,eAAe3I,MACxC0L,EAAOza,MAET,YAPoBglB,EAAS/J,QAAUX,EAAkB,IAAI9T,IAS/D,IAAI2/D,EAAiC1rD,EAAQkmD,SACzCyF,EAAyB,KAE7B,GAAKD,EAoBHC,EAAYhnE,KAAK6gE,YACfkG,EACA9kE,EAAU2O,OACVgV,EAASE,wBACTi7C,OAxBgB,CAEhB,IAAI0F,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAU1qD,UACT4qD,EAAYv1D,IAAqBmK,EAAQza,MAAO,CACjE,IAAIqmE,EAAYR,EAAYvlE,IAAqBma,EAAQza,MACpDqmE,EAAU5qD,GAAG5S,EAAApH,YAAY00D,WAC5BlsD,OAAOo8D,EAAU7zD,MAAQ6+C,EAAA7kD,YAAYuO,OACrCqrD,EAAoBC,EAAWjrD,MAIhCgrD,GACCjG,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACEhmD,EAAQ/C,eAAe3I,MAAMu3D,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAIlV,EAAArpC,MAAsBvN,EAAQuK,EAAUohD,GAChEn8D,OAAOhB,EAAAmjB,WAAWg6C,EAAUzU,WAC5B,IAAIhW,EAAOyqB,EAAUzU,SAAW,EAC5B1pC,EAAe0zB,IAAM1zB,EAAuC,GAAvBA,EAAe0zB,IACxD4qB,EAAct+C,aAAeA,EAC7BA,GAAgBm+C,EAAUzU,SAC1B3sC,EAASlU,IAAI2J,EAAOza,KAAMumE,GAC1B,MAEF,KAAKlV,EAAA7kD,YAAY2N,mBACf,IAAIqsD,EAAqC/rD,EAAQkK,QAAQK,GACzDA,EAASlU,IAAI01D,EAAexmE,KAAMwmE,GAClC,MAEF,KAAKnV,EAAA7kD,YAAYkO,mBACf,IAAI+rD,EAAmB,IAAIpV,EAAAlpC,SAA4B1N,EAAQuK,GAC3DrK,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIyN,EAAiBhpB,KAAKgb,gBACxBO,EAAgBgK,QAAQK,GACxB,KACA/b,EAAAg4D,QAAQj8C,EAASE,yBACjBi7C,GAEE/3C,IACFq+C,EAAiBr+C,eAAiBA,EAClCq+C,EAAiBprD,QAAQ+M,EAAerY,UAAUqgB,aAGtD,IAAIxV,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIyN,EAAiBjpB,KAAKgb,gBACxBQ,EAAgB+J,QAAQK,GACxB,KACA/b,EAAAg4D,QAAQj8C,EAASE,yBACjBi7C,GAEE93C,IACFo+C,EAAiBp+C,eAAiBA,EAC7Bo+C,EAAiBhrD,GAAG5S,EAAApH,YAAYihB,YACnCzY,OAAyD,GAAlDoe,EAAetY,UAAU0W,eAAevc,QAC/Cu8D,EAAiBprD,QAAQgN,EAAetY,UAAU0W,eAAe,MAIvEzB,EAASlU,IAAI21D,EAAiBzmE,KAAMymE,GACpC,MAEF,QAASx8D,QAAO,sGAMtB+a,EAAS+D,oBAAsBd,EAI7B,IAAIy+C,EAAgB1hD,EAASnP,aAAahN,EAAAzG,cAAcsC,aACxD,GAAIgiE,GAAiBA,EAAc12D,SAAWgV,EAAU,CACtD/a,OAAOy8D,EAAcl0D,MAAQ6+C,EAAA7kD,YAAY2N,oBACzC,IAAIwsD,EAAevnE,KAAKgb,gBACHssD,EACnB,KACA1hD,EAASE,wBACTi7C,GAEEwG,IAAc3hD,EAASgE,oBAAgC29C,OAK/D,IAAsC,IAAAzyD,EAAAJ,EAAAzS,EAAUwe,oBAAkBxK,GAAAnB,EAAAF,QAAAqB,GAAApB,KAAAoB,GAAAnB,EAAAF,OAAE,CAA3D,IAAAyB,GAAAtB,EAAAkB,GAAA3U,MAAA,GAAC8R,GAAAiD,GAAA,GAAMmxD,GAAAnxD,GAAA,GACdxL,OAAOuI,IAAQ6+C,EAAAzoD,aAAa2D,SAC5B,IAAIs6D,QAAgB,EACpB,GAAID,GAAkBnrD,GAAG5S,EAAApH,YAAY+f,UAAW,CAC1CglD,EAAiBI,GAAkBjiD,QAAQK,GAC/C6hD,GAAmBznE,KAAKgb,gBACtBosD,EACA,KACAv9D,EAAAg4D,UACAd,QAGF0G,GAAmBznE,KAAKgb,gBACtBwsD,GACA,KACA39D,EAAAg4D,UACAd,GAGJ,GAAK0G,GAAL,CACA,IAAIjnD,GAAYoF,EAASpF,UACpBA,KAAWoF,EAASpF,UAAYA,GAAY,IAAIpZ,KACrDoZ,GAAU9R,IAAI0E,GAAMq0D,yGAEtB,OAAO7hD,GAIT/W,EAAA5M,UAAA2/D,8BAAA,SAEE3/D,EAEAu/D,EAEAV,EAEAh7C,EAEAsgD,EAEArF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIqF,EAAuC,KAG3C,GAAIpkE,EAAUoa,GAAG5S,EAAApH,YAAYwP,UAS3B,KARAw0D,EAAwBrmE,KAAKkiE,qBAC3Br3D,OAAO5I,EAAUqoB,oBACjBk3C,EACAV,EACAh7C,EACAsgD,EACArF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB12D,OAOlD,OANIi2D,GAAcN,EAAWO,QAC3BhhE,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf0E,EAAWz2D,MAAO1N,EAAU0M,cAGzB,KAKX,OAAO3O,KAAK8a,aACV7Y,EACAokE,EACAvgD,EACAi7C,IAGNlyD,EAlwDA,CAA8BnF,EAAAgZ,mBAAjBhjB,EAAAmP,4RC5Fb,IAuIY64D,EAvIZ/9D,EAAAxJ,EAAA,GAMA8xD,EAAA9xD,EAAA,GAQA+xD,EAAA/xD,EAAA,GAuCAsJ,EAAAtJ,EAAA,GAIAuJ,EAAAvJ,EAAA,IASA,SAAkBwnE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,oBAEAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,+BAEAA,IAAA,6BAKAA,IAAA,mDAEAA,IAAA,kDAEAA,IAAA,0DAEAA,IAAA,kDAEAA,IAAA,wDAEAA,IAAA,yDAKAA,IAAA,uCAEAA,IAAA,6CAKAA,IAAA,uCAWAA,IAAA,yCA7DF,CAAkBjoE,EAAAioE,YAAAjoE,EAAAioE,UAAS,KAqE3B,SAAYD,GAEVA,IAAA,eAGAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,0BAEAA,IAAA,wBAGAA,IAAA,oDAEAA,IAAA,uDAEAA,IAAA,qDAGAA,IAAA,sCAQAA,IAAA,uCAMAA,IAAA,iCAvCF,CAAYA,EAAAhoE,EAAAgoE,aAAAhoE,EAAAgoE,WAAU,KA0CtB,SAAiBA,GACCA,EAAAhvD,KAAhB,SAAqBua,EAAkBC,GACrC,OAASD,EAAOy0C,EAAWE,gBAAoB10C,EAAQw0C,EAAWE,gBACzD30C,EAAOy0C,EAAWG,gBAAoB30C,EAAQw0C,EAAWG,iBAHtE,CAAiBH,EAAAhoE,EAAAgoE,aAAAhoE,EAAAgoE,WAAU,KAQ3B,SAAYI,GAEVA,IAAA,eAGAA,IAAA,6BAEAA,IAAA,yDAGAA,IAAA,qCAGAA,IAAA,qCAbF,CAAYpoE,EAAAooE,aAAApoE,EAAAooE,WAAU,KAetB,SAAiBA,GACCA,EAAApvD,KAAhB,SAAqBua,EAAkBC,GACrC,OAASD,EAAO60C,EAAWF,gBAAoB10C,EAAQ40C,EAAWF,gBACzD30C,EAAO60C,EAAWD,gBAAoB30C,EAAQ40C,EAAWD,iBAHtE,CAAiBnoE,EAAAooE,aAAApoE,EAAAooE,WAAU,KAQ3B,IAAApgD,EAAA,WAsDE,SAAAA,IArCA1nB,KAAA+nE,aAAyC,KAIzC/nE,KAAAgoE,WAA4C,KA6yB9C,OAtyBStgD,EAAA/lB,OAAP,SAAcsmE,GACZ,IAAIxgD,EAAO,IAAIC,EAWf,OAVAD,EAAK7W,OAAS,KACd6W,EAAKhY,MAAK,EACVgY,EAAKwgD,eAAiBA,EACtBxgD,EAAKygD,cAAgB,KACrBzgD,EAAKT,WAAa,KAClBS,EAAKuJ,WAAai3C,EAAet3D,UAAUqgB,WAC3CvJ,EAAK3B,wBAA0BmiD,EAAeniD,wBAC9C2B,EAAK0gD,WAAa,GAClB1gD,EAAK2gD,eAAiB,KACtB3gD,EAAK4gD,kBAAoB,KAClB5gD,GAIFC,EAAA4gD,aAAP,SAAoBL,EAA0BG,GAC5C,IAAI3gD,EAAOC,EAAK/lB,OAAOsmE,GAMvB,OALAxgD,EAAK/Y,IAAG,OACR+Y,EAAK2gD,eAAiBA,EACtB3gD,EAAK4gD,kBAAoBD,EAAez5D,aAAe,aAAey5D,EAAe9hD,gBAAgBxI,SAAS,IAC9G2J,EAAKuJ,WAAao3C,EAAez3D,UAAUqgB,WAC3CvJ,EAAK3B,wBAA0BsiD,EAAetiD,wBACvC2B,GAMT1mB,OAAAC,eAAI0mB,EAAAzlB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKooE,gBAAkBpoE,KAAKioE,gDAIrCvgD,EAAAzlB,UAAAoa,GAAA,SAAGoB,GAAyB,OAAQzd,KAAKyP,MAAQgO,IAASA,GAE1DiK,EAAAzlB,UAAA6c,MAAA,SAAMrB,GAAyB,OAA8B,IAAtBzd,KAAKyP,MAAQgO,IAEpDiK,EAAAzlB,UAAAyM,IAAA,SAAI+O,GAAyBzd,KAAKyP,OAASgO,GAE3CiK,EAAAzlB,UAAA+gB,MAAA,SAAMvF,GAAyBzd,KAAKyP,QAAUgO,GAG9CiK,EAAAzlB,UAAAsmE,KAAA,WACE,IAAIC,EAAS,IAAI9gD,EAWjB,OAVA8gD,EAAO53D,OAAS5Q,KAChBwoE,EAAO/4D,MAAQzP,KAAKyP,MACpB+4D,EAAOP,eAAiBjoE,KAAKioE,eAC7BO,EAAON,cAAgBloE,KAAKkoE,cAC5BM,EAAOxhD,WAAahnB,KAAKgnB,WACzBwhD,EAAOx3C,WAAahxB,KAAKgxB,WACzBw3C,EAAO1iD,wBAA0B9lB,KAAK8lB,wBACtC0iD,EAAOL,WAAanoE,KAAKmoE,WAAWM,QACpCD,EAAOJ,eAAiBpoE,KAAKooE,eAC7BI,EAAOH,kBAAoBroE,KAAKqoE,kBACzBG,GAIT9gD,EAAAzlB,UAAAymE,aAAA,SAAa1sD,EAAYiQ,QAAA,IAAAA,MAAA,MACvB,IACI08C,EASAxhD,EAVA8gD,EAAiBjoE,KAAKioE,eAE1B,OAAQjsD,EAAK83C,gBACX,KAAK5B,EAAAjyB,WAAW75B,IAAOuiE,EAAQV,EAAexhD,SAAU,MACxD,KAAKyrC,EAAAjyB,WAAW55B,IAAOsiE,EAAQV,EAAevhD,SAAU,MACxD,KAAKwrC,EAAAjyB,WAAWp5B,IAAO8hE,EAAQV,EAAethD,SAAU,MACxD,KAAKurC,EAAAjyB,WAAWn5B,IAAO6hE,EAAQV,EAAerhD,SAAU,MACxD,KAAKsrC,EAAAjyB,WAAWl5B,KAAQ4hE,EAAQV,EAAephD,UAAW,MAC1D,QAAS,MAAM,IAAI1N,MAAM,0BAG3B,GAAI8S,EAAQ,CACV,GAAI08C,GAASA,EAAM79D,OACjB,IAAK,IAAIzK,EAAI,EAAGyS,EAAI61D,EAAM79D,OAAQzK,EAAIyS,IAAKzS,EACzC,IAAK4rB,EAAO/a,IAAIy3D,EAAMtoE,GAAG4kB,OAAQ,CAC/BkC,EAAQwhD,EAAMtoE,GAEd,IADA,IAAIuoE,EAAID,EAAM79D,OAAS,EAChBzK,EAAIuoE,GAAG/9C,UAAU89C,EAAMtoE,GAAKsoE,EAAY,EAANtoE,MAKzC,OAJAsoE,EAAM79D,OAAS89D,EACfzhD,EAAMnL,KAAOA,EACbmL,EAAM1X,MAAQhG,EAAApH,YAAYqN,KAC1B1P,KAAK6oE,eAAe1hD,EAAMlC,OAAO,GAC1BkC,EAIbA,EAAQ8gD,EAAergD,SAAS5L,QAE5B2sD,GAASA,EAAM79D,SACjBqc,EAAQwhD,EAAMG,OACR9sD,KAAOA,EACbmL,EAAM1X,MAAQhG,EAAApH,YAAYqN,MAE1ByX,EAAQ8gD,EAAergD,SAAS5L,GAIpC,OADAhc,KAAK6oE,eAAe1hD,EAAMlC,OAAO,GAC1BkC,GAITO,EAAAzlB,UAAA8mE,oBAAA,SAAoB/sD,EAAYiQ,QAAA,IAAAA,MAAA,MAC9B,IAAI9E,EAAQnnB,KAAK0oE,aAAa1sD,EAAMiQ,GACpC9E,EAAMzY,IAAIjF,EAAApH,YAAY2mE,QACtB,IAAIjB,EAAe/nE,KAAK+nE,aAIxB,OAHKA,IAAc/nE,KAAK+nE,aAAeA,EAAe,IAAI3gE,KAC1D2gE,EAAar5D,IAAI,QAAW1O,KAAKioE,eAAezhD,oBAAsBW,GACtEnnB,KAAKipE,aAAa9hD,EAAMlC,MAAOyiD,EAAWwB,UACnC/hD,GAITO,EAAAzlB,UAAAknE,cAAA,SAAchiD,GACZ,IAAIA,EAAM9K,GAAG5S,EAAApH,YAAYsiB,SAAzB,CACA9Z,OAAOsc,EAAMlC,OAAS,GACtB,IACI0jD,EADAV,EAAiBjoE,KAAKioE,eAG1B,OADAp9D,OAAqB,MAAdsc,EAAMnL,MACEmL,EAAMnL,KAAM83C,gBACzB,KAAK5B,EAAAjyB,WAAW75B,IACduiE,EAAQV,EAAexhD,WAAawhD,EAAexhD,SAAW,IAC9D,MAEF,KAAKyrC,EAAAjyB,WAAW55B,IACdsiE,EAAQV,EAAevhD,WAAauhD,EAAevhD,SAAW,IAC9D,MAEF,KAAKwrC,EAAAjyB,WAAWp5B,IACd8hE,EAAQV,EAAethD,WAAashD,EAAethD,SAAW,IAC9D,MAEF,KAAKurC,EAAAjyB,WAAWn5B,IACd6hE,EAAQV,EAAerhD,WAAaqhD,EAAerhD,SAAW,IAC9D,MAEF,KAAKsrC,EAAAjyB,WAAWl5B,KACd4hE,EAAQV,EAAephD,YAAcohD,EAAephD,UAAY,IAChE,MAEF,QAAS,MAAM,IAAI1N,MAAM,0BAE3BtO,OAAOsc,EAAMlC,OAAS,GACtB0jD,EAAMpqD,KAAK4I,KAIbO,EAAAzlB,UAAAmnE,oBAAA,SAAoBptD,EAAYiQ,QAAA,IAAAA,MAAA,MAC9B,IAAI9E,EAAQnnB,KAAK0oE,aAAa1sD,EAAMiQ,GAEpC,OADAjsB,KAAKmpE,cAAchiD,GACZA,GAITO,EAAAzlB,UAAAonE,eAAA,SAAezoE,GACb,IAAImnE,EAAe/nE,KAAK+nE,aACxB,OAAIA,GAAgBA,EAAa72D,IAAItQ,GAAcmnE,EAAa7mE,IAAIN,GAC7D,MAIT8mB,EAAAzlB,UAAAqnE,eAAA,SAAe1oE,EAAcob,EAAYiQ,QAAA,IAAAA,MAAA,MACvC,IAAIs9C,EAAcvpE,KAAK0oE,aAAa1sD,EAAMiQ,GACtC87C,EAAe/nE,KAAK+nE,aAKxB,OAJKA,EACAl9D,QAAQk9D,EAAa72D,IAAItQ,IADXZ,KAAK+nE,aAAeA,EAAe,IAAI3gE,IAE1DmiE,EAAY76D,IAAIjF,EAAApH,YAAY2mE,QAC5BjB,EAAar5D,IAAI9N,EAAM2oE,GAChBA,GAIT7hD,EAAAzlB,UAAAunE,eAAA,SAAe5oE,EAAcob,EAAYiJ,EAAYmhD,GACnD,QADmD,IAAAA,MAAA,MAC9CpmE,KAAK+nE,aACL,CACH,IAAI0B,EAAgBzpE,KAAK+nE,aAAa7mE,IAAIN,GAC1C,GAAI6oE,EAOF,OANIrD,GACFpmE,KAAKioE,eAAerlD,QAAQvN,MAC1B3L,EAAA4L,eAAeyH,uBACfqpD,EAAWz2D,OAGR85D,OAVazpE,KAAK+nE,aAAe,IAAI3gE,IAahDyD,OAAOoa,EAAQjlB,KAAKioE,eAAejiD,cAAclb,QACjD,IAAI4+D,EAAc,IAAIzX,EAAAjtC,MAAMpkB,EAAMqkB,EAAOjJ,EAAMhc,KAAKioE,gBAGpD,OADAjoE,KAAK+nE,aAAar5D,IAAI9N,EAAM8oE,GACrBA,GAIThiD,EAAAzlB,UAAA0nE,iBAAA,mBACE,GAAI3pE,KAAK+nE,aAAc,KACrB,IAAwB,IAAAhkD,EAAArP,EAAA1U,KAAK+nE,aAAaztD,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAA/C,IAAI20D,EAAWpuD,EAAA7Z,MACdioE,EAAYltD,GAAG5S,EAAApH,YAAY2mE,SAC7BhpE,KAAKmpE,cAAcI,qGAGvBvpE,KAAK+nE,aAAe,OAKxBrgD,EAAAzlB,UAAA+iE,YAAA,SAAYpkE,GACV,IACIgpE,EADA7mD,EAAuB/iB,KAE3B,GAAG,IAAK4pE,EAAQ7mD,EAAQglD,eAAkB6B,EAAM14D,IAAItQ,GAAQ,OAAOgpE,EAAM1oE,IAAIN,SACtEmiB,EAAUA,EAAQnS,QACzB,OAAO5Q,KAAKioE,eAAeliD,aAAa7kB,IAAIN,IAI9C8mB,EAAAzlB,UAAA0hB,OAAA,SAAO/iB,GACL,IAAI6U,EAAUzV,KAAKglE,YAAYpkE,GAC/B,OAAI6U,GACGzV,KAAKykE,eAAe9gD,OAAO/iB,IAIpC8mB,EAAAzlB,UAAA4nE,YAAA,SAAY5kD,EAAYxH,EAAkBqsD,GACxC,YADwC,IAAAA,OAAA,GACpC7kD,EAAQ,EAAU6kD,EAEf7kD,EADUjlB,KAAKmoE,WACIr9D,SAAW+f,UAAU7qB,KAAKmoE,WAAWljD,IAAUxH,IAASA,GAIpFiK,EAAAzlB,UAAA8nE,eAAA,SAAe9kD,EAAYxH,EAAkBqsD,GAC3C,YAD2C,IAAAA,OAAA,GACvC7kD,EAAQ,EAAU6kD,EAEf7kD,EADUjlB,KAAKmoE,WACIr9D,QAAwD,IAA7C+f,UAAU7qB,KAAKmoE,WAAWljD,IAAUxH,IAI3EiK,EAAAzlB,UAAAgnE,aAAA,SAAahkD,EAAYxH,GACvB,KAAIwH,EAAQ,GAAZ,CACA,IAAIkjD,EAAanoE,KAAKmoE,WAClB14D,EAAQwV,EAAQkjD,EAAWr9D,OAAS+f,UAAUs9C,EAAWljD,IAAU,EACvEjlB,KAAKmoE,WAAWljD,GAASxV,EAAQgO,IAInCiK,EAAAzlB,UAAA4mE,eAAA,SAAe5jD,EAAYxH,GACzB,KAAIwH,EAAQ,GAAZ,CACA,IAAIkjD,EAAanoE,KAAKmoE,WAClB14D,EAAQwV,EAAQkjD,EAAWr9D,OAAS+f,UAAUs9C,EAAWljD,IAAU,EACvEjlB,KAAKmoE,WAAWljD,GAASxV,GAASgO,IAIpCiK,EAAAzlB,UAAA+nE,eAAA,WACE,IAAI/B,EAAiBjoE,KAAKioE,eACtB14D,EAAK04D,EAAenhD,cACpBmjD,EAAQhC,EAAelhD,WAG3B,OAFKkjD,EACAA,EAAM1rD,KAAKhP,GADJ04D,EAAelhD,WAAa,CAAExX,GAEnC04D,EAAejhD,WAAazX,EAAGuO,SAAS,KAIjD4J,EAAAzlB,UAAAioE,cAAA,WACE,IAAIjC,EAAiBjoE,KAAKioE,eACtBgC,EAAQp/D,OAAOo9D,EAAelhD,YAC9Bjc,EAASD,OAAOo/D,EAAMn/D,QAC1Bm/D,EAAMnB,MACFh+D,EAAS,EACXm9D,EAAejhD,WAAaijD,EAAMn/D,EAAS,GAAGgT,SAAS,KAEvDmqD,EAAejhD,WAAa,KAC5BihD,EAAelhD,WAAa,OAKhCW,EAAAzlB,UAAAkoE,QAAA,SAAQn+C,GACNhsB,KAAKyP,OAAuB,MAAduc,EAAMvc,MACpBzP,KAAKmoE,WAAan8C,EAAMm8C,YAI1BzgD,EAAAzlB,UAAAmoE,mBAAA,SAAmBp+C,GACbA,EAAM3P,GAAE,IACVrc,KAAK0O,IAAG,KAENsd,EAAM3P,GAAE,IACVrc,KAAK0O,IAAG,MAENsd,EAAM3P,GAAE,KAAsB2P,EAAMhF,YAAchnB,KAAKgnB,YACzDhnB,KAAK0O,IAAG,MAENsd,EAAM3P,GAAE,KAAyB2P,EAAMk8C,eAAiBloE,KAAKkoE,eAC/DloE,KAAK0O,IAAG,MAENsd,EAAM3P,GAAE,KACVrc,KAAK0O,IAAG,OAGV,IADA,IAAIy5D,EAAan8C,EAAMm8C,WACd9nE,EAAI,EAAGyS,EAAIq1D,EAAWr9D,OAAQzK,EAAIyS,IAAKzS,EAAG,CACjD,IAAIoP,EAAQ04D,EAAW9nE,GACnBoP,EAAQi4D,EAAWwB,UAAUlpE,KAAKipE,aAAa5oE,EAAGqnE,EAAW2C,wBAC7D56D,EAAQi4D,EAAW4C,UAAUtqE,KAAKipE,aAAa5oE,EAAGqnE,EAAW6C,wBAC7D96D,EAAQi4D,EAAW8C,WAAWxqE,KAAKipE,aAAa5oE,EAAGqnE,EAAW+C,2BAKtE/iD,EAAAzlB,UAAAyoE,cAAA,SAAcz3C,EAAYC,GAExBlzB,KAAK0O,IAAIukB,EAAKxjB,MAAQyjB,EAAMzjB,MAAK,KAGjCzP,KAAK0O,IAAc,MAAVukB,EAAKxjB,OACdzP,KAAK0O,IAAe,MAAXwkB,EAAMzjB,OAGfzP,KAAKoqE,mBAAmBn3C,GACxBjzB,KAAKoqE,mBAAmBl3C,GAQxB,IALA,IAAIy3C,EAAiB13C,EAAKk1C,WACtByC,EAAoBD,EAAe7/D,OACnC+/D,EAAkB33C,EAAMi1C,WACxB2C,EAAqBD,EAAgB//D,OACrCigE,EAAgB,IAAI9jE,MAAkB+jE,IAASJ,EAAmBE,IAC7DzqE,EAAI,EAAGA,EAAIuqE,IAAqBvqE,EACvC0qE,EAAc1qE,GAAKqnE,EAAWhvD,KAC5BmS,UAAU8/C,EAAetqE,IACzBA,EAAIyqE,EACAjgD,UAAUggD,EAAgBxqE,IAC1B,GAGR,IAASA,EAAIuqE,EAAmBvqE,EAAIyqE,IAAsBzqE,EACxD0qE,EAAc1qE,GAAKqnE,EAAWhvD,KAC5B,EACAmS,UAAUggD,EAAgBxqE,KAG9BL,KAAKmoE,WAAa4C,GAIpBrjD,EAAAzlB,UAAAgpE,UAAA,SAAU94C,EAAqBnW,GAC7B,IAAKA,EAAKK,GAAE,KAAsB,OAAO,EAIzC,OAAQ61C,EAAApL,gBAAgB30B,IACtB,KAAK+/B,EAAAhyB,aAAa8uB,SAChB,IAAKkD,EAAAxK,WAAWv1B,GAAO,MAEvB,QADIhL,EAAQnnB,KAAKioE,eAAejiD,cAAcksC,EAAA5K,iBAAiBn1B,KACjDnW,KAAKK,GAAE,MAAwBrc,KAAK6pE,YAAY1iD,EAAMlC,MAAOyiD,EAAW9C,SAAS,GAEjG,KAAK1S,EAAAhyB,aAAaglB,SAChB,IAAI/9B,EACJ,QADIA,EAAQnnB,KAAKioE,eAAejiD,cAAcksC,EAAA7K,iBAAiBl1B,KACjDnW,KAAKK,GAAE,MAAwBrc,KAAK6pE,YAAY1iD,EAAMlC,MAAOyiD,EAAW9C,SAAS,GAGnG,OAAO,GAITl9C,EAAAzlB,UAAAipE,qBAAA,SAAqB/4C,GAEnB,OAAQ+/B,EAAApL,gBAAgB30B,IACtB,KAAK+/B,EAAAhyB,aAAa8uB,SAChB,IAAKkD,EAAAxK,WAAWv1B,GAAO,MACvB,IAAIhL,EAAQnnB,KAAKioE,eAAejiD,cAAcksC,EAAA5K,iBAAiBn1B,IAC/DnyB,KAAKipE,aAAa9hD,EAAMlC,MAAOyiD,EAAW9C,SAC1C5kE,KAAKkrE,qBAAqBhZ,EAAA1K,iBAAiBr1B,IAC3C,MAEF,KAAK+/B,EAAAhyB,aAAaglB,SACZ/9B,EAAQnnB,KAAKioE,eAAejiD,cAAcksC,EAAA7K,iBAAiBl1B,IAC/DnyB,KAAKipE,aAAa9hD,EAAMlC,MAAOyiD,EAAW9C,SAC1C,MAEF,KAAK1S,EAAAhyB,aAAasuB,GAChB,IAAIx1B,EAAUk5B,EAAA1I,WAAWr3B,GACzB,IAAK6G,EAAS,MACVk5B,EAAApL,gBAAgB9tB,IAAYk5B,EAAAhyB,aAAa0kB,QAIxCsN,EAAAnL,kBAAkB/tB,IAAYk5B,EAAAjyB,WAAW75B,KAAoC,GAA7B8rD,EAAAlL,iBAAiBhuB,IACjEk5B,EAAAnL,kBAAkB/tB,IAAYk5B,EAAAjyB,WAAW55B,KAAuC,GAAhC6rD,EAAAjL,oBAAoBjuB,IAAkD,GAAjCk5B,EAAAhL,qBAAqBluB,MAE3Gh5B,KAAKkrE,qBAAqBhZ,EAAA9I,eAAej3B,IACzCnyB,KAAKkrE,qBAAqBhZ,EAAA5I,UAAUn3B,KAGxC,MAEF,KAAK+/B,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW71B,IACjB,KAAK+/B,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OACXprE,KAAKqrE,sBAAsBnZ,EAAAjK,cAAc91B,IAI7C,MAEF,KAAK+/B,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY11B,IAClB,KAAK+/B,EAAArpB,SAASyiC,MACZ,IAAIr4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB/zB,GAClEjzB,KAAKkrE,qBAAqBh4C,GACjBg/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB9zB,IAC1ElzB,KAAKkrE,qBAAqBj4C,GAE5B,MAEF,KAAKi/B,EAAArpB,SAAS0iC,MACRt4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAuC,GAA7BsN,EAAAjL,oBAAoBh0B,IAA4C,GAA9Bi/B,EAAAhL,qBAAqBj0B,GAEhGi/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAwC,GAA9BsN,EAAAjL,oBAAoB/zB,IAA8C,GAA/Bg/B,EAAAhL,qBAAqBh0B,IAClHlzB,KAAKkrE,qBAAqBj4C,GAF1BjzB,KAAKkrE,qBAAqBh4C,GAI5B,MAEF,KAAKg/B,EAAArpB,SAAS2iC,MACRv4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB/zB,GAClEjzB,KAAKkrE,qBAAqBh4C,GACjBg/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB9zB,IAC1ElzB,KAAKkrE,qBAAqBj4C,GAE5B,MAEF,KAAKi/B,EAAArpB,SAAS4iC,MACRx4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAsC,GAA7BsN,EAAAjL,oBAAoBh0B,IAA4C,GAA9Bi/B,EAAAhL,qBAAqBj0B,GACxGjzB,KAAKkrE,qBAAqBh4C,GACjBg/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAuC,GAA9BsN,EAAAjL,oBAAoB/zB,IAA8C,GAA/Bg/B,EAAAhL,qBAAqBh0B,IACjHlzB,KAAKkrE,qBAAqBj4C,GAKhC,MAEF,KAAKi/B,EAAAhyB,aAAa0uB,KAGhB,OAFWsD,EAAAvH,cAAcx4B,IAGvB,KAFYnyB,KAAKioE,eAAerlD,QAEnB9I,eAAenL,aAC1B3O,KAAKkrE,qBAAqBhZ,EAAAnH,eAAe54B,EAAM,OAUzDzK,EAAAzlB,UAAAopE,sBAAA,SAAsBl5C,GAEpB,OAAQ+/B,EAAApL,gBAAgB30B,IACtB,KAAK+/B,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW71B,IACjB,KAAK+/B,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OACXprE,KAAKkrE,qBAAqBhZ,EAAAjK,cAAc91B,IAI5C,MAEF,KAAK+/B,EAAAhyB,aAAasuB,GAChB,IAAIz1B,EAASm5B,EAAA5I,UAAUn3B,GACvB,GAAI+/B,EAAApL,gBAAgB/tB,IAAWm5B,EAAAhyB,aAAa0kB,MAAO,CAEjD,IADcsN,EAAA1I,WAAWr3B,GACX,OAIX+/B,EAAAnL,kBAAkBhuB,IAAWm5B,EAAAjyB,WAAW75B,KAAmC,GAA5B8rD,EAAAlL,iBAAiBjuB,IAChEm5B,EAAAnL,kBAAkBhuB,IAAWm5B,EAAAjyB,WAAW55B,MAAuC,GAA/B6rD,EAAAjL,oBAAoBluB,IAAgD,GAAhCm5B,EAAAhL,qBAAqBnuB,OAE1G/4B,KAAKqrE,sBAAsBnZ,EAAA9I,eAAej3B,IAC1CnyB,KAAKqrE,sBAAsBnZ,EAAA1I,WAAWr3B,KAI1C,MAEF,KAAK+/B,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY11B,IAElB,KAAK+/B,EAAArpB,SAASyiC,MACZ,IAAIr4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB/zB,GAClEjzB,KAAKkrE,qBAAqBh4C,GACjBg/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB9zB,IAC1ElzB,KAAKkrE,qBAAqBj4C,GAE5B,MAEF,KAAKi/B,EAAArpB,SAAS0iC,MACRt4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAsC,GAA7BsN,EAAAjL,oBAAoBh0B,IAA4C,GAA9Bi/B,EAAAhL,qBAAqBj0B,GACxGjzB,KAAKkrE,qBAAqBh4C,GACjBg/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAuC,GAA9BsN,EAAAjL,oBAAoB/zB,IAA8C,GAA/Bg/B,EAAAhL,qBAAqBh0B,IACjHlzB,KAAKkrE,qBAAqBj4C,GAE5B,MAEF,KAAKi/B,EAAArpB,SAAS2iC,MACRv4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB/zB,GAClEjzB,KAAKkrE,qBAAqBh4C,GACjBg/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB9zB,IAC1ElzB,KAAKkrE,qBAAqBj4C,GAE5B,MAEF,KAAKi/B,EAAArpB,SAAS4iC,MACRx4C,EAAOi/B,EAAApK,cAAc31B,GACrBe,EAAQg/B,EAAAnK,eAAe51B,GACvB+/B,EAAApL,gBAAgB7zB,IAASi/B,EAAAhyB,aAAa0kB,OAAuC,GAA7BsN,EAAAjL,oBAAoBh0B,IAA4C,GAA9Bi/B,EAAAhL,qBAAqBj0B,GAEhGi/B,EAAApL,gBAAgB5zB,IAAUg/B,EAAAhyB,aAAa0kB,OAAwC,GAA9BsN,EAAAjL,oBAAoB/zB,IAA8C,GAA/Bg/B,EAAAhL,qBAAqBh0B,IAClHlzB,KAAKkrE,qBAAqBj4C,GAF1BjzB,KAAKkrE,qBAAqBh4C,MAiBtCxL,EAAAzlB,UAAAypE,YAAA,SAAYv5C,EAAqBnW,GAM/B,GAHAnR,OAAOmR,GAAQrS,EAAA2H,KAAKG,OAGfuK,EAAKK,GAAG,IAAsC,OAAO,EAE1D,IAAIoa,EACJ,OAAQy7B,EAAApL,gBAAgB30B,IAGtB,KAAK+/B,EAAAhyB,aAAaglB,SAChB,IAAI/9B,EAAQnnB,KAAKioE,eAAejiD,cAAcksC,EAAA7K,iBAAiBl1B,IAC/D,OAAQnyB,KAAK6pE,YAAY1iD,EAAMlC,MAAOyiD,EAAWiE,SAAS,IACnDC,EAAsBzkD,EAAMnL,KAAMA,GAI3C,KAAKk2C,EAAAhyB,aAAa8uB,SAEhB,OADAnkD,OAAOqnD,EAAAxK,WAAWv1B,IACXnyB,KAAK0rE,YAAYxZ,EAAA1K,iBAAiBr1B,GAAOnW,GAIlD,KAAKk2C,EAAAhyB,aAAaklB,UAEhB,IAAIymB,EAAShhE,OAAO7K,KAAKioE,eAAerlD,QAAQ/U,eAAe3M,IAAI2J,OAAOqnD,EAAAtK,iBAAiBz1B,MAE3F,OADAtnB,OAAOghE,EAAOz4D,MAAQ6+C,EAAA7kD,YAAY6Q,QAC3B2tD,EAAsB/gE,OAAgBghE,EAAQ7vD,MAAOA,GAG9D,KAAKk2C,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY11B,IAGlB,KAAK+/B,EAAArpB,SAASyiC,MACd,KAAKpZ,EAAArpB,SAAS0iC,MACd,KAAKrZ,EAAArpB,SAASijC,MACd,KAAK5Z,EAAArpB,SAASkjC,MACd,KAAK7Z,EAAArpB,SAAS2iC,MACd,KAAKtZ,EAAArpB,SAAS4iC,MACd,KAAKvZ,EAAArpB,SAASmjC,MACd,KAAK9Z,EAAArpB,SAASojC,MACd,KAAK/Z,EAAArpB,SAASqjC,MACd,KAAKha,EAAArpB,SAASsjC,MACd,KAAKja,EAAArpB,SAASujC,MACd,KAAKla,EAAArpB,SAASwjC,MACd,KAAKna,EAAArpB,SAASyjC,MACd,KAAKpa,EAAArpB,SAAS0jC,MACd,KAAKra,EAAArpB,SAAS2jC,MACd,KAAKta,EAAArpB,SAAS4jC,MACd,KAAKva,EAAArpB,SAAS6jC,MACd,KAAKxa,EAAArpB,SAAS8jC,MACd,KAAKza,EAAArpB,SAAS+jC,MACd,KAAK1a,EAAArpB,SAASgkC,MACd,KAAK3a,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASkkC,MACd,KAAK7a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASokC,MACd,KAAK/a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MACd,KAAKjb,EAAArpB,SAASukC,MACd,KAAKlb,EAAArpB,SAASwkC,MACd,KAAKnb,EAAArpB,SAASykC,MACd,KAAKpb,EAAArpB,SAAS0kC,MACd,KAAKrb,EAAArpB,SAAS2kC,MACd,KAAKtb,EAAArpB,SAAS4kC,MAAO,OAAO,EAG5B,KAAKvb,EAAArpB,SAAS6kC,OACZ,QAEIxb,EAAApL,gBAAgBrwB,EAAUy7B,EAAApK,cAAc31B,KAAU+/B,EAAAhyB,aAAa0kB,QAEhC,GAA7BsN,EAAAlL,iBAAiBvwB,IAEc,GAA7By7B,EAAAlL,iBAAiBvwB,KAChBz2B,KAAK0rE,YAAYxZ,EAAAnK,eAAe51B,GAAOnW,KAI5Ck2C,EAAApL,gBAAgBrwB,EAAUy7B,EAAAnK,eAAe51B,KAAU+/B,EAAAhyB,aAAa0kB,QAEjC,GAA7BsN,EAAAlL,iBAAiBvwB,IAEc,GAA7By7B,EAAAlL,iBAAiBvwB,KAChBz2B,KAAK0rE,YAAYxZ,EAAApK,cAAc31B,GAAOnW,KASjD,KAAKk2C,EAAArpB,SAAS8kC,OAGZ,QAGMzb,EAAApL,gBAAgBrwB,EAAUy7B,EAAApK,cAAc31B,KAAU+/B,EAAAhyB,aAAa0kB,OAC/DsN,EAAAlL,iBAAiBvwB,IAAYza,EAAKm3C,wBAAwBxpD,EAAA2H,KAAKlO,OAC3DpD,KAAK0rE,YAAYj1C,EAASza,IAG9Bk2C,EAAApL,gBAAgBrwB,EAAUy7B,EAAAnK,eAAe51B,KAAU+/B,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBvwB,IAAYza,EAAKm3C,wBAAwBxpD,EAAA2H,KAAKlO,OAC3DpD,KAAK0rE,YAAYj1C,EAASza,IAMtC,KAAKk2C,EAAArpB,SAAS+kC,OACZ,IAAI/wB,EAAQ,GAAK7gC,EAAK0/B,KACtB,OAAOwW,EAAApL,gBAAgBrwB,EAAUy7B,EAAAnK,eAAe51B,KAAU+/B,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBvwB,GAAWomB,EAIrC,KAAKqV,EAAArpB,SAASglC,OACRhxB,EAAQ,GAAK7gC,EAAK0/B,KACtB,OAAO17C,KAAK0rE,YAAYxZ,EAAApK,cAAc31B,GAAOnW,KAC3Ck2C,EAAApL,gBAAgBrwB,EAAUy7B,EAAAnK,eAAe51B,KAAU+/B,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBvwB,GAAWomB,GAMhC,KAAKqV,EAAArpB,SAASilC,OACRjxB,EAAQ,GAAK7gC,EAAK0/B,KACtB,OAAO1/B,EAAKK,GAAE,KAER61C,EAAApL,gBAAgBrwB,EAAUy7B,EAAAnK,eAAe51B,KAAU+/B,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBvwB,GAAWomB,GAE9B78C,KAAK0rE,YAAYxZ,EAAApK,cAAc31B,GAAOnW,MACpCk2C,EAAApL,gBAAgBrwB,EAAUy7B,EAAAnK,eAAe51B,KAAU+/B,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBvwB,IAAYomB,GAKrC,KAAKqV,EAAArpB,SAASklC,OACd,KAAK7b,EAAArpB,SAASmlC,OACd,KAAK9b,EAAArpB,SAASolC,OACZ,OAAOjuE,KAAK0rE,YAAYxZ,EAAApK,cAAc31B,GAAOnW,IACtChc,KAAK0rE,YAAYxZ,EAAAnK,eAAe51B,GAAOnW,GAGlD,MAGF,KAAKk2C,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW71B,IAGjB,KAAK+/B,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OAAQ,OAAO,EAG5B,KAAKlZ,EAAA3uB,QAAQ2qC,OACb,KAAKhc,EAAA3uB,QAAQ4qC,OACb,KAAKjc,EAAA3uB,QAAQ6qC,UAAW,OAAOpyD,EAAK0/B,KAAO,EAE7C,MAIF,KAAKwW,EAAAhyB,aAAa0kB,MAChB,IAAItjD,EAAa,EACjB,OAAQ4wD,EAAAnL,kBAAkB50B,IACxB,KAAK+/B,EAAAjyB,WAAW75B,IAAO9E,EAAQ4wD,EAAAlL,iBAAiB70B,GAAO,MACvD,KAAK+/B,EAAAjyB,WAAW55B,IAAO/E,EAAQ4wD,EAAAjL,oBAAoB90B,GAAO,MAC1D,KAAK+/B,EAAAjyB,WAAWp5B,IAAOvF,EAAQ8B,IAAI8uD,EAAA/K,iBAAiBh1B,IAAQ,MAC5D,KAAK+/B,EAAAjyB,WAAWn5B,IAAOxF,EAAQ8B,IAAI8uD,EAAA9K,iBAAiBj1B,IAAQ,MAC5D,QAAStnB,QAAO,GAElB,OAAQmR,EAAK5I,MACX,OAAkB,OAAO9R,EAAQ4B,GAAGmrE,WAAa/sE,EAAQ4B,GAAGuhD,UAC5D,OAAmB,OAAOnjD,EAAQ6B,IAAIkrE,WAAa/sE,EAAQ6B,IAAIshD,UAC/D,OAAkB,OAAOnjD,EAAQ,GAAKA,EAAQiC,GAAGkhD,UACjD,OAAmB,OAAOnjD,EAAQ,GAAKA,EAAQkC,IAAIihD,UACnD,QAAoB,OAAuB,KAAP,EAARnjD,GAE9B,MAIF,KAAK4wD,EAAAhyB,aAAaqlB,KAChB,IAAI+oB,OAAQ,EACRn2B,EAAS+Z,EAAA7J,aAAal2B,GAC1B,OAAQ+/B,EAAAhK,aAAa/1B,IACnB,KAAK,EAAMm8C,EAAWn2B,EAASxuC,EAAA2H,KAAKpO,GAAMyG,EAAA2H,KAAK/N,GAAK,MACpD,KAAK,EAAM+qE,EAAWn2B,EAASxuC,EAAA2H,KAAKnO,IAAMwG,EAAA2H,KAAK9N,IAAK,MACpD,QAAW8qE,EAAWn2B,EAASxuC,EAAA2H,KAAKlO,IAAMuG,EAAA2H,KAAK7N,IAEjD,OAAOmoE,EAAsB0C,EAAUtyD,GAMzC,KAAKk2C,EAAAhyB,aAAakuB,MAChB,IAAK8D,EAAApJ,aAAa32B,GAAO,CACvB,IAAIupB,EAAO7wC,OAAOqnD,EAAAlJ,mBAAmB72B,IACjCo8C,EAAOrc,EAAAhJ,cAAc/2B,EAAMupB,EAAO,GACtC,OAAO17C,KAAK0rE,YAAY6C,EAAMvyD,GAEhC,MAIF,KAAKk2C,EAAAhyB,aAAasuB,GAChB,OAAOxuD,KAAK0rE,YAAYxZ,EAAA5I,UAAUn3B,GAAOnW,IAClChc,KAAK0rE,YAAY7gE,OAAOqnD,EAAA1I,WAAWr3B,IAAQnW,GAIpD,KAAKk2C,EAAAhyB,aAAa2xB,OAChB,OAAO7xD,KAAK0rE,YAAYxZ,EAAAhI,cAAc/3B,GAAOnW,IACtChc,KAAK0rE,YAAYxZ,EAAA9H,cAAcj4B,GAAOnW,GAI/C,KAAKk2C,EAAAhyB,aAAa0uB,KAChB,IACI7gD,EADU/N,KAAKioE,eAAerlD,QACJ7U,gBAC1BygE,EAAe3jE,OAAOqnD,EAAAvH,cAAcx4B,IACxC,GAAIpkB,EAAgBmD,IAAIs9D,GAAe,CACrC,IAAI5oD,EAAW7X,EAAgB7M,IAAIstE,GACnC3jE,OAAO+a,EAASxS,MAAQ6+C,EAAA7kD,YAAYsO,UACpC,IAAIsV,EAAwBpL,EAAUjV,UAAUqgB,WAChD,OAAmBpL,EAAU6B,KAAKpL,GAAE,IAC7BuvD,EAAsB56C,EAAYhV,GAE3C,OAAO,EAIT,KAAKk2C,EAAAhyB,aAAaguB,YAAa,OAAO,EAExC,OAAO,GAGTxmC,EAAAzlB,UAAA6b,SAAA,WAGE,IAFA,IAAI2wD,EAAS,EACT79D,EAAS5Q,KAAK4Q,OACXA,GACLA,EAASA,EAAOA,SACd69D,EAEJ,MAAO,QAAUzuE,KAAKykE,eAAiB,KAAOgK,EAAO3wD,WAAa,KAEtE4J,EAl0BA,GAq0BA,SAASkkD,EAAsB0C,EAAgBz7C,GAC7C,OAAQy7C,EAASjyD,GAAE,IACZiyD,EAAS5yB,KAAO7oB,EAAO6oB,MACvB4yB,EAASjyD,GAAE,IAAsBwW,EAAOxW,GAAE,GAUnD,SAASqyD,EAAoBv8C,EAAqBw8C,GAChD,OAAQzc,EAAApL,gBAAgB30B,IACtB,KAAK+/B,EAAAhyB,aAAaglB,SAChBypB,EAAKj9D,IAAIwgD,EAAA7K,iBAAiBl1B,IAC1B,MAEF,KAAK+/B,EAAAhyB,aAAa8uB,SAChB2f,EAAKj9D,IAAIwgD,EAAA5K,iBAAiBn1B,IAG5B,QAAS+/B,EAAA5D,SAASn8B,EAAMw8C,EAAMD,IA51BrBhvE,EAAAgoB,OA40BbhoB,EAAAkvE,eAAA,SAA+Bz8C,EAAqBw8C,GAElD,YAFkD,IAAAA,MAAA,IAAqBxnE,KACvE+qD,EAAA5D,SAASn8B,EAAMw8C,EAAMD,GACdC,64BC9hCT,IAAAjO,EAAAvgE,EAAA,IASAuJ,EAAAvJ,EAAA,GAKA+xD,EAAA/xD,EAAA,GA4BAsJ,EAAAtJ,EAAA,GAYA8xD,EAAA9xD,EAAA,GAwBA4J,EAAA5J,EAAA,IAOA2J,EAAA3J,EAAA,GAIAwvB,EAAAxvB,EAAA,GAKAyJ,EAAAzJ,EAAA,GA+DAwJ,EAAAxJ,EAAA,GAQA0J,EAAA1J,EAAA,GAWA0uE,EAAA,oBAAAA,IAGE7uE,KAAA4qB,OAAiBnhB,EAAAL,OAAOgJ,OAExBpS,KAAAqS,UAAiB,EAEjBrS,KAAA8uE,cAAqB,EAErB9uE,KAAA+uE,aAAoB,EAEpB/uE,KAAAgvE,aAAoB,EAEpBhvE,KAAA+nB,WAAkB,EAElB/nB,KAAAivE,eAAsB,EAEtBjvE,KAAAsS,WAAkB,EAElBtS,KAAA4Y,cAA2C,KAE3C5Y,KAAAkvE,SAAQ,EAGRlvE,KAAAuS,kBAAyB,EAEzBvS,KAAAwS,gBAAuB,EA0BzB,OAvBEzR,OAAAC,eAAI6tE,EAAA5sE,UAAA,WAAQ,KAAZ,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAO+I,wCAI/BpR,OAAAC,eAAI6tE,EAAA5sE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAO+I,OAASxI,EAAA2H,KAAKuhD,QAAUlpD,EAAA2H,KAAKwhD,yCAI5D/xD,OAAAC,eAAI6tE,EAAA5sE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAO+I,OAASxI,EAAA2H,KAAKqhD,QAAUhpD,EAAA2H,KAAKshD,yCAI5D7xD,OAAAC,eAAI6tE,EAAA5sE,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAO+I,OAAS+/C,EAAAjyB,WAAW55B,IAAM6rD,EAAAjyB,WAAW75B,qCAIpEyoE,EAAA5sE,UAAA8P,WAAA,SAAWo9D,GACT,OAAoC,IAA5BnvE,KAAKkvE,SAAWC,IAE5BN,EApDA,GAAanvE,EAAAmvE,UAuDb,SAAkBO,GAChBA,IAAA,eAGAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,yBAGAA,IAAA,yBAEAA,IAAA,8BAEAA,IAAA,kCAfF,CAAkB1vE,EAAA0vE,cAAA1vE,EAAA0vE,YAAW,KAmB7B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,eAEAA,IAAA,eAEAA,IAAA,+BAEAA,IAAA,+BATF,CAAkB3vE,EAAA2vE,kBAAA3vE,EAAA2vE,gBAAe,KAajC,IAqjRIC,EACAC,EAtjRJC,EAAA,SAAAjiE,GA2CE,SAAAiiE,EAAY5sD,EAAkBxR,QAAA,IAAAA,MAAA,MAA9B,IAAA3D,EACEF,EAAA/M,KAAAR,KAAM4iB,EAAQpV,cAAYxN,KA/B5ByN,EAAAgiE,uBAAqC,GAErChiE,EAAAiiE,YAA2B,KAE3BjiE,EAAAkiE,YAAoBhmE,EAAA2H,KAAKG,KAMzBhE,EAAAmiE,eAAkC,GAElCniE,EAAAoiE,eAA4C,IAAIzoE,IAEhDqG,EAAAqiE,cAA0B,CAAE,QAE5BriE,EAAAsiE,QAAqB,EAErBtiE,EAAAuiE,QAAuB,EAEvBviE,EAAAwiE,gBAAe,EAEfxiE,EAAAyiE,oBAA0C,IAAI/oE,IAywFtCsG,EAAA0iE,eAAkC,KAClC1iE,EAAA2iE,eAAkC,KAClC3iE,EAAA4iE,eAAkC,KAClC5iE,EAAA6iE,eAAkC,KAlwFxC7iE,EAAKmV,QAAUA,EACfnV,EAAKmB,SAAWgU,EAAQhU,SACnBwC,IAASA,EAAU,IAAIy9D,GAC5BphE,EAAK2D,QAAUA,EACf3D,EAAKob,aAAe5W,QAGlB+4D,IAAI55D,EAAQkB,WAAY,IAE1B7E,EAAK9N,OAASuyD,EAAAnd,OAAOpzC,SACrB,IAAIggD,EAAqC,SACrCl0C,EAAK2D,QAAQW,WAAU,MAAmB4vC,GAAgBuQ,EAAAvxB,aAAa4vC,SACvE9iE,EAAK2D,QAAQW,WAAU,KAA0B4vC,GAAgBuQ,EAAAvxB,aAAa6vC,gBAE9E/iE,EAAK2D,QAAQW,WAAU,KAAgB4vC,GAAgBuQ,EAAAvxB,aAAa8vC,SACpEhjE,EAAK2D,QAAQW,WAAU,KAAuB4vC,GAAgBuQ,EAAAvxB,aAAa+vC,YAC3EjjE,EAAK2D,QAAQW,WAAU,KAA0B4vC,GAAgBuQ,EAAAvxB,aAAagwC,SAElFljE,EAAK9N,OAAO+hD,YAAYC,KA67Q5B,OA5/Q8B7yC,EAAA0gE,EAAAjiE,GAsCrBiiE,EAAAoB,QAAP,SAAehuD,EAAkBxR,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIo+D,EAAS5sD,EAASxR,GAASw/D,WA4BxCpB,EAAAvtE,UAAA2uE,QAAA,uBACMx/D,EAAUpR,KAAKoR,QACfzR,EAASK,KAAKL,OACdijB,EAAU5iB,KAAK4iB,QAGnBA,EAAQzR,WAAWC,GAGnB,IAAIy/D,EAAwBjuD,EAAQlS,mBAAmB,QAAS,IAAI/G,EAAA8Z,UAAU,GAAI9Z,EAAA2H,KAAKG,OACvFo/D,EAAsBliE,aAAe,QACrC,IAAImiE,EAAoB,IAAI7pE,MAC5BjH,KAAK+wE,YAAcF,EAAsBppD,KACzCznB,KAAKgxE,YAAcF,EAGf1/D,EAAQc,UACVvS,EAAOo9C,UAAU2jB,EAAA2E,eAAe4L,UAAW/e,EAAAjyB,WAAW55B,KAAK,EAAM1G,EAAO0D,IAAI,IAC5E1D,EAAOo9C,UAAU2jB,EAAA2E,eAAe6L,UAAWhf,EAAAjyB,WAAW55B,KAAK,EAAM1G,EAAO0D,IAAI,MAE5E1D,EAAOo9C,UAAU2jB,EAAA2E,eAAe4L,UAAW/e,EAAAjyB,WAAW75B,KAAK,EAAMzG,EAAOyD,IAAI,IAC5EzD,EAAOo9C,UAAU2jB,EAAA2E,eAAe6L,UAAWhf,EAAAjyB,WAAW75B,KAAK,EAAMzG,EAAOyD,IAAI,KAI9E,IAAI+tE,EAAQvuD,EAAQhV,gBACpB,IAAiB,IAAAuN,EAAAzG,EAAAy8D,EAAM72D,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAE,EAAxB5B,EAAIoI,EAAA9Z,OACFyR,OAAOyH,UACdxa,KAAKoxE,YAAYp+D,GACjBhT,KAAKqxE,eAAer+D,sGAKxB,IAAIs+D,GAAgBR,EAAkBhmE,OAClCmkE,EAAgB79D,EAAQ69D,cAC5B,IAAKqC,GAAgBrC,EAAe,CAClC,IAAIt+D,EAAYkgE,EAAsBlgE,WACjC2gE,GAAgBrC,IACnBtvE,EAAOo9C,UAAU2jB,EAAA2E,eAAekM,QAASrf,EAAAjyB,WAAW75B,KAAK,EAAMzG,EAAOyD,IAAI,IAC1E0tE,EAAkBU,QAChB7xE,EAAO46C,GACL56C,EAAOq4C,WAAW0oB,EAAA2E,eAAekM,QAASrf,EAAAjyB,WAAW75B,KACrDzG,EAAOg7C,SACPh7C,EAAOi6C,WAAW8mB,EAAA2E,eAAekM,QAAS5xE,EAAOyD,IAAI,OAI3D,IAAIquE,EAAU9xE,EAAOy9C,YACnByzB,EAAsBliE,aACtB3O,KAAK0xE,mBACH/gE,EAAU0W,eACV1W,EAAUqgB,WACVrgB,EAAUyW,UAEZzd,EAAAuqD,mBAAmB2c,EAAsB5qD,kBACzCtmB,EAAOm6C,MAAM,KAAMg3B,IAErBD,EAAsB/oD,SAASnoB,EAAQ8xE,GAClCxC,EACAtvE,EAAOk+C,kBAAkBgzB,EAAsBliE,aAAc,WAD9ChP,EAAO8gD,SAASgxB,GAKd,EAApBzxE,KAAKiwE,iBAAgDvP,EAAAiR,oBAAoB3xE,MACrD,EAApBA,KAAKiwE,iBAAgDvP,EAAAkR,oBAAoB5xE,MAC7EL,EAAOu9C,aAAawjB,EAAA2E,eAAe6L,WACX,EAApBlxE,KAAKiwE,iBAAwCvP,EAAAmR,YAAY7xE,MAG7D,IAAI6oB,EAAe7oB,KAAK6oB,aACxBA,EAAeipD,UAAUjpD,EAAczX,EAAQI,UAAU+gD,UACzDvyD,KAAK6oB,aAAeA,EACpBlpB,EAAOu9C,aAAawjB,EAAA2E,eAAe4L,WACX,EAApBjxE,KAAKiwE,kBACH7+D,EAAQc,SACVvS,EAAOo9C,UACL2jB,EAAA2E,eAAe4L,UACf/e,EAAAjyB,WAAW55B,KACX,EACA1G,EAAO0D,IAAI08C,QAAQl3B,GAAem3B,SAASn3B,KAG7ClpB,EAAOo9C,UACL2jB,EAAA2E,eAAe4L,UACf/e,EAAAjyB,WAAW75B,KACX,EACAzG,EAAOyD,IAAI28C,QAAQl3B,MAMzB,IAAIkpD,EAAiB3gE,EAAQW,WAAU,KAAqBX,EAAQ29D,aAAe,EACnFpvE,EAAO4/C,UACLv/C,KAAKoR,QAAQkB,YAAiCtS,KAAK4vE,eAAe9kE,OAC9Di1C,QAAQiyB,UAAUF,UAAUjpD,EAAc,OAAU5W,QAAQ,GAAI,KAChE,EACJ8/D,EAAiB3gE,EAAQ29D,aAAe7c,EAAAnd,OAAO8R,iBAC/C7mD,KAAK4vE,eACLx+D,EAAQwZ,OACR,SACAmnD,GAIE3gE,EAAQ09D,cAAcnvE,EAAOs/C,gBAAgB,IAAK,MAAO,SAAU8yB,GAGvE,IAAIjC,EAAgB9vE,KAAK8vE,cACzBnwE,EAAO2gD,iBAAiBwvB,EAAchlE,OAAQ,WAAYglE,GAC1DnwE,EAAOy9C,YAAY,OAAQp9C,KAAK0xE,mBAAmB,KAAM/nE,EAAA2H,KAAKG,MAAO,KAAM9R,EAAOm6C,MAAM,KAAM,KAG1F1oC,EAAQ49D,aAAarvE,EAAOo/C,eAAe,IAAK,MAAO,aAG3D,IAAiB,IAAAjjC,EAAApH,EAAA1U,KAAK4iB,QAAQhV,YAAY0M,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAA/C,IAAI5B,KAAI+I,EAAAza,OACFyR,OAAOyH,SAASxa,KAAKiyE,oBAAoBj/D,qGAEpD,OAAOrT,GAID6vE,EAAAvtE,UAAAgwE,oBAAR,SAA4Bj/D,WACtB6I,EAAU7I,EAAKtT,QACnB,GAAImc,MAAS,IAA2B,IAAAq2D,EAAAx9D,EAAAmH,GAAOs2D,EAAAD,EAAAt9D,QAAAu9D,EAAAt9D,KAAAs9D,EAAAD,EAAAt9D,OAAA,CAAzB,IAAAmP,EAAAhP,EAAAo9D,EAAA7wE,MAAA,GAACV,EAAAmjB,EAAA,GAAM1I,EAAA0I,EAAA,GAAoB/jB,KAAKoyE,mBAAmBxxE,EAAMya,qGAC/E,IAAIrG,EAAchC,EAAKgC,YACvB,GAAIA,EACF,IAAK,IAAI3U,EAAI,EAAGyS,EAAIkC,EAAYlK,OAAQzK,EAAIyS,IAAKzS,EAAGL,KAAKiyE,oBAAoBj9D,EAAY3U,KAKrFmvE,EAAAvtE,UAAAmwE,mBAAR,SAA2BxxE,EAAc6U,EAAkB48D,uBACzD,YADyD,IAAAA,MAAA,IACjD58D,EAAQrC,MAGd,KAAK6+C,EAAA7kD,YAAY2N,mBAEf,GADIoK,EAAgC1P,EAAS0P,cAE3C,IAAqB,IAAArJ,EAAApH,EAAAyQ,EAAU7K,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAApC,IAAIgR,EAAQ7J,EAAAza,MACXktE,EAAe5tE,EACnB,GAAIglB,EAASvJ,GAAG5S,EAAApH,YAAYwP,SAE1B28D,IADI8D,EAAW1sD,EAASjX,cACC+S,UAAU4wD,EAASj0C,YAAY,MAE1Dr+B,KAAKoyE,mBAAmB5D,EAAc5oD,EAAUysD,qGAGpD,MAEF,KAAKpgB,EAAA7kD,YAAY+J,gBACf,IAAIgO,EACJ,GADIA,EAA6B1P,EAAS0P,cAExC,IAAqB,IAAArQ,EAAAJ,EAAAyQ,EAAU7K,UAAQrE,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAApC,IAGG09D,EAHC1sD,EAAQ3P,EAAA3U,MACXktE,EAAe5tE,EACnB,GAAIglB,EAASvJ,GAAG5S,EAAApH,YAAYwP,SAE1B28D,IADI8D,EAAW1sD,EAASjX,cACC+S,UAAU4wD,EAASj0C,YAAY,MAE1Dr+B,KAAKoyE,mBAAmB5D,EAAc5oD,EAAUysD,qGAGpD,MAEF,KAAKpgB,EAAA7kD,YAAYkO,mBACf,IAAIza,EAA6B4U,EAAS8F,gBACtCg3D,EAA6B98D,EAAS+F,gBACtC3a,GAAQb,KAAKoyE,mBAAmB3oE,EAAAjH,cAAgB5B,EAAMC,EAAQwxE,GAC9DE,GAAQvyE,KAAKoyE,mBAAmB3oE,EAAAhH,cAAgB7B,EAAM2xE,EAAQF,GAClE,MAIF,KAAKpgB,EAAA7kD,YAAY6Q,OACDxI,EAAQ4G,GAAG5S,EAAApH,YAAYma,QAAU/G,EAAQ4G,GAAG5S,EAAApH,YAAY+c,OAAS3V,EAAApH,YAAYid,WAC1Etf,KAAKoR,QAAQW,WAAU,GAMtC/R,KAAKL,OAAO0+C,gBAAgB5oC,EAAQ9G,aAAc0jE,EAASzxE,GAL3DZ,KAAKqV,MACH3L,EAAA4L,eAAek9D,+BACN/8D,EAAS6C,eAAe3I,OAKrC,MAEF,KAAKsiD,EAAA7kD,YAAYyX,UACEpP,EAASqP,aAAgB9kB,KAAKoR,QAAQW,WAAU,GAM/D/R,KAAKL,OAAO0+C,gBAAgB5oC,EAAQ9G,aAAc0jE,EAASzxE,GAL3DZ,KAAKqV,MACH3L,EAAA4L,eAAek9D,+BACH/8D,EAAS6C,eAAe3I,OAKxC,MAEF,KAAKsiD,EAAA7kD,YAAYsO,SACf,IACI/K,GADAiV,EAAqBnQ,GACA9E,UACrBA,EAAU6jD,mBAAqB7jD,EAAU0W,eAAevc,SAE1D8a,EAAW5lB,KAAKyyE,iBAAiB7sD,GACjC5lB,KAAK0yE,iBAEH9sD,EAASvJ,GAAG5S,EAAApH,YAAYswE,WAAW3yE,KAAKL,OAAOk+C,kBAAkBj4B,EAASjX,aAAc0jE,EAASzxE,GACrG,MAEF,KAAKqxD,EAAA7kD,YAAYqO,UACX5a,EAAoB4U,EAASuT,iBACrBhpB,KAAKoyE,mBAAmB3oE,EAAAjH,cAAgB5B,EAAMC,EAAQwxE,IAC9DE,EAAoB98D,EAASwT,iBACrBjpB,KAAKoyE,mBAAmB3oE,EAAAhH,cAAgB7B,EAAM2xE,EAAQF,GAClE,MAEF,KAAKpgB,EAAA7kD,YAAYuO,MACf3b,KAAK4yE,wBAAwBP,EAAS5oE,EAAAjH,cAAgB5B,EAAa6U,GAC9DA,EAAQ4G,GAAG5S,EAAApH,YAAYid,WAC1Btf,KAAK6yE,wBAAwBR,EAAS5oE,EAAAhH,cAAgB7B,EAAa6U,GAErE,MAEF,KAAKw8C,EAAA7kD,YAAYwO,MAEf,IAAanG,EAASuG,KAAK82D,YAAa,CACtC,IAAInzE,EAASK,KAAKL,OACdgP,EAAuB8G,EAAS9G,aACpChP,EAAOo9C,UAAUpuC,EAAcujD,EAAAjyB,WAAW75B,KAAK,EAAOzG,EAAOyD,IAAYqS,EAASlG,KAClF5P,EAAO0+C,gBAAgB1vC,EAAc0jE,EAASzxE,GAEhD,MAIF,KAAKqxD,EAAA7kD,YAAYiX,KACjB,KAAK4tC,EAAA7kD,YAAYgX,UACjB,KAAK6tC,EAAA7kD,YAAY0V,KACjB,KAAKmvC,EAAA7kD,YAAY6W,eAAgB,MAEjC,QAASpZ,QAAO,GAIlB,IAAIgR,EAAUpG,EAAQoG,QACtB,GAAIA,EAAS,CACX,IAAIk3D,EAAYV,EAASzxE,GAAQ6U,EAAQrC,MAAQ6+C,EAAA7kD,YAAYwO,MACzDnS,EAAA/G,mBACA+G,EAAA9G,kBAEJ,GACE8S,EAAQrC,MAAQ6+C,EAAA7kD,YAAYgX,WAC5B3O,EAAQrC,MAAQ6+C,EAAA7kD,YAAY0V,SAE5B,IAAmB,IAAAzM,EAAA3B,EAAAmH,EAAQvB,UAAQvB,EAAA1C,EAAAzB,QAAAmE,EAAAlE,KAAAkE,EAAA1C,EAAAzB,OAAE,EAA5ByG,EAAMtC,EAAAzX,OACD+a,GAAG5S,EAAApH,YAAYuP,SAC3B5R,KAAKoyE,mBAAmB/2D,EAAOza,KAAMya,EAAQ03D,8GAG/C,IAAmB,IAAA14D,EAAA3F,EAAAmH,EAAQvB,UAAQC,EAAAF,EAAAzF,QAAA2F,EAAA1F,KAAA0F,EAAAF,EAAAzF,OAAE,CAAhC,IAAIyG,KAAMd,EAAAjZ,OACF+a,GAAG5S,EAAApH,YAAY00D,UAC1B/2D,KAAKoyE,mBAAmB/2D,EAAOza,KAAMya,EAAQ03D,wGAO7CvD,EAAAvtE,UAAA2wE,wBAAR,SAAgChyE,EAAcsqB,GAC5C,IAAIvrB,EAASK,KAAKL,OACdqc,EAAOkP,EAAMlP,KACbxK,EAAYxR,KAAKoR,QAAQI,UACzBwhE,EAAWrzE,EAAOu4C,KAAKl8B,EAAKu2C,SAAUv2C,EAAKK,GAAE,GAC/C1c,EAAOi4C,UAAU,EAAGpmC,EAAUsiD,gBAC9B93C,EAAK83C,eAAgB5oC,EAAMrC,cAGzB7M,EAAKi3D,YAAWD,EAAWhzE,KAAKkzE,WAAWF,IAC/CrzE,EAAOy9C,YACLx8C,EACAZ,KAAK0xE,mBAAmB,KAAM11D,EAAMxK,GACpC,KACAwhE,GAEFrzE,EAAOk+C,kBAAkBj9C,EAAMA,IAIzB4uE,EAAAvtE,UAAA4wE,wBAAR,SAAgCjyE,EAAcsqB,GAC5C,IAAIvrB,EAASK,KAAKL,OACdqc,EAAOkP,EAAMlP,KACbm3D,EAAan3D,EAAK83C,eAClBtiD,EAAYxR,KAAKoR,QAAQI,UACzB4hE,EAAiB5hE,EAAUsiD,eAC3Buf,EAAY1zE,EAAOi4C,UAAU,EAAGu7B,GAChCn3D,EAAKi3D,YACPI,EAAYrzE,KAAKszE,kBACf3zE,EAAOu4C,KAAKl8B,EAAKu2C,UAAU,EACzB5yD,EAAOi4C,UAAU,EAAGw7B,GACpBD,EAAYjoD,EAAMrC,cAEpBwqD,IAGJ1zE,EAAOy9C,YACLx8C,EACAZ,KAAK0xE,mBAAmB,CAAE11D,GAAQrS,EAAA2H,KAAKG,KAAMD,GAC7C,KACA7R,EAAOs3C,MACLj7B,EAAKu2C,SACL5yD,EAAOi4C,UAAU,EAAGw7B,GACpBC,EACAF,EACAjoD,EAAMrC,eAGVlpB,EAAOk+C,kBAAkBj9C,EAAMA,IAMjC4uE,EAAAvtE,UAAAsxE,eAAA,SAAe99D,EAAkB+9D,GAC/B,YAD+B,IAAAA,OAAA,GACvB/9D,EAAQrC,MACd,KAAK6+C,EAAA7kD,YAAY6Q,OACfje,KAAKyzE,cAAsBh+D,GAC3B,MAEF,KAAKw8C,EAAA7kD,YAAYiX,KACfrkB,KAAK0zE,YAAkBj+D,GACvB,MAEF,KAAKw8C,EAAA7kD,YAAY2N,mBACVtF,EAAQ4G,GAAG5S,EAAApH,YAAYwP,UAC1B7R,KAAK2zE,kCAAqDl+D,EAAS,IAErE,MAEF,KAAKw8C,EAAA7kD,YAAY+J,gBACV1B,EAAQ4G,GAAG5S,EAAApH,YAAYwP,UAC1B7R,KAAK4zE,+BAA+Cn+D,EAAS,IAE/D,MAEF,KAAKw8C,EAAA7kD,YAAYkO,mBACf,IAAIC,EAAsC9F,EAAS8F,gBAC/CA,GACFvb,KAAK2zE,kCAAkCp4D,EAAiB,IAE1D,IAAIC,EAAsC/F,EAAS+F,gBAC/CA,GACFxb,KAAK2zE,kCAAkCn4D,EAAiB,IAE1D,MAEF,KAAKy2C,EAAA7kD,YAAYgX,UACjB,KAAK6tC,EAAA7kD,YAAY6W,eACjB,KAAKguC,EAAA7kD,YAAYyX,UAAW,MAC5B,QAASha,QAAO,EAAOonD,EAAA7kD,YAAYqI,EAAQrC,OAEzCogE,GAAgBxzE,KAAKwzE,eAAe/9D,IAI1C+5D,EAAAvtE,UAAAuxE,eAAA,SAAe/9D,WACToG,EAAUpG,EAAQoG,QACtB,GAAIA,MAAS,IAAoB,IAAAkI,EAAArP,EAAAmH,EAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAA,CAA/B,IAAIi/D,EAAO14D,EAAA7Z,MAAsBtB,KAAKuzE,eAAeM,uGAIzErE,EAAAvtE,UAAAovE,eAAA,SAAer+D,eACTtT,EAAUsT,EAAKtT,QACnB,GAAIA,MAAS,IAAoB,IAAAyb,EAAAzG,EAAAhV,EAAQ4a,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAA,CAA/B,IAAIa,EAAO2F,EAAA9Z,MAAsBtB,KAAKuzE,eAAe99D,qGACvE,IAAIT,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAA8+D,EAAAp/D,EAAAM,GAAW++D,EAAAD,EAAAl/D,QAAAm/D,EAAAl/D,KAAAk/D,EAAAD,EAAAl/D,OAAE,CAA/B,IAAIK,EAAU8+D,EAAAzyE,MACjBtB,KAAKoxE,YAAYn8D,GACjBjV,KAAKqxE,eAAep8D,uGAQ1Bu6D,EAAAvtE,UAAA+xE,kBAAA,SAAkBC,EAAwC7N,GACxD,IAAIpzD,EAEAkhE,EADAtmE,EAAc5N,KAAK4iB,QAAQhV,YAE/B,GAAIA,EAAYsD,IAAI+iE,GAClBjhE,EAAOpF,EAAY1M,IAAI+yE,OAClB,KAAIrmE,EAAYsD,IAAIgjE,EAAgBD,EAAiCxqE,EAAA1G,cAO1E,YAJA/C,KAAKqV,MACH3L,EAAA4L,eAAeC,iBACf6wD,EAAWz2D,MAAOskE,GAJpBjhE,EAAOpF,EAAY1M,IAAIgzE,GAQzBl0E,KAAKoxE,YAAYp+D,IAInBw8D,EAAAvtE,UAAAmvE,YAAA,SAAYp+D,GACV,IAAIA,EAAKqJ,GAAG5S,EAAApH,YAAYswE,UAAxB,CACA3/D,EAAKtE,IAAIjF,EAAApH,YAAYswE,UAGrB,IAAInvD,EAAgBxQ,EAAKwQ,cACrB2wD,EAAen0E,KAAKgxE,YACpBF,EAAoB,IAAI7pE,MAC5BjH,KAAKgxE,YAAcF,EAGnB,IAAIsD,EAAep0E,KAAK+wE,YACpBtpD,EAAOjE,EAAciE,KACzBznB,KAAK+wE,YAActpD,EACnB,IAAK,IAAIxU,EAAaD,EAAKD,OAAOE,WAAY5S,EAAI,EAAGyS,EAAIG,EAAWnI,OAAQzK,EAAIyS,IAAKzS,EACnFL,KAAKq0E,yBAAyBphE,EAAW5S,GAAIywE,GAO/C,GALA9wE,KAAKs0E,mBAAmB7sD,EAAMqpD,GAC9B9wE,KAAK+wE,YAAcqD,EACnBp0E,KAAKgxE,YAAcmD,EAGfrD,EAAkBhmE,OAAQ,CAC5B,IAAInL,EAASK,KAAKL,OACdkoB,EAASrE,EAAcwC,cACvBuuD,EAAY1sD,EAAO/c,OACnBuyC,EAAW,IAAIp2C,MAAkBstE,GACrC,IAASl0E,EAAI,EAAGA,EAAIk0E,IAAal0E,EAAGg9C,EAASh9C,GAAKwnB,EAAOxnB,GAAG2b,KAAK83C,eACjEn0D,EAAOy9C,YACL55B,EAAc7U,aACd3O,KAAK0xE,mBAAmBluD,EAAc7S,UAAU0W,eAAgB7D,EAAc7S,UAAUqgB,YACxFqsB,EACAyzB,EAAkBhmE,OAAS,EACvBnL,EAAOm6C,MAAM,KAAMg3B,GACnBA,EAAkB,IAExBqD,EAAa51D,KACX5e,EAAOa,KAAKgjB,EAAc7U,aAAc,KAAMujD,EAAAjyB,WAAWsY,UAO/Di3B,EAAAvtE,UAAAwxE,cAAA,SAAcn3D,GACZ,GAAIA,EAAOD,GAAG5S,EAAApH,YAAYswE,UAAW,OAAO,EAC5Cr2D,EAAO5N,IAAIjF,EAAApH,YAAYswE,UAEvB,IAAIhzE,EAASK,KAAKL,OACd60E,EAA0B,EAC1BC,GAA+B,EAC/BlT,EAAWjlD,EAAOilD,SAClBmT,EAAkBp4D,EAAOo4D,gBAE7B,IAAKp4D,EAAOD,GAAG5S,EAAApH,YAAYihB,UAGzB,GAAIi+C,EAAU,CACZ,IAAIgC,EAAevjE,KAAK4O,SAASiyD,YAAYU,EAAUjlD,EAAO1L,QAC9D,IAAK2yD,EAAc,OAAO,EAC1B,GAAIA,GAAgB55D,EAAA2H,KAAKG,KAKvB,OAJAzR,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfE,EAAS5xD,QAEJ,EAET2M,EAAOL,QAAQsnD,OAGV,KAAImR,EAyBT,OAJA10E,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACf/kD,EAAOhE,eAAe3I,MAAMu3D,QAEvB,EAxBP,IAAIkN,EAAep0E,KAAK+wE,YASxB,GARIz0D,EAAOnE,aAAa85C,EAAA5kD,eAAemS,QACrCxf,KAAK+wE,YAAcz0D,EAAOtJ,KAAKwQ,cAAciE,MAE/C+sD,EAAWx0E,KAAK20E,kBAAkBD,EAAiB/qE,EAAA2H,KAAKyhD,KACtD,IAEE/yD,KAAKkwE,oBAAoBh/D,IAAIsjE,KAAWC,GAAyB,GACrEz0E,KAAK+wE,YAAcqD,EACfp0E,KAAK2vE,aAAehmE,EAAA2H,KAAKG,KAK3B,OAJAzR,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACfF,EAAgB/kE,MAAO3P,KAAK2vE,YAAY7xD,WAAY,WAE/C,EAETxB,EAAOL,QAAQjc,KAAK2vE,aAaxB,GAAIrzD,EAAOD,GAAG5S,EAAApH,YAAY6f,UAAY5F,EAAOnE,aAAa85C,EAAA5kD,eAAeyE,SAGvE,OAFIwK,EAAO3N,cAAgB+xD,EAAA2E,eAAe4L,UAAWjxE,KAAKiwE,iBAAe,EAChE3zD,EAAO3N,cAAgB+xD,EAAA2E,eAAe6L,YAAWlxE,KAAKiwE,iBAAe,IACvE,EAGT,IAAIj0D,EAAOM,EAAON,KACdm3D,EAAan3D,EAAK83C,eAClB+gB,EAAqBv4D,EAAOD,GAAG5S,EAAApH,YAAYma,QAAUF,EAAOD,GAAG5S,EAAApH,YAAY+c,OAAS3V,EAAApH,YAAYid,UAChGw1D,EAAmBx4D,EAAOnE,aAAa85C,EAAA5kD,eAAekS,QAG1D,GAAIjD,EAAOD,GAAG5S,EAAApH,YAAY6f,SAGxB,OAAI2yD,GAAsB70E,KAAKoR,QAAQW,WAAU,IAC/CuK,EAAO5N,IAAIjF,EAAApH,YAAY0yE,eACvBC,EAAiB14D,EAAQA,EAAOrL,aAChCtR,EAAOy/C,gBACL9iC,EAAO3N,aACP2gE,EACAC,EACA4D,GAEF72D,EAAO5N,IAAIjF,EAAApH,YAAYswE,WAChB,IAIP3yE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfhC,EAAOrL,YAAYtB,QAGhB,GAKT,IAAIslE,GAAoB,EAGxB,GAAIP,EAAiB,CACnB,IAAKF,EAAU,CACTJ,EAAep0E,KAAK+wE,YACpBz0D,EAAOnE,aAAa85C,EAAA5kD,eAAemS,QACrCxf,KAAK+wE,YAAcz0D,EAAOtJ,KAAKwQ,cAAciE,MAE/C+sD,EAAWx0E,KAAK20E,kBAAkBD,EAAiB14D,EACjD,IAEEhc,KAAKkwE,oBAAoBh/D,IAAIsjE,KAAWC,GAAyB,GACrEz0E,KAAK+wE,YAAcqD,EAarB,GAVIliB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QACxCiwB,GACFL,EAAW70E,EAAO0iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QAAOqwB,GAAoB,IAEzEA,GAAoB,GAKpBH,EACF,GAAIG,EACFj1E,KAAKqe,QACH3U,EAAA4L,eAAe4/D,gCACfR,EAAgB/kE,WAEb,CAGL,OAFA9E,OAAOqnD,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,OAClCsN,EAAAnL,kBAAkBytB,IAE/B,KAAKtiB,EAAAjyB,WAAW75B,IACdkW,EAAOkI,kBAAiB,EACxBlI,EAAOoI,qBAAuBzS,QAAQigD,EAAAlL,iBAAiBwtB,GAAW,GAClE,MAEF,KAAKtiB,EAAAjyB,WAAW55B,IACdiW,EAAOkI,kBAAiB,EACxBlI,EAAOoI,qBAAuBzS,QAC5BigD,EAAAjL,oBAAoButB,GACpBtiB,EAAAhL,qBAAqBstB,IAEvB,MAEF,KAAKtiB,EAAAjyB,WAAWp5B,IACdyV,EAAOkI,kBAAiB,EACxBlI,EAAOsI,mBAAqBstC,EAAA/K,iBAAiBqtB,GAC7C,MAEF,KAAKtiB,EAAAjyB,WAAWn5B,IACdwV,EAAOkI,kBAAiB,EACxBlI,EAAOsI,mBAAqBstC,EAAA9K,iBAAiBotB,GAC7C,MAEF,QAEE,OADA3pE,QAAO,IACA,EAGXyR,EAAO5N,IAAIjF,EAAApH,YAAYsiB,eAM3B6vD,EAAWx4D,EAAK+3C,aAAap0D,GAG/B,IAAIgP,EAAe2N,EAAO3N,aAiB1B,OAfIsmE,GACEH,GACF90E,KAAKqV,MACH3L,EAAA4L,eAAeuI,8BACfhT,OAAOjB,EAAAm2B,cAAcn2B,EAAAmB,cAAcwU,OAAQjD,EAAO64D,iBAAiBxlE,MAAO,UAG9EhQ,EAAOo9C,UAAUpuC,EAAcwkE,GAAY,EAAMn3D,EAAK+3C,aAAap0D,IAC/Dqc,EAAKi3D,YAAcwB,IAAwBD,EAAWx0E,KAAKkzE,WAAWsB,IAC1Ex0E,KAAKgxE,YAAYzyD,KACf5e,EAAOi6C,WAAWjrC,EAAc6lE,KAExBM,GACVn1E,EAAOo9C,UAAUpuC,EAAcwkE,GAAa0B,EAAoBL,IAE3D,GAKThF,EAAAvtE,UAAAyxE,YAAA,SAAYj+D,WACV,GAAIA,EAAQ4G,GAAG5S,EAAApH,YAAYswE,UAAW,OAAO,EAC7Cl9D,EAAQ/G,IAAIjF,EAAApH,YAAYswE,UAExB,IAAIhzE,EAASK,KAAKL,OAClBK,KAAK0vE,YAAcj6D,EACnB,IAAI2/D,EAAkC,KAClCC,GAAqB,EACrBC,EAAW7/D,EAAQ4G,GAAG5S,EAAApH,YAAYma,QAAU/G,EAAQ0C,aAAa85C,EAAA5kD,eAAekS,QAEpF,GAAI9J,EAAQoG,YACV,IAAmB,IAAAkI,EAAArP,EAAAe,EAAQoG,QAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAAxC,IAAIyG,EAAMF,EAAA7Z,MACb,GAAI+Z,EAAOjI,MAAQ6+C,EAAA7kD,YAAYyX,UAA/B,CACA,IAAI0wD,GAAc,EACdjoB,EAAiBjyC,EACjBm6D,EAAYloB,EAAIkoB,UACpBloB,EAAI5+C,IAAIjF,EAAApH,YAAYswE,UACpB,IAAIyB,EAAep0E,KAAK+wE,YACpBt7D,EAAQ0C,aAAa85C,EAAA5kD,eAAemS,QACtCxf,KAAK+wE,YAAct7D,EAAQzC,KAAKwQ,cAAciE,MAEhD,IAAI+sD,OAAQ,EACRgB,GACFhB,EAAWx0E,KAAK20E,kBAAkBa,EAAW7rE,EAAA2H,KAAKlO,IAAG,GAGjD8uD,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QAC5C4vB,EAAW70E,EAAO0iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QACxCnvC,EAAQ4G,GAAG5S,EAAApH,YAAYma,QACzBxc,KAAKqV,MACH3L,EAAA4L,eAAemgE,0EACfD,EAAU7lE,OAGd4lE,GAAc,KAGQ,MAAjBH,EACTZ,EAAW70E,EAAOyD,IAAI,IAElBiyE,GACFr1E,KAAKqV,MACH3L,EAAA4L,eAAeogE,kCACHr6D,EAAQ/C,eAAe3I,MAAMu3D,OAG7CsN,EAAW70E,EAAO23C,OAAO4a,EAAArpB,SAAS8sC,OAChCh2E,EAAOq4C,WAAWo9B,EAAczmE,aAAcujD,EAAAjyB,WAAW75B,KACzDzG,EAAOyD,IAAI,IAEboxE,EAAW70E,EAAO0iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QACxCnvC,EAAQ4G,GAAG5S,EAAApH,YAAYma,QACzBxc,KAAKqV,MACH3L,EAAA4L,eAAemgE,0EACfp6D,EAAOpK,YAAYtB,OAGvB4lE,GAAc,IAGlBv1E,KAAK+wE,YAAcqD,EACfmB,GACF51E,EAAOo9C,UAAUuQ,EAAI3+C,aAAcujD,EAAAjyB,WAAW75B,KAAK,EAAMzG,EAAOyD,IAAI,IACpEpD,KAAKgxE,YAAYzyD,KACfve,KAAK41E,qBAAqBtoB,EAAKknB,GAAU,IAE3Ca,GAAqB,IAEjBC,GACFhoB,EAAI7wC,wBAAwBxK,QAAQigD,EAAAlL,iBAAiBwtB,IAAY7qE,EAAA2H,KAAKlO,KAClEkqD,EAAIjxC,GAAG5S,EAAApH,YAAY4Y,gBACrBtb,EAAOo9C,UAAUuQ,EAAI3+C,aAAcujD,EAAAjyB,WAAW75B,KAAK,EAAOouE,IAG5D70E,EAAOo9C,UAAUuQ,EAAI3+C,aAAcujD,EAAAjyB,WAAW75B,KAAK,EAAOouE,GAE5DlnB,EAAIxoC,aAAc,EAClBuwD,GAAqB,GAEvBD,EAA2B9nB,qGAI/B,OADAttD,KAAK0vE,YAAc,MACZ,GAMTF,EAAAvtE,UAAA0xE,kCAAA,SACE1xE,EACAunB,EACA1D,EACA28C,GAEA,QAHA,IAAA38C,MAA4Cjc,EAAAg4D,gBAC5C,IAAAY,MAAA,MAEIxgE,EAAUkW,aAAa85C,EAAA5kD,eAAeyE,SAAU,OAAO,KAC3D,IAAI8T,EAAW5lB,KAAK4O,SAAS02D,iCAC3BrjE,EACAunB,EACAvnB,EAAU2O,OACVkV,EACA28C,GAAyBxgE,EAAUgP,aAErC,OAAK2U,GACA5lB,KAAK61E,gBAAgBjwD,GACnBA,EAFe,MAMxB4pD,EAAAvtE,UAAAyvE,mBAAA,SACErqD,EACA2J,EACA5J,QAAA,IAAAA,MAAA,MAEA,IACI2uB,EADAif,EAAgB3tC,EAAiBA,EAAevc,OAAS,EAEzDma,EAAQ,EAQZ,GAPImC,IACF2uB,EAAa,IAAI9uC,MAAM,EAAI+tD,IAChB,GAAK5tC,EAAS0sC,eACzB7uC,EAAQ,GAER8wB,EAAa,IAAI9uC,MAAM+tD,GAErB3tC,EACF,IAAK,IAAIhnB,EAAI,EAAGA,EAAI20D,IAAiB30D,IAAK4kB,EACxC8wB,EAAW9wB,GAASoC,EAAehnB,GAAGyzD,eAG1C,IAAIgiB,EAAa9kD,EAAW8iC,eACxBn0D,EAASK,KAAKL,OACdg+C,EAAUh+C,EAAOy2C,2BAA2B0/B,EAAY//B,GAC5D,IAAK4H,EAAS,CACZ,IAAI/8C,EAAO+I,EAAA8Z,UAAU4xC,oBAAoBhuC,EAAgB2J,EAAY5J,GACrEu2B,EAAUh+C,EAAOk2C,gBAAgBj1C,EAAMk1E,EAAY//B,GAErD,OAAO4H,GAIT6xB,EAAAvtE,UAAA8zE,oBAAA,SAEEnwD,EAEAowD,QAAA,IAAAA,MAAA,MAEA,IAAIr2E,EAASK,KAAKL,OACds2E,EAAWprE,OAAO+a,EAAS3jB,UAAUg0E,UACrCjlD,EAAapL,EAASjV,UAAUqgB,WAChCvJ,EAAOznB,KAAK+wE,YAGhB,GAAIkF,EAAS7iE,MAAQxJ,EAAAyJ,SAASqrB,MAC5Bs3C,EAAQh2E,KAAKk2E,kBAAmCD,EAAUhjE,YAAY,EAAM+iE,OACvE,CAELnrE,OAAOorE,EAAS7iE,MAAQxJ,EAAAyJ,SAAS4rB,YAGjCp0B,OAAO+a,EAAS3jB,UAAUqjB,WAG1Bza,QAAQ+a,EAAS9G,MAAMrV,EAAApH,YAAYyd,YAAcrW,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,IAAMvV,EAAApH,YAAY8zE,OAEjG,IAAIhkD,EAAOnyB,KAAK20E,kBAAwCsB,EAAUrjD,WAAY5B,EAAU,GAKxF,GAFKglD,EACAA,EAAMz3D,KAAK4T,GADJ6jD,EAAQ,CAAE7jD,IAEjB1K,EAAKpL,GAAE,KAAwB,CAClC,IAAI+5D,EAAcJ,EAAMlrE,OACxB9K,KAAKq2E,oBAAoB5uD,EAAMuuD,GAC/Bh2E,KAAKs0E,mBAAmB7sD,EAAMuuD,GAC9B,IAAItK,EAAcjkD,EAAKikD,YAAYv5C,EAAMnB,GACrCslD,EAAU7uD,EAAKwjD,UAAU94C,EAAMnB,GACnC,GAAIglD,EAAMlrE,OAASsrE,EAAa,CAC9B,IAAIG,EAAO9uD,EAAK2hD,oBAAoBp4C,GAC/B06C,GAAajkD,EAAKwhD,aAAasN,EAAKtxD,MAAOlb,EAAA29D,WAAWiE,SACvD2K,GAAS7uD,EAAKwhD,aAAasN,EAAKtxD,MAAOlb,EAAA29D,WAAW9C,SACtDoR,EAAMI,EAAc,GAAKz2E,EAAO+5C,UAAU68B,EAAKtxD,MAAOkN,GACtD6jD,EAAMz3D,KAAK5e,EAAOi4C,UAAU2+B,EAAKtxD,MAAO+L,EAAW8iC,iBAEhD4X,GAAajkD,EAAK/Y,IAAG,GACtB4nE,GAAS7uD,EAAK/Y,IAAG,GACrB+Y,EAAK/Y,IAAI,MAKb,GAAIkX,EAASvJ,GAAG5S,EAAApH,YAAYyd,aAAc,CACxC,IAAIszD,EAAiBpzE,KAAKoR,QAAQgiE,eAClCvoE,OAAO+a,EAASvJ,GAAG5S,EAAApH,YAAY+f,WAC/B,IAAIhT,EAAgBvE,OAAO+a,EAAShV,QAEpC,GAF6C/F,OAAOuE,EAAcgE,MAAQ6+C,EAAA7kD,YAAYwO,QAEjF6L,EAAKpL,GAAE,KAAwB,CAClC,IAAI0oD,EAAYl6D,OAAO4c,EAAKu9C,YAAYv7D,EAAAzG,cAAcoC,QAGjDqiB,EAAKpL,GAAE,MAMV25D,EAAMz3D,KACJ5e,EAAO46C,GACL56C,EAAOw3C,MAAMi8B,GAAkBlhB,EAAAjyB,WAAW55B,IAAM6rD,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OACvExrE,EAAOi4C,UAAUmtB,EAAU9/C,MAAOmuD,IAEpCzzE,EAAO+5C,UAAUqrB,EAAU9/C,MACzBjlB,KAAKkzE,WACHlzE,KAAKw2E,eAAsBpnE,OAKnCpP,KAAKy2E,wBAA+BrnE,EAAe4mE,IAErDh2E,KAAKq2E,oBAAoB5uD,EAAMuuD,GAC/Bh2E,KAAKs0E,mBAAmB7sD,EAAMuuD,GAC9BA,EAAMz3D,KAAK5e,EAAOi4C,UAAUmtB,EAAU9/C,MAAOjlB,KAAKoR,QAAQgiE,iBAC1D3rD,EAAK/Y,IAAI,KAICU,EAAeqa,OAAShC,EAAKpL,GAAE,MACzCrc,KAAKqV,MACH3L,EAAA4L,eAAeohE,2DACf9wD,EAAS3jB,UAAUgP,YAAYtB,YAK1BqhB,GAAcrnB,EAAA2H,KAAKG,MAASgW,EAAKpL,GAAE,MAC5Crc,KAAKqV,MACH3L,EAAA4L,eAAeqhE,+DACf/wD,EAAS3jB,UAAU+jE,iBAAiBh1C,WAAWrhB,OAInD,OAAOqmE,GAITxG,EAAAvtE,UAAA4zE,gBAAA,SAAgBjwD,GACd,GAAIA,EAASvJ,GAAG5S,EAAApH,YAAYswE,UAAW,OAAO,EAC9C9nE,SAAS+a,EAASvJ,GAAG5S,EAAApH,YAAY6f,UAAY0D,EAASzN,aAAa85C,EAAA5kD,eAAeyE,WAElF,IAAI8kE,EAAe52E,KAAK2vE,YACxB/pD,EAASlX,IAAIjF,EAAApH,YAAYswE,UAEzB,IAKIlB,EALA9xE,EAASK,KAAKL,OACdgR,EAAYiV,EAASjV,UACrBslE,EAAWrwD,EAAS3jB,UAAUg0E,SAE9Bt4B,EAAU39C,KAAK0xE,mBAAmB/gE,EAAU0W,eAAgB1W,EAAUqgB,WAAYrgB,EAAUyW,UAIhG,GAAI6uD,EAAU,CAWZ,GARIrwD,EAASvJ,GAAG5S,EAAApH,YAAY6f,UAC1BliB,KAAKqV,MACH3L,EAAA4L,eAAeuhE,yDACfjxD,EAAStN,eAAe3I,OAKxBiW,EAASzN,aAAa85C,EAAA5kD,eAAe8U,UAAW,CAClD,IAAIgzD,EAAiBvvD,EAASuvD,eAC1B33D,EAAY3S,OAAOjB,EAAAm2B,cAAcn2B,EAAAmB,cAAcoX,SAAUgzD,IAC7Dn1E,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfd,EAAU7N,OAKd,IAAIykE,EAAep0E,KAAK+wE,YACpBtpD,EAAO7B,EAAS6B,KACpBznB,KAAK+wE,YAActpD,EACnB,IAAIuuD,EAAQ,IAAI/uE,MAGZge,EAAQ,EACGtU,EAAUyW,YAGrBnC,EAGJ,IADA,IAAIoC,EAAiB1W,EAAU0W,eACtBhnB,EAAI,EAAGyS,EAAIuU,EAAevc,OAAQzK,EAAIyS,IAAKzS,IAAK4kB,EAAO,CAC9D,IAAIjJ,EAAOqL,EAAehnB,GACtB2b,EAAKi3D,YACP+C,EAAMz3D,KACJ5e,EAAOw6C,KACLn6C,KAAKkzE,WACHvzE,EAAOi4C,UAAU3yB,EAAOjJ,EAAK83C,mBAInCrsC,EAAKwhD,aAAahkD,EAAOlb,EAAA29D,WAAWwB,WAIxClpE,KAAK+1E,oBAAoBnwD,EAAUowD,GAC9BvuD,EAAKpL,GAAE,OACVrc,KAAKq2E,oBAAoB5uD,EAAMuuD,GAC/Bh2E,KAAKs0E,mBAAmB7sD,EAAMuuD,IAEhCh2E,KAAK+wE,YAAcqD,EAGnB3C,EAAU9xE,EAAOy9C,YACfx3B,EAASjX,aACTgvC,EACAh0C,EAAAuqD,mBAAmBtuC,EAASK,kBAC5B6wD,EAAQn3E,EAAQq2E,EAAOpwD,EAASjV,UAAUqgB,WAAW8iC,sBAKlDluC,EAASvJ,GAAG5S,EAAApH,YAAY6f,UAC3BliB,KAAKqV,MACH3L,EAAA4L,eAAeyhE,gFACfnxD,EAAStN,eAAe3I,OAI5BiW,EAASlX,IAAIjF,EAAApH,YAAY0yE,eACzBC,EAAiBpvD,EAAUA,EAAS3U,aAGpCwgE,EAAU9xE,EAAO8+C,kBACf74B,EAASjX,aACT2gE,EACAC,EACA5xB,GAMJ,OAFA/3B,EAASkC,SAASnoB,EAAQ8xE,GAC1BzxE,KAAK2vE,YAAciH,GACZ,GAKTpH,EAAAvtE,UAAA2xE,+BAAA,SACE3xE,EACAunB,EACA1D,EACA28C,QADA,IAAA38C,MAA4Cjc,EAAAg4D,gBAC5C,IAAAY,MAAA,MAEA,IAAI78C,EAAW5lB,KAAK4O,SAASgzD,8BAC3B3/D,EACAunB,EACAvnB,EAAU2O,OACVkV,EACA28C,GAAyBxgE,EAAUgP,aAEhC2U,GACL5lB,KAAKg3E,aAAapxD,IAGpB4pD,EAAAvtE,UAAA+0E,aAAA,SAAapxD,eACX,GAAIA,EAASvJ,GAAG5S,EAAApH,YAAYswE,UAAW,OAAO,EAC9C/sD,EAASlX,IAAIjF,EAAApH,YAAYswE,UACzB,IACIsE,EADYrxD,EAAS3jB,UACuB4Z,QAChD,GAAIo7D,MACF,IAAoB,IAAA97D,EAAAzG,EAAAuiE,EAAc38D,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAE,CAC1C,QADOa,EAAO2F,EAAA9Z,OACE8R,MACd,KAAK6+C,EAAA7kD,YAAY6Q,OACfje,KAAKyzE,cAAsBh+D,GAC3B,MAEF,KAAKw8C,EAAA7kD,YAAY2N,mBAEQtF,EAAS4G,GAAG5S,EAAApH,YAAYwP,UAE7C7R,KAAK2zE,kCACgBl+D,EACnB,GACA5L,EAAAg4D,UACoBpsD,EAAS6C,gBAGjC,MAEF,KAAK25C,EAAA7kD,YAAYkO,oBACXza,EAA6B4U,EAAS8F,kBAExCvb,KAAK2zE,kCACH9yE,EACA,GACAgJ,EAAAg4D,UACAhhE,EAAOyX,iBAGPi6D,EAA6B98D,EAAS+F,kBAExCxb,KAAK2zE,kCACHpB,EACA,GACA1oE,EAAAg4D,UACA0Q,EAAOj6D,gBAGX,MAEF,KAAK25C,EAAA7kD,YAAYqO,6GAKvB,IAAI8rD,EAAe3hD,EAASgE,oBACxB29C,GAAcvnE,KAAK61E,gBAAgBtO,GACvC,IAAIrsD,EAAkB0K,EAAS/J,QAC/B,GAAIX,MACF,IAAoB,IAAAY,EAAApH,EAAAwG,EAAgBZ,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAAzC,IAAIa,EACP,QADOA,EAAOsG,EAAAza,OACE8R,MACd,KAAK6+C,EAAA7kD,YAAY2N,mBAEQtF,EAAS4G,GAAG5S,EAAApH,YAAYwP,UAE7C7R,KAAK2zE,kCACgBl+D,EACnB,GACA5L,EAAAg4D,QAAqBj8C,EAASE,yBACVrQ,EAASxE,YAAYrQ,MAG7C,MAEF,KAAKqxD,EAAA7kD,YAAYsb,gBACfjT,EAAQ/G,IAAIjF,EAAApH,YAAYswE,UACxB,MAEF,KAAK1gB,EAAA7kD,YAAYqO,SACf,IAAI5a,EAEA0xE,GAFA1xE,EAAoB4U,EAASuT,iBACrBhpB,KAAK61E,gBAAgBh1E,IAC7B0xE,EAAoB98D,EAASwT,iBACrBjpB,KAAK61E,gBAAgBtD,sGAMzC,OAAO,GAGT/C,EAAAvtE,UAAAi1E,4BAAA,SACEjmE,EACAuY,EACA1D,EACA28C,QADA,IAAA38C,MAAA,WACA,IAAA28C,MAAA,MAGAziE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfrN,EAAYtB,QAOhB6/D,EAAAvtE,UAAAk1E,iBAAA,SAAiBjoE,EAAoBkoE,QAAA,IAAAA,MAAA,GACnC,IAAIvuD,EAAeipD,UAAU9xE,KAAK6oB,aAAcuuD,GAC5CtiC,EAAUod,EAAArd,cAAclzC,OAAOuN,EAAQ2Z,GAG3C,OAFA7oB,KAAK4vE,eAAerxD,KAAKu2B,GACzB90C,KAAK6oB,aAAem2C,QAAQn2C,EAAc5W,QAAQ/C,EAAOpE,OAAQ,IAC1DgqC,GAIT06B,EAAAvtE,UAAAo1E,mBAAA,SAAmBC,GACjB,IAGIC,EAHA30D,EAAU5iB,KAAK4iB,QACf40D,EAAe50D,EAAQ60D,kBACvB1gE,EAAiBlM,OAAO+X,EAAQ7L,gBAEhC2oC,EAAW1/C,KAAK6vE,eACpB,GAAInwB,EAASxuC,IAAIomE,GACfC,EAAgB73B,EAASx+C,IAAIo2E,OACxB,CACL,IAAIxsE,EAASwsE,EAAYxsE,OACrBoE,EAAS,IAAIrH,WAAW2vE,GAAgB1sE,GAAU,IACtD8X,EAAQ3T,mBAAmBC,EAAQ,EAAG6H,EAAgBjM,GAAU,GAChE,IAAK,IAAIzK,EAAI,EAAGA,EAAIyK,IAAUzK,EAC5BwJ,EAAAyhB,SAASgsD,EAAYpsE,WAAW7K,GAAI6O,EAAQsoE,GAAgBn3E,GAAK,IAEnEk3E,EAAgBv3E,KAAKm3E,iBAAiBjoE,GACtCwwC,EAAShxC,IAAI4oE,EAAaC,GAE5B,IAAIpxD,EAAM64C,QAAQuY,EAAcpoE,OAAQ8C,QAAQulE,IAEhD,OADAx3E,KAAK2vE,YAAc54D,EAAeiF,KAC9Bhc,KAAKoR,QAAQc,SACRlS,KAAKL,OAAO0D,IAAI08C,QAAQ55B,GAAM65B,SAAS75B,KAE9Ctb,OAAOo5D,WAAW99C,IACXnmB,KAAKL,OAAOyD,IAAI28C,QAAQ55B,MAInCqpD,EAAAvtE,UAAAy1E,wBAAA,SAAwBC,EAAmBr9D,GACzC,IAAIsI,EAAU5iB,KAAK4iB,QACf9X,EAASwP,EAAOxP,OAChBynD,EAAWolB,EAAYplB,SACvBqlB,EAAa9sE,EAASynD,EACtBslB,EAAiBhtE,OAAO+X,EAAQ/L,qBAChC4gE,EAAoB70D,EAAQ60D,kBAE5BK,EAAM,IAAIjwE,WAAW4vE,EAAoBG,GAC7Ch1D,EAAQ3T,mBAAmB6oE,EAAK,EAAGD,EAAgBD,GACnD,IAAIx5C,EAAMq5C,EACNtE,EAAawE,EAAY7jB,eAC7B,OAAQqf,GACN,KAAKjhB,EAAAjyB,WAAW75B,IACd,OAAQmsD,GACN,KAAK,EACH,IAAK,IAAIlyD,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC/B,IAAIiB,EAAQgZ,EAAOja,GACnBwK,OAAOqnD,EAAAnL,kBAAkBzlD,IAAU6xE,GACnCtoE,OAAOqnD,EAAApL,gBAAgBxlD,IAAU4wD,EAAAhyB,aAAa0kB,OAC9C/6C,EAAAwhB,QAAQ6mC,EAAAlL,iBAAiB1lD,GAAQw2E,EAAK15C,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS/9B,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQgZ,EAAOja,GACnBwK,OAAOqnD,EAAAnL,kBAAkBzlD,IAAU6xE,GACnCtoE,OAAOqnD,EAAApL,gBAAgBxlD,IAAU4wD,EAAAhyB,aAAa0kB,OAC9C/6C,EAAAyhB,SAAS4mC,EAAAlL,iBAAiB1lD,GAAQw2E,EAAK15C,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS/9B,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQgZ,EAAOja,GACnBwK,OAAOqnD,EAAAnL,kBAAkBzlD,IAAU6xE,GACnCtoE,OAAOqnD,EAAApL,gBAAgBxlD,IAAU4wD,EAAAhyB,aAAa0kB,OAC9C/6C,EAAAyF,SAAS4iD,EAAAlL,iBAAiB1lD,GAAQw2E,EAAK15C,GACvCA,GAAO,EAET,MAEF,QAASvzB,QAAO,GAElB,MAEF,KAAKqnD,EAAAjyB,WAAW55B,IACd,IAAShG,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQgZ,EAAOja,GACnBwK,OAAOqnD,EAAAnL,kBAAkBzlD,IAAU6xE,GACnCtoE,OAAOqnD,EAAApL,gBAAgBxlD,IAAU4wD,EAAAhyB,aAAa0kB,OAC9C/6C,EAAAkuE,SAAS9lE,QAAQigD,EAAAjL,oBAAoB3lD,GAAQ4wD,EAAAhL,qBAAqB5lD,IAASw2E,EAAK15C,GAChFA,GAAO,EAET,MAEF,KAAK8zB,EAAAjyB,WAAWp5B,IACd,IAASxG,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQgZ,EAAOja,GACnBwK,OAAOqnD,EAAAnL,kBAAkBzlD,IAAU6xE,GACnCtoE,OAAOqnD,EAAApL,gBAAgBxlD,IAAU4wD,EAAAhyB,aAAa0kB,OAC9C/6C,EAAA0hB,SAAS2mC,EAAA/K,iBAAiB7lD,GAAQw2E,EAAK15C,GACvCA,GAAO,EAET,MAEF,KAAK8zB,EAAAjyB,WAAWn5B,IACd,IAASzG,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQgZ,EAAOja,GACnBwK,OAAOqnD,EAAAnL,kBAAkBzlD,IAAU6xE,GACnCtoE,OAAOqnD,EAAApL,gBAAgBxlD,IAAU4wD,EAAAhyB,aAAa0kB,OAC9C/6C,EAAA2hB,SAAS0mC,EAAA9K,iBAAiB9lD,GAAQw2E,EAAK15C,GACvCA,GAAO,EAET,MAEF,QAASvzB,QAAO,GAIlB,OAFAA,OAAOuzB,GAAO05C,EAAIhtE,QAEX9K,KAAKm3E,iBAAiBW,IAG/BtI,EAAAvtE,UAAA+1E,wBAAA,SAAwBL,EAAmBM,GACzC,IAAIr1D,EAAU5iB,KAAK4iB,QACf60D,EAAoB70D,EAAQ60D,kBAC5Br+D,EAAiBvO,OAAO+X,EAAQxJ,gBAChC8+D,EAAgBrtE,OAAO7K,KAAK4O,SAASkM,aAAa1B,EAAgB,CAAEu+D,KACpEQ,EAAoBD,EAAcvuD,oBAClCyuD,EAAeH,EAAc/oE,OAAOpE,OAAS2sE,EAC7CY,EAAcj1E,IAAIg1E,EAAeT,EAAYplB,UAE7CulB,EAAM,IAAIjwE,WAAW4vE,EAAoBU,GAC7Cv1D,EAAQ3T,mBAAmB6oE,EAAK,EAAGI,EAAeC,GAElD,IAAIG,EAAkBv4B,QAAQk4B,EAAc9oE,QAAUsoE,EAOtD,OANA5sE,QAAQ+X,EAAQxR,QAAQc,UACxBrH,OAAOqtE,EAAc/sD,WAAW,OAAQmtD,EAAiBR,EAAKL,IAC9D5sE,OAAOqtE,EAAc/sD,WAAW,YAAamtD,EAAiBR,EAAKL,IACnE5sE,OAAOqtE,EAAc/sD,WAAW,aAAcitD,EAAcN,EAAKL,IACjE5sE,OAAOqtE,EAAc/sD,WAAW,UAAWktD,EAAaP,EAAKL,IAEtDz3E,KAAKm3E,iBAAiBW,IAM/BtI,EAAAvtE,UAAAs2E,yBAAA,SAAyB73B,GAEvB,GADA71C,OAAO61C,EAAKrkC,GAAG5S,EAAApH,YAAYswE,WACvBjyB,EAAKt6B,oBAAsB,EAC7B,OAAOs6B,EAAKt6B,mBAEd,IAAI0pD,EAAgB9vE,KAAK8vE,cACrB7qD,EAAQ6qD,EAAchlE,OAO1B,OANK41C,EAAKrkC,GAAG5S,EAAApH,YAAYm2E,aAAe93B,EAAK/vC,UAAU6jD,mBAAqB9T,EAAK/vC,UAAU0W,eAAevc,SAExG41C,EAAO1gD,KAAKyyE,iBAAiB/xB,IAE/BovB,EAAcvxD,KAAKmiC,EAAK/xC,cACxB+xC,EAAKt6B,mBAAqBnB,EACnBA,GAKTuqD,EAAAvtE,UAAAoyE,yBAAA,SAAyBlhE,EAAsBkS,GAI7C,OAHIlS,EAAUC,MAAQxJ,EAAAyJ,SAASE,gBAC7BJ,EAAqCA,EAAWlC,aAE1CkC,EAAUC,MAChB,KAAKxJ,EAAAyJ,SAASQ,iBAEZ,IADA,IACSxT,EAAI,EAAGyS,GADZ2lE,EAAsCtlE,EAAW0I,SAChB/Q,OAAQzK,EAAIyS,IAAKzS,EACpDL,KAAKq0E,yBAAyBoE,EAAiBp4E,GAAIglB,GAErD,MAEF,KAAKzb,EAAAyJ,SAASU,gBACZ,IAAI0B,EAAUzV,KAAK4iB,QAAQ5R,wBAAyCmC,GACpEtI,OAAO4K,EAAQrC,MAAQ6+C,EAAA7kD,YAAYiX,MAC9B5O,EAAQ0C,aAAa85C,EAAA5kD,eAAemS,OAAOxf,KAAK0zE,YAAkBj+D,GACvE,MAEF,KAAK7L,EAAAyJ,SAASgB,qBACZ,IAAIokE,EACJ,IAASp4E,EAAI,EAAGyS,GADZ2lE,EAA0CtlE,EAAW0I,SACpB/Q,OAAQzK,EAAIyS,IAAKzS,EACpDL,KAAKq0E,yBAAyBoE,EAAiBp4E,GAAIglB,GAErD,MAEF,KAAKzb,EAAAyJ,SAASM,SACZ,IAAImO,EAAmC3O,EAAW2O,aAClD,IAASzhB,EAAI,EAAGyS,EAAIgP,EAAahX,OAAQzK,EAAIyS,IAAKzS,EAAG,CAC/CoV,EAAUzV,KAAK4iB,QAAQ5R,wBAAwB8Q,EAAazhB,IAChEwK,OAAO4K,EAAQrC,MAAQ6+C,EAAA7kD,YAAY6Q,QAEhCxI,EAAQ4G,GAAG5S,EAAApH,YAAY6f,UACvBzM,EAAQ0C,aAAa85C,EAAA5kD,eAAemS,OACrCxf,KAAKyzE,cAAsBh+D,GAE/B,MAEF,KAAK7L,EAAAyJ,SAASsL,kBACRlJ,EAAUzV,KAAK4iB,QAAQ5R,wBAA0CmC,IACzDC,MAAQ6+C,EAAA7kD,YAAY6Q,SACzBxI,EAAQ0C,aAAa85C,EAAA5kD,eAAemS,OAAOxf,KAAKyzE,cAAsBh+D,IAE7E,MAEF,KAAK7L,EAAAyJ,SAASzB,OACuC,MAA7BuB,EAAWoQ,gBAC/BvjB,KAAKg0E,kBACuB7gE,EAAWoQ,eACMpQ,EAAWwO,MAG1D,MAEF,KAAK/X,EAAAyJ,SAASI,OACZzT,KAAKg0E,kBACe7gE,EAAWoQ,eACXpQ,EAAWwO,MAE/B,MAEF,KAAK/X,EAAAyJ,SAASY,oBACd,KAAKrK,EAAAyJ,SAASwL,kBACd,KAAKjV,EAAAyJ,SAASc,qBACd,KAAKvK,EAAAyJ,SAAS8L,0BACd,KAAKvV,EAAAyJ,SAASkB,gBAAiB,MAC/B,QACE,IAAIqd,EAAO5xB,KAAK04E,iBAAiBvlE,GAC7B++C,EAAApL,gBAAgBl1B,IAASsgC,EAAAhyB,aAAa8xB,KAAK3sC,EAAK9G,KAAKqT,KAM/D49C,EAAAvtE,UAAAy2E,iBAAA,SACEvlE,EACAwlE,QAAA,IAAAA,OAAA,GAEA,IACI/mD,EADAjyB,EAASK,KAAKL,OAElB,OAAQwT,EAAUC,MAChB,KAAKxJ,EAAAyJ,SAASqrB,MACZ9M,EAAO5xB,KAAK44E,sBAAsCzlE,GAClD,MAEF,KAAKvJ,EAAAyJ,SAASsrB,MACZ/M,EAAO5xB,KAAK64E,sBAAsC1lE,GAClD,MAEF,KAAKvJ,EAAAyJ,SAASurB,SACZhN,EAAO5xB,KAAK84E,yBAA4C3lE,GACxD,MAEF,KAAKvJ,EAAAyJ,SAASwrB,GACZjN,EAAO5xB,KAAK+4E,mBAAgC5lE,GAC5C,MAEF,KAAKvJ,EAAAyJ,SAASpQ,MACZ2uB,EAAO5xB,KAAKg5E,sBAAsC7lE,GAClD,MAEF,KAAKvJ,EAAAyJ,SAAS4rB,WACZrN,EAAO5xB,KAAKi5E,2BAAgD9lE,GAC5D,MAEF,KAAKvJ,EAAAyJ,SAAS6rB,IACZtN,EAAO5xB,KAAKk5E,oBAAkC/lE,GAC9C,MAEF,KAAKvJ,EAAAyJ,SAASgsB,GACZzN,EAAO5xB,KAAKm5E,mBAAgChmE,GAC5C,MAEF,KAAKvJ,EAAAyJ,SAASksB,OACZ3N,EAAO5xB,KAAKo5E,uBAAwCjmE,EAAWwlE,GAC/D,MAEF,KAAK/uE,EAAAyJ,SAASosB,OACZ7N,EAAO5xB,KAAKq5E,uBAAwClmE,GACpD,MAEF,KAAKvJ,EAAAyJ,SAASqsB,MACZ9N,EAAO5xB,KAAKs5E,sBAAsCnmE,GAClD,MAEF,KAAKvJ,EAAAyJ,SAASssB,IACZ/N,EAAO5xB,KAAKu5E,oBAAkCpmE,GAC9C,MAEF,KAAKvJ,EAAAyJ,SAASM,UACZie,EAAO5xB,KAAKw5E,yBAA4CrmE,MAC7Cye,EAAOjyB,EAAO86C,OACzB,MAEF,KAAK7wC,EAAAyJ,SAASwsB,KACZjO,EAAO5xB,KAAKy5E,qBAAoCtmE,GAChD,MAEF,KAAKvJ,EAAAyJ,SAASysB,MACZlO,EAAO5xB,KAAK05E,sBAAsCvmE,GAClD,MAEF,KAAKvJ,EAAAyJ,SAASkB,gBAEZvU,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfnL,EAAUxD,OAEZiiB,EAAOjyB,EAAO47C,cACd,MAEF,QACE1wC,QAAO,GACP+mB,EAAOjyB,EAAO47C,cAIlB,OADIv7C,KAAKoR,QAAQ2W,WAAW/nB,KAAK25E,iBAAiB/nD,EAAMze,EAAUxD,OAC3DiiB,GAGT49C,EAAAvtE,UAAAi0E,kBAAA,SACEjjE,EACA2mE,EACA5D,QADA,IAAA4D,OAAA,QACA,IAAA5D,MAAA,MAEA,IAAI6D,EAAgB5mE,EAAWnI,OAC1BkrE,KACHA,EAAQ,IAAI/uE,MAAqB4yE,IAC3B/uE,OAAS,GAIjB,IAFA,IAAInL,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACP1wE,EAAI,EAAGA,EAAIw5E,IAAiBx5E,EAAG,CACtC,IAAIuxB,EAAO5xB,KAAK04E,iBAAiBzlE,EAAW5S,GAAIu5E,GAAUv5E,GAAKw5E,EAAgB,GAC/E,OAAQ3nB,EAAApL,gBAAgBl1B,IACtB,KAAKsgC,EAAAhyB,aAAakuB,MAChB,IAAK8D,EAAApJ,aAAal3B,GAAO,CACvB,IAAK,IAAI1e,EAAI,EAAGJ,EAAIo/C,EAAAlJ,mBAAmBp3B,GAAO1e,EAAIJ,IAAKI,EAAG8iE,EAAMz3D,KAAK2zC,EAAAhJ,cAAct3B,EAAM1e,IACzF,MAIJ,QAAS8iE,EAAMz3D,KAAKqT,GACpB,KAAKsgC,EAAAhyB,aAAa8xB,KAEpB,GAAIvqC,EAAK3I,MAAM,KAA0C,CACnDozC,EAAAjE,yBAAyBr8B,IAAOokD,EAAMz3D,KAAK5e,EAAO47C,eACtD,OAGJ,OAAOy6B,GAGTxG,EAAAvtE,UAAA22E,sBAAA,SACEzlE,GAEA,IAAIF,EAAaE,EAAUF,WACvB6mE,EAAY95E,KAAK+wE,YACjBgJ,EAAYD,EAAUvR,OAC1BvoE,KAAK+wE,YAAcgJ,EAEnB,IAAI/D,EAAQh2E,KAAKk2E,kBAAkBjjE,GAKnC,OAJK8mE,EAAUj7D,MAAM,MAA0C9e,KAAKq2E,oBAAoB0D,EAAW/D,GACnG+D,EAAUpQ,mBACVmQ,EAAU3P,QAAQ4P,GAClB/5E,KAAK+wE,YAAc+I,EACZhD,EAAQ92E,KAAKL,OAAQq2E,EAAO9jB,EAAAjyB,WAAWsY,OAGhDi3B,EAAAvtE,UAAA42E,sBAAA,SACE1lE,GAEA,IAAIxT,EAASK,KAAKL,OAClB,GAAIwT,EAAU6jB,MAKZ,OAJAh3B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfnL,EAAU6jB,MAAMrnB,OAEXhQ,EAAO47C,cAEhB,IAAI9zB,EAAOznB,KAAK+wE,YACZ/pD,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJAhnB,KAAKqV,MACH3L,EAAA4L,eAAe0kE,qFACf7mE,EAAUxD,OAELhQ,EAAO47C,cAEhB,IAAIy6B,EAAQ,IAAI/uE,MAChBjH,KAAKq2E,oBAAoB5uD,EAAMuuD,GAE/B,IADA,IAAIplE,EAAS6W,EAAK7W,OACA,OAAXA,GAAmBA,EAAOoW,YAAcA,GAC7ChnB,KAAKq2E,oBAAoBzlE,EAAQolE,GAAwB,GACzDplE,EAASA,EAAOA,OAKlB,OAHA6W,EAAKkiD,mBACLqM,EAAMz3D,KAAK5e,EAAOs6C,GAAGjzB,IACrBS,EAAK/Y,IAAG,IACDooE,EAAQn3E,EAAQq2E,EAAO9jB,EAAAjyB,WAAWsY,OAG3Ci3B,EAAAvtE,UAAA62E,yBAAA,SACE3lE,GAEA,IAAIxT,EAASK,KAAKL,OACdq3B,EAAQ7jB,EAAU6jB,MACtB,GAAIA,EAKF,OAJAh3B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf0Y,EAAMrnB,OAEDhQ,EAAO47C,cAGhB,IAAI9zB,EAAOznB,KAAK+wE,YACZ7I,EAAgBzgD,EAAKygD,cACzB,GAAqB,MAAjBA,EAKF,OAJAloE,KAAKqV,MACH3L,EAAA4L,eAAe2kE,8EACf9mE,EAAUxD,OAELhQ,EAAO47C,cAEhB9zB,EAAK/Y,IAAI,KACT,IAAIsnE,EAAQ,IAAI/uE,MAChBjH,KAAKq2E,oBAAoB5uD,EAAMuuD,GAE/B,IADA,IAAIjzD,EAAuB0E,EAAK7W,OACzBmS,GAAWA,EAAQmlD,gBAAkBA,GAC1CloE,KAAKq2E,oBAAoBtzD,EAASizD,GAAwB,GAC1DjzD,EAAUA,EAAQnS,OAIpB,OAFA6W,EAAKkiD,mBACLqM,EAAMz3D,KAAK5e,EAAOs6C,GAAGiuB,IACd4O,EAAQn3E,EAAQq2E,EAAO9jB,EAAAjyB,WAAWsY,OAG3Ci3B,EAAAvtE,UAAA82E,mBAAA,SACE5lE,GAEA,IAAIxT,EAASK,KAAKL,OAEdm6E,EAAY95E,KAAK+wE,YACjB/5C,EAAQ8iD,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1BvoE,KAAK+wE,YAAcgJ,EACnB,IAAI/yD,EAAa,SAAWgQ,EAC5B+iD,EAAU/yD,WAAaA,EACvB,IAAIkhD,EAAgB,YAAclxC,EAClC+iD,EAAU7R,cAAgBA,EAE1B,IAAI8N,EAAQ,IAAI/uE,MACZkM,EAAUA,UAAUC,MAAQxJ,EAAAyJ,SAASqrB,MACvC1+B,KAAKk2E,kBAAmC/iE,EAAUA,UAAWF,YAAY,EAAO+iE,GAEhFA,EAAMz3D,KACJve,KAAK04E,iBAAiBvlE,EAAUA,YAGpC,IAAI+mE,EAAWv6E,EAAO0iD,qBACpBriD,KAAKm6E,cACHn6E,KAAK20E,kBAAkBxhE,EAAUyiB,UAAWjsB,EAAA2H,KAAKlO,KACjDpD,KAAK2vE,cAGLyK,GAAc,EACdloB,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,QAC5C/5C,OAAOqnD,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAW75B,KAC5C8rD,EAAAlL,iBAAiBkzB,KAAWE,GAAc,IAEjD,IAAIC,EAAaN,EAAU19D,GAAE,KACzBi+D,EAAYP,EAAUj7D,MAAM,MAC5By7D,EAASR,EAAUj7D,MAAM,MAQzB07D,GAAgBH,IAAeN,EAAU19D,GAAE,IAE3Cm+D,IAAiBJ,GACnBpE,EAAMz3D,KAAK5e,EAAOs6C,GAAGiuB,EAAegS,IAEtC,IAAI/nD,EAAO2kD,EAAQn3E,EAAQq2E,EAAO9jB,EAAAjyB,WAAWsY,MAoB7C,OAnBIiiC,IAAiBJ,GAAeE,KAClCnoD,EAAOxyB,EAAO06C,KAAK6tB,EAAe/1C,IAEhCooD,IACFpoD,EAAOxyB,EAAOm6C,MAAM9yB,EAAY,CAAEmL,KAI/BkoD,GAAYr6E,KAAKq2E,oBAAoB0D,EAAW/D,GACrD+D,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAU/2D,MACR,OAKF82D,EAAU3P,QAAQ4P,GAClB/5E,KAAK+wE,YAAc+I,EACZ3nD,GAGTq9C,EAAAvtE,UAAA+2E,sBAAA,SACE7lE,GAEA,OAAOnT,KAAKL,OAAO86C,OAGrB+0B,EAAAvtE,UAAAg3E,2BAAA,SACE9lE,GAEA,OAAOnT,KAAK20E,kBAAkBxhE,EAAUyf,WAAYjpB,EAAA2H,KAAKG,KAAI,IAG/D+9D,EAAAvtE,UAAAi3E,oBAAA,SACE/lE,GAEA,IAAIxT,EAASK,KAAKL,OAGdm6E,EAAY95E,KAAK+wE,YACjB/5C,EAAQ8iD,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1BvoE,KAAK+wE,YAAcgJ,EAGnB,IAAIt1D,EAActR,EAAUsR,YACxB+vD,EAA0B,EAC1B/vD,IAAa+vD,EAAWx0E,KAAK04E,iBAAiBj0D,IAGlD,IAAIy1D,EAA0B,EAC1BO,GAAa,EACjB,GAAItnE,EAAUyiB,WAQZ,GAPAskD,EAAWv6E,EAAO0iD,qBAChBriD,KAAKm6E,cACHn6E,KAAK20E,kBAA8BxhE,EAAUyiB,UAAWjsB,EAAA2H,KAAK1N,MAC7D5D,KAAK2vE,cAILzd,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,MAAO,CAEnD,GADA/5C,OAAOqnD,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAW75B,KACH,GAA1C8rD,EAAAlL,iBAAiBkzB,GAA4B,CAC/C,IAAIQ,EAAQ,IAAIzzE,MAMhB,OALIutE,GAAUkG,EAAMn8D,KAAKi2D,GACzBx0E,KAAKq2E,oBAAoB0D,EAAWW,GACpCX,EAAUpQ,mBACVmQ,EAAU5P,gBACVlqE,KAAK+wE,YAAc+I,EACZhD,EAAQn3E,EAAQ+6E,EAAOxoB,EAAAjyB,WAAWsY,MAE3CkiC,GAAa,QAGfP,EAAWv6E,EAAOyD,IAAI,GACtBq3E,GAAa,EAEfV,EAAU7O,qBAAqBgP,GAG/B,IAAIrgD,EAAc1mB,EAAU0mB,YACxB8gD,EAA0B,EAC1B9gD,IAAa8gD,EAAW36E,KAAK20E,kBAAkB96C,EAAalwB,EAAA2H,KAAKG,KAAM,IAG3E,IAAIuV,EAAa+yD,EAAU/yD,WAAa,SAAWgQ,EAAO+iD,EAAU/yD,WAAaA,EACjF+yD,EAAU/yD,WAAaA,EACvB,IAAIkhD,EAAgB,YAAclxC,EAClC+iD,EAAU7R,cAAgBA,EAC1B,IAAI0S,EAAY,QAAU5jD,EACtB6jD,EAAgB1nE,EAAUA,UAC1B6iE,EAAQ,IAAI/uE,MACZ4zE,EAAcznE,MAAQxJ,EAAAyJ,SAASqrB,MACjC1+B,KAAKk2E,kBAAmC2E,EAAe5nE,YAAY,EAAO+iE,GAE1EA,EAAMz3D,KAAKve,KAAK04E,iBAAiBmC,IAEnC,IA6BI1oD,EA7BAkoD,EAAaN,EAAU19D,GAAE,KACzBi+D,EAAYP,EAAUj7D,MAAM,MAC5By7D,EAASR,EAAUj7D,MAAM,MAazB07D,GAAgBH,IAAeN,EAAU19D,GAAE,IAC3Cy+D,GAAcL,GAAcF,EAE5BlgC,EAAO,IAAIpzC,MAIf,GAHKwzE,GACHpgC,EAAK97B,KAAK5e,EAAOs6C,GAAGjzB,EAAYrnB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQ+O,KAE3DI,GACEtE,EAAMlrE,OAAS,GAAKonD,EAAApL,gBAAgBkvB,EAAM,KAAO9jB,EAAAhyB,aAAaiuB,QAChE9T,EAAK97B,KAAK5e,EAAOm6C,MAAMouB,EAAe8N,SAGxC,IAAK,IAAI31E,EAAI,EAAGyS,EAAIkjE,EAAMlrE,OAAQzK,EAAIyS,IAAKzS,EAAGg6C,EAAK97B,KAAKy3D,EAAM31E,IAmChE,OAhCIm6E,GAAgBF,GACdK,GAAUtgC,EAAK97B,KAAKo8D,GACxB36E,KAAKq2E,oBAAoB0D,EAAW1/B,GACpCA,EAAK97B,KAAK5e,EAAOs6C,GAAG2gC,IAElBzoD,EADEqiD,EACK70E,EAAOm6C,MAAMghC,EAAa9zD,EAAa,KAAM,CAClDwtD,EACA70E,EAAO06C,KAAKugC,EAAWj7E,EAAOm6C,MAAM,KAAMO,MAGrC16C,EAAOm6C,MAAMghC,EAAa9zD,EAAa,KAAM,CAClDrnB,EAAO06C,KAAKugC,EAAW9D,EAAQn3E,EAAQ06C,EAAM6X,EAAAjyB,WAAWsY,WAIxDi8B,GAAUn6B,EAAKm3B,QAAQgD,GAC3Bx0E,KAAKq2E,oBAAoB0D,EAAW1/B,GACpCloB,EAAOxyB,EAAOm6C,MAAMghC,EAAa9zD,EAAa,KAAMqzB,IAItD0/B,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAU/2D,MACR,OAKEy3D,EAAYX,EAAU3P,QAAQ4P,GAC7BD,EAAU1P,mBAAmB2P,GAClC/5E,KAAK+wE,YAAc+I,EACZ3nD,GAGTq9C,EAAAvtE,UAAAk3E,mBAAA,SACEhmE,GAEA,IAAIxT,EAASK,KAAKL,OACdo5B,EAAS5lB,EAAU4lB,OACnBC,EAAU7lB,EAAU6lB,QACpB8gD,EAAY95E,KAAK+wE,YAGjBmJ,EAAWv6E,EAAO0iD,qBACpBriD,KAAKm6E,cACHn6E,KAAK20E,kBAAkBxhE,EAAUyiB,UAAWjsB,EAAA2H,KAAK1N,MACjD5D,KAAK2vE,cAKT,GACEzd,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,OAC1CsN,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAW75B,IAE1C,OAAO8rD,EAAAlL,iBAAiBkzB,GACpBl6E,KAAK04E,iBAAiB3/C,GACtBC,EACEh5B,KAAK04E,iBAAiB1/C,GACtBr5B,EAAO86C,MAIf,IAAIsgC,EAAc,IAAI9zE,MAClB+zE,EAAalB,EAAUvR,OAY3B,GAXAvoE,KAAK+wE,YAAciK,EACnBA,EAAW9P,qBAAqBgP,GAC5BnhD,EAAO3lB,MAAQxJ,EAAAyJ,SAASqrB,MAC1B1+B,KAAKk2E,kBAAmCn9C,EAAQ9lB,YAAY,EAAO8nE,GAEnEA,EAAYx8D,KAAKve,KAAK04E,iBAAiB3/C,IAEpCiiD,EAAWl8D,MAAM,MAA0C9e,KAAKq2E,oBAAoB2E,EAAYD,GACrGC,EAAWrR,mBACX3pE,KAAK+wE,YAAc+I,EAEf9gD,EAAS,CACX,IAAIiiD,EAAcnB,EAAUvR,OAC5BvoE,KAAK+wE,YAAckK,EACnBA,EAAY5P,sBAAsB6O,GAClC,IAAIgB,EAAe,IAAIj0E,MAUvB,OATI+xB,EAAQ5lB,MAAQxJ,EAAAyJ,SAASqrB,MAC3B1+B,KAAKk2E,kBAAmCl9C,EAAS/lB,YAAY,EAAOioE,GAEpEA,EAAa38D,KAAKve,KAAK04E,iBAAiB1/C,IAErCiiD,EAAYn8D,MAAM,MAA0C9e,KAAKq2E,oBAAoB4E,EAAaC,GACvGD,EAAYtR,mBACZ3pE,KAAK+wE,YAAc+I,EACnBA,EAAUpP,cAAcsQ,EAAYC,GAC7Bt7E,EAAO46C,GAAG2/B,EACfpD,EAAQn3E,EAAQo7E,EAAa7oB,EAAAjyB,WAAWsY,MACxCu+B,EAAQn3E,EAAQu7E,EAAchpB,EAAAjyB,WAAWsY,OAK3C,OAFAuhC,EAAU1P,mBAAmB4Q,GACzBA,EAAW3+D,GAAE,MAAwBy9D,EAAUzO,sBAAsB6O,GAClEv6E,EAAO46C,GAAG2/B,EACfpD,EAAQn3E,EAAQo7E,EAAa7oB,EAAAjyB,WAAWsY,QAU9Ci3B,EAAAvtE,UAAAm3E,uBAAA,SACEjmE,EACAwlE,GAEA,IAAIh5E,EAASK,KAAKL,OACdwyB,EAAsB,EACtB1K,EAAOznB,KAAK+wE,YACZ//C,EAAavJ,EAAKuJ,WAGtBvJ,EAAK/Y,IAAI,KAET,IAAIysE,EAAkBhoE,EAAU7R,MAChC,GAAI65E,EAAiB,CACnB,GAAInqD,GAAcrnB,EAAA2H,KAAKG,KAMrB,OALAzR,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACfuG,EAAgBxrE,MAAO3P,KAAK2vE,YAAY7xD,WAAYkT,EAAWlT,YAEjE9d,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAO47C,cAEhB,IAAI6/B,EAAW,EACX3zD,EAAKg9C,eAAepoD,GAAG5S,EAAApH,YAAY4Y,iBAAgBmgE,GAAW,GAClEjpD,EAAOnyB,KAAK20E,kBAAkBwG,EAAiBnqD,EAAuB,GAAXoqD,GAItDp7E,KAAKkwE,oBAAoBh/D,IAAIihB,IAC5BnB,EAAWiiD,WACT/gB,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAaglB,UACpCz9B,EAAKsiD,eAAe7X,EAAA7K,iBAAiBl1B,GAAOpoB,EAAA29D,WAAW2T,gBACzD5zD,EAAKohD,eAAe3W,EAAA7K,iBAAiBl1B,GAAOpoB,EAAA29D,WAAW2T,cACvDr7E,KAAKkwE,oBAAoBx+D,IAAIygB,IAOhC1K,EAAKikD,YAAYv5C,EAAMnB,IAAavJ,EAAK/Y,IAAG,GAC7C+Y,EAAKwjD,UAAU94C,EAAMnB,IAAavJ,EAAK/Y,IAAG,QAErCsiB,GAAcrnB,EAAA2H,KAAKG,OAC5BzR,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACfzhE,EAAUxD,MAAO,OAAQqhB,EAAWlT,YAEtCqU,EAAOxyB,EAAO47C,eAGhB,IAAIy6B,EAAQ,IAAI/uE,MAOhB,GANAjH,KAAKq2E,oBAAoB5uD,EAAMuuD,GAC/Bh2E,KAAKs0E,mBAAmB7sD,EAAMuuD,GAG1BhlD,EAAWiiD,YAAcjzE,KAAKkwE,oBAAoBh/D,IAAIihB,KAAOA,EAAOnyB,KAAKkzE,WAAW/gD,IAEpFnB,GAAcrnB,EAAA2H,KAAKG,MAAQukE,EAAMlrE,OAAQ,CAC3C,IAAIyrE,EAAO9uD,EAAK2hD,oBAAoBp4C,GAChCvJ,EAAKwjD,UAAU94C,EAAMnB,IAAavJ,EAAKwhD,aAAasN,EAAKtxD,MAAOlb,EAAA29D,WAAW9C,SAC/EoR,EAAMxE,QACJ7xE,EAAO+5C,UAAU68B,EAAKtxD,MAAOkN,IAE/BA,EAAOxyB,EAAOi4C,UAAU2+B,EAAKtxD,MAAO+L,EAAW8iC,gBAKjD,OAHArsC,EAAKkiD,mBAGDgP,GAAgBxmD,GAAQnB,GAAcrnB,EAAA2H,KAAKG,KACxCukE,EAAMlrE,QACXkrE,EAAMz3D,KAAK4T,GACJxyB,EAAOm6C,MAAM,KAAMk8B,EAAOhlD,EAAW8iC,iBAFlB3hC,EAMxB1K,EAAKpL,GAAE,OACJ25D,EAAMlrE,QACXkrE,EAAMz3D,KAAK5e,EAAOs6C,GAAGpvC,OAAO4c,EAAK4gD,mBAAoB,EAAGl2C,IAEjDxyB,EAAOm6C,MAAM,KAAMk8B,IAHAr2E,EAAOs6C,GAAGpvC,OAAO4c,EAAK4gD,mBAAoB,EAAGl2C,GAOpE6jD,EAAMlrE,QACXkrE,EAAMz3D,KAAK5e,EAAOg7C,OAAOxoB,IAClBxyB,EAAOm6C,MAAM,KAAMk8B,IAFAr2E,EAAOg7C,OAAOxoB,IAK1Cq9C,EAAAvtE,UAAAo3E,uBAAA,SACElmE,GAEA,IAAIxT,EAASK,KAAKL,OAEd+6B,EAAQvnB,EAAUunB,MAClB4gD,EAAW5gD,EAAM5vB,OACrB,IAAKwwE,EACH,OAAOt7E,KAAK20E,kBAAkBxhE,EAAUyiB,UAAWjsB,EAAA2H,KAAKG,KAAI,GAM9D,IAAIqoE,EAAY95E,KAAK+wE,YACjBjQ,EAAUgZ,EAAU9P,iBAGpBuR,EAAYzB,EAAUpR,aAAa/+D,EAAA2H,KAAK7N,KACxC+3E,EAAiBD,EAAUt2D,MAG3Bs1D,EAAS,IAAItzE,MAAqB,EAAIq0E,GAC1Cf,EAAO,GAAK56E,EAAO+5C,UACjB8hC,EACAx7E,KAAK20E,kBAAkBxhE,EAAUyiB,UAAWjsB,EAAA2H,KAAK7N,IAAG,IAQtD,IAFA,IAAIg4E,EAAa,EACbC,GAAgB,EACXr7E,EAAI,EAAGA,EAAIi7E,IAAYj7E,EAAG,CACjC,IACI22B,EADQ0D,EAAMr6B,GACA22B,MACdA,EACFujD,EAAOkB,KAAgB97E,EAAOs6C,GAAG,OAAS55C,EAAEyd,SAAS,IAAM,IAAMgjD,EAC/DnhE,EAAO23C,OAAO4a,EAAArpB,SAASyiC,MACrB3rE,EAAOi4C,UAAU4jC,EAAgBtpB,EAAAjyB,WAAW75B,KAC5CpG,KAAK20E,kBAAkB39C,EAAOrtB,EAAA2H,KAAK7N,IAAG,KAM1Ci4E,EAAer7E,EAInBy5E,EAAU3Q,cAAcoS,GAGxBhB,EAAOkB,GAAc97E,EAAOs6C,IAAIyhC,GAAgB,EAC1C,OAASA,EAAa59D,SAAS,IAC/B,SACA,IAAMgjD,GAGZ,IAAI6a,EAAeh8E,EAAOm6C,MAAM,SAAWgnB,EAASyZ,EAAQroB,EAAAjyB,WAAWsY,MACnEqjC,EAAiB,IACjBC,EAAoB,EACxB,IAASx7E,EAAI,EAAGA,EAAIi7E,IAAYj7E,EAAG,CACjC,IACI4S,EADQynB,EAAMr6B,GACK4S,WACnB4mE,EAAgB5mE,EAAWnI,OAG3BivE,EAAYD,EAAUvR,OAC1BvoE,KAAK+wE,YAAcgJ,EACnB,IAAI/yD,EAAa,SAAW85C,EAC5BiZ,EAAU/yD,WAAaA,EAEvB,IAAI80D,EAASz7E,GAAKi7E,EAAW,EACzBS,EAAYD,EAAS90D,EAAa,QAAU3mB,EAAI,GAAGyd,SAAS,IAAM,IAAMgjD,EACxEkV,EAAQ,IAAI/uE,MAAqB,EAAI4yE,GACzC7D,EAAM,GAAK2F,EAGX,IAFA,IAAIK,EAAQ,EACR3B,GAAa,EACRnnE,EAAI,EAAGA,EAAI2mE,IAAiB3mE,EAAG,CACtC,IAAI0e,EAAO5xB,KAAK04E,iBAAiBzlE,EAAWC,IAI5C,GAHIg/C,EAAApL,gBAAgBl1B,IAASsgC,EAAAhyB,aAAa8xB,MACxCgkB,EAAMgG,KAAWpqD,GAEfmoD,EAAUj7D,MAAM,KAA0C,CACxDi7D,EAAU19D,GAAE,OAAwBg+D,GAAa,GACrD,OAGJrE,EAAMlrE,OAASkxE,GACX3B,GAAcyB,GAAU/B,EAAUj7D,MAAM,SAC1C88D,GAAqB7B,EAAUtqE,OAEjCosE,GAAoC,MAAf9B,EAAUtqE,MAG1B4qE,GAAYr6E,KAAKq2E,oBAAoB0D,EAAW/D,GACrD+D,EAAU/2D,MACR,MAGF+2D,EAAUpQ,mBACV3pE,KAAK+wE,YAAc+I,EACnB6B,EAAeh8E,EAAOm6C,MAAMiiC,EAAW/F,EAAO9jB,EAAAjyB,WAAWsY,MAQ3D,OANAuhC,EAAU5P,gBAGNwR,GAAgB,IAAG5B,EAAUrqE,QAA6B,GAApBmsE,GAC1C9B,EAAUrqE,QAA6B,KAApBosE,EAEZF,GAGTnM,EAAAvtE,UAAAq3E,sBAAA,SACEnmE,GAEA,IAAIsU,EAAOznB,KAAK+wE,YAGhBtpD,EAAK/Y,IAAI,KAET,IAAIsnE,EAAQ,IAAI/uE,MAChBjH,KAAKs0E,mBAAmB7sD,EAAMuuD,GAG9B,IAAI10E,EAAQ6R,EAAU7R,MAClB4sB,EAA6B,KACjC,GAAI5sB,EAAM8R,MAAQxJ,EAAAyJ,SAASkqB,IAAK,CAC9B,IAAI0+C,EAA0B36E,EAAO4e,UACjC+7D,EAAQnxE,SAAQojB,EAAU+tD,EAAQ,IAIxC,OAFAjG,EAAMz3D,KAAKmiD,EAAAwb,aAAal8E,KAAMkuB,EAAS/a,IAEhC2jE,EAAQ92E,KAAKL,OAAQq2E,EAAO9jB,EAAAjyB,WAAWsY,OAGhDi3B,EAAAvtE,UAAAs3E,oBAAA,SACEpmE,GAQA,OAJAnT,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfnL,EAAUxD,OAEL3P,KAAKL,OAAO47C,eAIrBi0B,EAAAvtE,UAAAu3E,yBAAA,SACErmE,GASA,IAPA,IAAIxT,EAASK,KAAKL,OACdmiB,EAAe3O,EAAU2O,aACzBq6D,EAAkBr6D,EAAahX,OAC/B2c,EAAOznB,KAAK+wE,YACZqL,EAAe,IAAIn1E,MACnB2H,EAAW5O,KAAK4O,SAEXvO,EAAI,EAAGA,EAAI87E,IAAmB97E,EAAG,CACxC,IAAI4Q,EAAc6Q,EAAazhB,GAC3BO,EAAOqQ,EAAYrQ,KAAK+U,KACxBqG,EAAoB,KACpBw4D,EAA0B,EAC1BC,GAAyB,EAG7B,GAAIxjE,EAAY+K,KAAM,CAMpB,KALAA,EAAOpN,EAASiyD,YACd5vD,EAAY+K,KACZyL,EAAKg9C,eACLh9C,EAAK3B,0BAEI,SACP7U,EAAYwT,cACd+vD,EAAWx0E,KAAK20E,kBAAkB1jE,EAAYwT,YAAazI,EACzD,IAEFy4D,EAAyBz0E,KAAKkwE,oBAAoBh/D,IAAIsjE,QAInD,KAAIvjE,EAAYwT,YAehB,CACLzkB,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfpwD,EAAYrQ,KAAK+O,MAAMu3D,OAEzB,SAfA,GAJAsN,EAAWx0E,KAAK20E,kBAAkB1jE,EAAYwT,YAAa9a,EAAA2H,KAAKyhD,KAAI,IAGpE0hB,EAAyBz0E,KAAKkwE,oBAAoBh/D,IAAIsjE,GAClDx0E,KAAK2vE,aAAehmE,EAAA2H,KAAKG,KAAM,CACjCzR,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACf3jE,EAAYtB,MAAO3P,KAAK2vE,YAAY7xD,WAAY,UAElD,SAEF9B,EAAOhc,KAAK2vE,YAYd,IAAI0M,EAAUprE,EAAYoL,GAAG5S,EAAApH,YAAYma,OACrCqD,GAAW,EACf,GAAIw8D,EACF,GAAI7H,GAEF,GADAA,EAAW70E,EAAO0iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,MAAO,CACnD,IAAIz9B,EAAQ,IAAI8qC,EAAAjtC,MAAMpkB,GAAO,EAAGob,EAAMyL,EAAKwgD,gBAC3C,OAAQ/V,EAAAnL,kBAAkBytB,IACxB,KAAKtiB,EAAAjyB,WAAW75B,IACd+gB,EAAM1K,wBACJxK,QACEigD,EAAAlL,iBAAiBwtB,GACjB,GAEFx4D,GAEF,MAEF,KAAKk2C,EAAAjyB,WAAW55B,IACd8gB,EAAM1K,wBACJxK,QACEigD,EAAAjL,oBAAoButB,GACpBtiB,EAAAhL,qBAAqBstB,IAEvBx4D,GAEF,MAEF,KAAKk2C,EAAAjyB,WAAWp5B,IACdsgB,EAAMxK,sBAA2Bu1C,EAAA/K,iBAAiBqtB,GAAWx4D,GAC7D,MAEF,KAAKk2C,EAAAjyB,WAAWn5B,IACdqgB,EAAMxK,sBAAsBu1C,EAAA9K,iBAAiBotB,GAAWx4D,GACxD,MAEF,QAEE,OADAnR,QAAO,GACAlL,EAAO47C,cAIlB,IAAIwsB,EAAetgD,EAAKsgD,aACxB,GAAKA,GACA,GAAIA,EAAa72D,IAAItQ,GAKxB,OAJAZ,KAAKqV,MACH3L,EAAA4L,eAAeyH,uBACf9L,EAAYrQ,KAAK+O,MAAO/O,GAEnBZ,KAAKL,OAAO47C,mBANF9zB,EAAKsgD,aAAeA,EAAe,IAAI3gE,IAQ1D2gE,EAAar5D,IAAI9N,EAAMumB,GACvBtH,GAAW,QAGb7f,KAAKqV,MACH3L,EAAA4L,eAAegnE,wCACfrrE,EAAYtB,OAMlB,IAAKkQ,EAAU,CACTsH,OAAK,EACT,GACElW,EAAY6N,MAAMrV,EAAApH,YAAYs0D,IAAMltD,EAAApH,YAAYma,QAChDiL,EAAKpL,GAAE,OACP,CACA,IAAIotD,EAAgBhiD,EAAK4hD,eAAezoE,GACpC6oE,GACFzpE,KAAKqV,MACH3L,EAAA4L,eAAeyH,uBACf9L,EAAYrQ,KAAK+O,MAAOsB,EAAYrQ,KAAK+U,MAE3CwR,EAAQsiD,GAERtiD,EAAQM,EAAK6hD,eAAe1oE,EAAMob,GAEhCqgE,GAAS50D,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAW6U,cAClD,CACL,GAAI90D,EAAKu9C,YAAYpkE,GAAO,CAC1BZ,KAAKqV,MACH3L,EAAA4L,eAAeyH,uBACf9L,EAAYrQ,KAAK+O,MAAO/O,GAE1B,SAEFumB,EAAQM,EAAKwgD,eAAergD,SAAS5L,EAAMpb,EAAMqQ,GAC7CorE,GAAS50D,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAW6U,UAEzD,IAAItJ,EAAYj3D,EAAKi3D,UACjBuB,GACE/sD,EAAKwjD,UAAUuJ,EAAUx4D,IAAOyL,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAW9C,SAC1EqO,GACFxrD,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAWwB,UAC1CkT,EAAa79D,KACX5e,EAAO+5C,UAAUvyB,EAAMlC,MACrBwvD,EACID,EACAx0E,KAAKkzE,WAAWsB,OAIxB4H,EAAa79D,KACX5e,EAAO+5C,UAAUvyB,EAAMlC,MAAOuvD,IAE5BrtD,EAAMnL,KAAKK,GAAG,MACXoL,EAAKikD,YAAY8I,EAAUx4D,GAC3ByL,EAAKohD,eAAe1hD,EAAMlC,MAAOlb,EAAA29D,WAAWiE,SADVlkD,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAWiE,YAKjFsH,GAMFmJ,EAAa79D,KACX5e,EAAO+5C,UAAUvyB,EAAMlC,MACrBjJ,EAAK+3C,aAAap0D,KAGtB8nB,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAW2C,yBACjCljD,EAAMnL,KAAKK,GAAG,KACvBoL,EAAKwhD,aAAa9hD,EAAMlC,MAAOlb,EAAA29D,WAAWiE,UAKlD,OAA8B,GAAvByQ,EAAatxE,OAChB,EACAgsE,EAAQn3E,EAAQy8E,EAAclqB,EAAAjyB,WAAWsY,OAG/Ci3B,EAAAvtE,UAAAw3E,qBAAA,SACEtmE,GAEA,OAAOnT,KAAK20E,kBAAkBxhE,EAAUyf,WAAYjpB,EAAA2H,KAAKG,KACvD,KAIJ+9D,EAAAvtE,UAAAy3E,sBAAA,SACEvmE,GAEA,IAAIxT,EAASK,KAAKL,OACdm6E,EAAY95E,KAAK+wE,YAGjBmJ,EAAWv6E,EAAO0iD,qBACpBriD,KAAKm6E,cACHn6E,KAAK20E,kBAAkBxhE,EAAUyiB,UAAWjsB,EAAA2H,KAAK1N,MACjD5D,KAAK2vE,cAKL8K,GAAa,EACjB,GAAIvoB,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,MAAO,CAEnD,GADA/5C,OAAOqnD,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAW75B,MAC5C8rD,EAAAlL,iBAAiBkzB,GAAW,OAAOv6E,EAAO86C,MAC/CggC,GAAa,EAIf,IAAIzjD,EAAQ8iD,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1BvoE,KAAK+wE,YAAcgJ,EACnB,IAAI/yD,EAAa,SAAWgQ,EAC5B+iD,EAAU/yD,WAAaA,EACvB,IAAIkhD,EAAgB,YAAclxC,EAClC+iD,EAAU7R,cAAgBA,EAC1B6R,EAAU7O,qBAAqBgP,GAC/B,IAAIlE,EAAQ,IAAI/uE,MACZkM,EAAUA,UAAUC,MAAQxJ,EAAAyJ,SAASqrB,MACvC1+B,KAAKk2E,kBAAmC/iE,EAAUA,UAAWF,YAAY,EAAO+iE,GAEhFA,EAAMz3D,KAAKve,KAAK04E,iBAAiBvlE,EAAUA,YAE7C,IASIqnE,GATaT,EAAU19D,GAAE,OASM09D,EAAU19D,GAAE,IAE3Cm+D,IACFx6E,KAAKq2E,oBAAoB0D,EAAW/D,GACpCA,EAAMz3D,KAAK5e,EAAOs6C,GAAGiuB,KAElBuS,GACHzE,EAAMxE,QAAQ7xE,EAAOs6C,GAAGjzB,EAAYrnB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQ+O,KAEnE,IAAI/nD,EAAO2kD,EAAQn3E,EAAQq2E,EAAO9jB,EAAAjyB,WAAWsY,MAoB7C,OAnBIiiC,GAAgBT,EAAUj7D,MAAM,SAClCqT,EAAOxyB,EAAO06C,KAAK6tB,EAAe/1C,IAE/BsoD,IAAcV,EAAUj7D,MAAM,QACjCqT,EAAOxyB,EAAOm6C,MAAM9yB,EAAY,CAAEmL,KAIpC4nD,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAU/2D,MACR,OAKEy3D,EAAYX,EAAU3P,QAAQ4P,GAC7BD,EAAU1P,mBAAmB2P,GAClC/5E,KAAK+wE,YAAc+I,EACZ3nD,GAMTq9C,EAAAvtE,UAAAu6E,sBAAA,SACE/mE,EACAwtD,EACAmY,GAEAvwE,OAAO4K,EAAQ4G,GAAG5S,EAAApH,YAAYsiB,UAC9B,IAAI3I,EAAOvG,EAAQuG,KACnB,SACkB,EAAdo/D,IACFp/D,EAAKK,GAAE,IACP4mD,EAAe5mD,GAAE,IACjBL,EAAK0/B,KAAOunB,EAAevnB,MACtB17C,KAAK2vE,YAAc1M,GAAgB7vD,MACnCpT,KAAK2vE,YAAc3zD,GAAM5I,MAE9B,OACA,OACE,IAAIypC,EAAQ7gC,EAAKi3C,yBAAyBtpD,EAAA2H,KAAKlO,KAC/C,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBqS,EAAQ+O,kBACJu7B,QAAQtqC,EAAQiP,uBAAyBm4B,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIN,EAAO9mC,EAAQuG,KAAKm3C,wBAAwBxpD,EAAA2H,KAAKlO,KACrD,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBqS,EAAQ+O,kBACJu7B,QAAQtqC,EAAQiP,sBAAwB63B,EACxC,GAGR,OACA,OACE,OAAOv8C,KAAKL,OAAOyD,IACQ,GAAzBqS,EAAQ+O,kBACJu7B,QAAQtqC,EAAQiP,sBAChB,GAGR,OACA,OACE,IAAKjP,EAAQmN,QAAQxR,QAAQc,SAC3B,OAAOlS,KAAKL,OAAOyD,IACQ,GAAzBqS,EAAQ+O,kBACJu7B,QAAQtqC,EAAQiP,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBjP,EAAQ+O,kBACXxkB,KAAKL,OAAO0D,IACV08C,QAAQtqC,EAAQiP,sBAChBs7B,SAASvqC,EAAQiP,uBAEnB1kB,KAAKL,OAAO0D,IAAI,GAEtB,QAEE,IAAMoS,EAAQ0C,aAAa85C,EAAA5kD,eAAeyE,UAAYmxD,GAAkBt5D,EAAA2H,KAAKzN,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0B2R,EAASmP,oBAGxD5kB,KAAK2vE,YAAchmE,EAAA2H,KAAKzN,IAE1B,QACE,OAAO7D,KAAKL,OAAOkE,IAA0B4R,EAASmP,oBAExD,QAEE,OADA/Z,QAAO,GACA7K,KAAKL,OAAO47C,gBAKzBi0B,EAAAvtE,UAAA0yE,kBAAA,SACE/hD,EACAqwC,EACAmY,GAGA,IAAIjpD,EAEJ,YALA,IAAAipD,MAAA,GAEAp7E,KAAK2vE,YAAc1M,EAEfA,GAAkBt5D,EAAA2H,KAAKG,OAAM2pE,GAAW,GACpCxoD,EAAWxf,MACjB,KAAKxJ,EAAAyJ,SAAS8c,UACZgC,EAAOnyB,KAAKy8E,2BAAgD7pD,EAAYqwC,EAAgBmY,GACxF,MAEF,KAAKxxE,EAAAyJ,SAAS4pB,OACZ9K,EAAOnyB,KAAK08E,wBAA0C9pD,EAAYqwC,EAAgBmY,GAClF,MAEF,KAAKxxE,EAAAyJ,SAAS+c,KACZ+B,EAAOnyB,KAAK28E,sBAAsC/pD,EAAYqwC,EAAgBmY,GAC9E,MAEF,KAAKxxE,EAAAyJ,SAAS8pB,MACZhL,EAAOnyB,KAAK48E,uBAAwChqD,EAAYqwC,EAAgBmY,GAChF,MAEF,KAAKxxE,EAAAyJ,SAASgd,cACZ8B,EAAOnyB,KAAK68E,+BAAwDjqD,EAAYqwC,EAAgBmY,GAChG,MAEF,KAAKxxE,EAAAyJ,SAASqI,SACZyW,EAAOnyB,KAAK88E,0BAA8ClqD,EAAYqwC,EAAexQ,mBAAoB2oB,GACzG,MAEF,KAAKxxE,EAAAyJ,SAAS6c,WACd,KAAKtmB,EAAAyJ,SAAS2c,MACd,KAAKpmB,EAAAyJ,SAASyc,KACd,KAAKlmB,EAAAyJ,SAASsqB,KACd,KAAK/zB,EAAAyJ,SAASmd,MACd,KAAK5mB,EAAAyJ,SAAS0c,KACZoC,EAAOnyB,KAAK+8E,4BAAkDnqD,EAAYqwC,EAAgBmY,GAC1F,MAEF,KAAKxxE,EAAAyJ,SAASgqB,WACZlL,EAAOnyB,KAAKg9E,4BAAkDpqD,EAAYqwC,EAAgBmY,GAC1F,MAEF,KAAKxxE,EAAAyJ,SAAS+M,QACZ+R,EAAOnyB,KAAKi9E,yBAA4CrqD,EAAYqwC,EAAgBmY,GACpF,MAEF,KAAKxxE,EAAAyJ,SAASkqB,IACZpL,EAAOnyB,KAAKk9E,qBAAoCtqD,EAAYqwC,EAAgBmY,GAC5E,MAEF,KAAKxxE,EAAAyJ,SAASid,cACZ6B,EAAOnyB,KAAK20E,kBAA4C/hD,EAAYA,WAAYqwC,EAAgBmY,GAChG,MAEF,KAAKxxE,EAAAyJ,SAASkd,eACZ4B,EAAOnyB,KAAKm9E,gCAA0DvqD,EAAYqwC,EAAgBmY,GAClG,MAEF,KAAKxxE,EAAAyJ,SAASqqB,QACZvL,EAAOnyB,KAAKo9E,yBAA4CxqD,EAAYqwC,EAAgBmY,GACpF,MAEF,KAAKxxE,EAAAyJ,SAASwqB,aACZ1L,EAAOnyB,KAAKq9E,8BAAsDzqD,EAAYqwC,EAAgBmY,GAC9F,MAEF,KAAKxxE,EAAAyJ,SAASyqB,YACZ3L,EAAOnyB,KAAKs9E,6BAAoD1qD,EAAYqwC,EAAgBmY,GAC5F,MAEF,QACEp7E,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEbwiB,EAAOnyB,KAAKL,OAAO47C,cAIvB,IAAIo0B,EAAc3vE,KAAK2vE,YACnB4N,EAAgD,IAA7B,EAAXnC,GAgBZ,OAfIzL,GAAe1M,IACF,EAAXmY,GACFjpD,EAAOnyB,KAAKw9E,kBAAkBrrD,EAAMw9C,EAAa1M,GAAgB,EAAMsa,EAAM3qD,GAC7E2qD,GAAO,EACPv9E,KAAK2vE,YAAc1M,GACC,EAAXmY,IACTjpD,EAAOnyB,KAAKw9E,kBAAkBrrD,EAAMw9C,EAAa1M,GAAgB,EAAOsa,EAAM3qD,GAC9E2qD,GAAO,EACPv9E,KAAK2vE,YAAc1M,IAGnBsa,IAAMprD,EAAOnyB,KAAKy9E,uBAAuBtrD,EAAMw9C,IAG/C3vE,KAAKoR,QAAQ2W,WAAW/nB,KAAK25E,iBAAiBxnD,EAAMS,EAAWjjB,OAC5DwiB,GAITq9C,EAAAvtE,UAAAogD,qBAAA,SACEzvB,EACAqwC,EACAmY,GAEA,YAFA,IAAAA,MAAA,GAEOp7E,KAAKL,OAAO0iD,qBACjBriD,KAAK20E,kBAAkB/hD,EAAYqwC,EAAgBmY,KAIvD5L,EAAAvtE,UAAAu7E,kBAAA,SACErrD,EAEAm8C,EAEAz7C,EAEA6qD,EAEAH,EACAnX,GAEA,IAAIzmE,EAASK,KAAKL,OAGlB,OAAiB,IAAb2uE,EAASl7D,MACXvI,OAAkB,IAAXgoB,EAAOzf,MACdpT,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACfxO,EAAWz2D,MAAO2+D,EAASxwD,WAAY+U,EAAO/U,YAEzCne,EAAO47C,eAID,IAAX1oB,EAAOzf,KAA8BzT,EAAOw6C,KAAKhoB,IAEjDnyB,KAAK+wE,YAAY9F,UAAU94C,EAAMm8C,KAAWA,EAAWA,EAAS5b,iBAE/D4b,EAAS3jD,eAAekI,IACtB6qD,IACCpP,EAAS5b,iBAAmB7/B,EAC9B7yB,KAAKqV,MACH3L,EAAA4L,eAAeqoE,wBACfvX,EAAWz2D,OAGb3P,KAAKqV,MACH3L,EAAA4L,eAAesoE,sDACfxX,EAAWz2D,MAAO2+D,EAASxwD,WAAY+U,EAAO/U,aAMlDwwD,EAASjyD,GAAE,GAGTwW,EAAOxW,GAAE,GACM,IAAbiyD,EAASl7D,KAGI,IAAXyf,EAAOzf,OACT+e,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQs6C,WAAY1rD,IAMtB,IAAXU,EAAOzf,OAChB+e,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQu6C,UAAW3rD,IAMhCU,EAAOxW,GAAE,GAGD,IAAbiyD,EAASl7D,KACPyf,GAAUlpB,EAAA2H,KAAK1N,MACjBuuB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASmjC,MAAO75C,EAAMxyB,EAAOkE,IAAI,IACtD05E,GAAO,GAGLprD,EAFOU,EAAOxW,GAAE,GACdwW,EAAOxW,GAAE,IACJ1c,EAAOw3C,MAAM+a,EAAA3uB,QAAQw6C,cAAe5rD,GAEpCxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQy6C,cAAe7rD,GAGzCU,EAAOxW,GAAE,IACJ1c,EAAOw3C,MAAM+a,EAAA3uB,QAAQ06C,cAAe9rD,GAEpCxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ26C,cAAe/rD,GAM3CU,GAAUlpB,EAAA2H,KAAK1N,MACjBuuB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASojC,MAAO95C,EAAMxyB,EAAOmE,IAAI,IACtDy5E,GAAO,GAGLprD,EAFOU,EAAOxW,GAAE,GACdwW,EAAOxW,GAAE,IACJ1c,EAAOw3C,MAAM+a,EAAA3uB,QAAQ46C,cAAehsD,GAEpCxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ66C,cAAejsD,GAGzCU,EAAOxW,GAAE,IACJ1c,EAAOw3C,MAAM+a,EAAA3uB,QAAQ86C,cAAelsD,GAEpCxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ+6C,cAAensD,IAOjDtnB,OAAmB,GAAZgoB,EAAOpjB,MAAyB,sBACvC0iB,EAAOxyB,EAAOw6C,KAAKhoB,IAIZm8C,EAASjyD,GAAE,IAAuBwW,EAAOxW,GAAE,GAKhD8V,EAFW,IAAXU,EAAOzf,KACLk7D,EAASjyD,GAAE,IACN1c,EAAOw3C,MACZm3B,EAASjyD,GAAE,GACP61C,EAAA3uB,QAAQg7C,gBACRrsB,EAAA3uB,QAAQi7C,gBACZrsD,GAGKxyB,EAAOw3C,MACZm3B,EAASjyD,GAAE,GACP61C,EAAA3uB,QAAQk7C,gBACRvsB,EAAA3uB,QAAQm7C,gBACZvsD,GAMAm8C,EAASjyD,GAAE,IACN1c,EAAOw3C,MACZm3B,EAASjyD,GAAE,GACP61C,EAAA3uB,QAAQo7C,gBACRzsB,EAAA3uB,QAAQq7C,gBACZzsD,GAGKxyB,EAAOw3C,MACZm3B,EAASjyD,GAAE,GACP61C,EAAA3uB,QAAQs7C,gBACR3sB,EAAA3uB,QAAQu7C,gBACZ3sD,GAQFm8C,EAASjyD,GAAE,IAGTwW,GAAUlpB,EAAA2H,KAAK1N,MACjBuuB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS4iC,MAAOt5C,EAAMxyB,EAAO0D,IAAI,IACtDk6E,GAAO,GACG1qD,EAAOxW,GAAE,MACnB8V,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQw7C,QAAS5sD,IAI9BU,EAAOxW,GAAE,KAClB8V,EAAOxyB,EAAOw3C,MACZm3B,EAASjyD,GAAE,GAAqB61C,EAAA3uB,QAAQy7C,UAAY9sB,EAAA3uB,QAAQ07C,UAC5Dj/E,KAAKy9E,uBAAuBtrD,EAAMm8C,IAEpCiP,GAAO,GAKHjP,EAASjyD,GAAE,KAETiyD,EAAS5yB,KAAO7oB,EAAO6oB,OACzBvpB,EAAOnyB,KAAKy9E,uBAAuBtrD,EAAMm8C,GACzCiP,GAAO,GAMfv9E,KAAK2vE,YAAc98C,EACZ0qD,EACHv9E,KAAKy9E,uBAAuBtrD,EAAMU,GAClCV,IAGNq9C,EAAAvtE,UAAAw6E,2BAAA,SACE7pD,EACAqwC,EACAmY,GAEA,IAAI8D,GAAqC,EAAd9D,EAC3B,OAAQxoD,EAAWD,eACjB,KAAK/oB,EAAAozB,cAAcmiD,OACnB,KAAKv1E,EAAAozB,cAAc24B,GACjB,IAAIluC,EAAOznB,KAAK+wE,YACZl+C,EAAS7yB,KAAK4O,SAASiyD,YACzBh2D,OAAO+nB,EAAWC,QAClBpL,EAAKg9C,eACLh9C,EAAK3B,yBAEP,OAAK+M,EACE7yB,KAAK20E,kBAAkB/hD,EAAWA,WAAYC,EAA4B,EAApBqsD,GADzCl/E,KAAKL,OAAO47C,cAGlC,KAAK3xC,EAAAozB,cAAc4nC,QACjB/5D,QAAQ+nB,EAAWC,QACnB,IAAIV,EAAOnyB,KAAK20E,kBAAkB/hD,EAAWA,WAAYqwC,EAAemc,WAAYF,GAChFljE,EAAOhc,KAAK2vE,YAChB,GAAI3vE,KAAK+wE,YAAY9F,UAAU94C,EAAMnW,GACnChc,KAAKuvB,KACH7lB,EAAA4L,eAAe+pE,yBACfzsD,EAAWA,WAAWjjB,YAEnB,IAAK3P,KAAKoR,QAAQiB,SAAU,CACjC,IAAI1S,EAASK,KAAKL,OAEd2/E,GADA73D,EAAOznB,KAAK+wE,aACK3H,oBAAoBptD,GAAMiJ,MAC1CwC,EAAKikD,YAAYv5C,EAAMnW,IAAOyL,EAAKwhD,aAAaqW,EAAWv1E,EAAA29D,WAAWiE,SAC3ElkD,EAAKwhD,aAAaqW,EAAWv1E,EAAA29D,WAAW9C,SACxCzyC,EAAOxyB,EAAO46C,GACZ56C,EAAOm4C,UAAUwnC,EAAWntD,GAC5BxyB,EAAOi4C,UAAU0nC,EAAWtjE,EAAK83C,gBACjCn0D,EAAO47C,eAIX,OADAv7C,KAAK2vE,YAAc3vE,KAAK2vE,YAAYjd,gBAC7BvgC,EAET,QAAStnB,QAAO,GAElB,OAAO7K,KAAKL,OAAO47C,eAQrBi0B,EAAAvtE,UAAAy6E,wBAAA,SACE9pD,EACAqwC,EACAmY,GAEA,IAIImE,EACAC,EACAC,EACAC,EACAC,EAEAxtD,EAVAxyB,EAASK,KAAKL,OACdszB,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnB0sD,GAAW,EAEX5sD,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAKrD,EAAAC,MAAMgoC,SAKT,GAJA2nB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa8C,IAC5C,CACZ6lB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAKrB,GAFAkkC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAEhB,OAlBEgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAUIysD,EAAWvsE,MACjB,OACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASqjC,MAAOqT,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASujC,MAAOmT,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASujC,MACTla,EAAArpB,SAASqjC,MACbqT,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASsjC,MAAOoT,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASwjC,MACTna,EAAArpB,SAASsjC,MACboT,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASwjC,MAAOkT,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASyjC,MAAOiT,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS0jC,MAAOgT,EAAUE,GAC/C,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlBv7C,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAEF,KAAK+rB,EAAAC,MAAMioC,YAKT,GAJA0nB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa0C,IAC5C,CACZimB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAKrB,GAFAkkC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAEhB,OAlBEgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAUIysD,EAAWvsE,MACjB,OACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASikC,MAAOyS,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASmkC,MACT9a,EAAArpB,SAASikC,MACbyS,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASmkC,MAAOuS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASkkC,MAAOwS,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASokC,MACT/a,EAAArpB,SAASkkC,MACbwS,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASokC,MAAOsS,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASqkC,MAAOqS,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASskC,MAAOoS,EAAUE,GAC/C,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlBv7C,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAEF,KAAK+rB,EAAAC,MAAMkoC,gBAKT,GAJAynB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa+C,IAC5C,CACZ4lB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAKrB,GAFAkkC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,KAAM6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAEzD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAEhB,OAlBEgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAUIysD,EAAWvsE,MACjB,OACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS2jC,MAAO+S,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS6jC,MACTxa,EAAArpB,SAAS2jC,MACb+S,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS6jC,MAAO6S,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS4jC,MAAO8S,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS8jC,MACTza,EAAArpB,SAAS4jC,MACb8S,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS8jC,MAAO4S,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS+jC,MAAO2S,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASgkC,MAAO0S,EAAUE,GAC/C,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlBv7C,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAEF,KAAK+rB,EAAAC,MAAMmoC,mBAKT,GAJAwnB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa2C,IAC5C,CACZgmB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAKrB,GAFAkkC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,KAAM6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAEzD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAEhB,OAlBEgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAUIysD,EAAWvsE,MACjB,OACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASukC,MAAOmS,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASykC,MACTpb,EAAArpB,SAASukC,MACbmS,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASykC,MAAOiS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASwkC,MAAOkS,EAAUE,GAC/C,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS0kC,MACTrb,EAAArpB,SAASwkC,MACbkS,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS0kC,MAAOgS,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS2kC,MAAO+R,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS4kC,MAAO8R,EAAUE,GAC/C,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlBv7C,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAGF,KAAK+rB,EAAAC,MAAMsoC,qBACX,KAAKvoC,EAAAC,MAAMooC,cAUT,GAJAunB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ38C,GAAYrD,EAAAC,MAAMooC,eAAiBh4D,KAAK2vE,YAAYtzD,GAAE,KAExD,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAawC,IAC5C,CACZmmB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAQN,GAFA6sD,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWwsD,EAAS1hE,WAAY4hE,EAAU5hE,YAE/F9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAEhB,OAlBEgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAUIysD,EAAWvsE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASyiC,MAAOiU,EAAUE,GAC/C,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS0iC,MACTrZ,EAAArpB,SAASyiC,MACbiU,EACAE,GAEF,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS0iC,MAAOgU,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASijC,MAAOyT,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASkjC,MAAOwT,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQw8C,gBAC1BpgF,EAAO23C,OAAO4a,EAAArpB,SAASm3C,WAAYT,EAAUE,IAE/C,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlBv7C,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAEF,KAAK+rB,EAAAC,MAAMuoC,0BACX,KAAKxoC,EAAAC,MAAMqoC,mBAKT,GAJAsnB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ38C,GAAYrD,EAAAC,MAAMqoC,oBAAsBj4D,KAAK2vE,YAAYtzD,GAAE,KAE7D,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAayC,IAC5C,CACZkmB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAQN,GAFA6sD,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWwsD,EAAS1hE,WAAY4hE,EAAU5hE,YAE/F9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAEhB,OAlBEgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAUIysD,EAAWvsE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS2iC,MAAO+T,EAAUE,GAC/C,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS4iC,MACTvZ,EAAArpB,SAAS2iC,MACb+T,EACAE,GAEF,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS4iC,MAAO8T,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASmjC,MAAOuT,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASojC,MAAOsT,EAAUE,GAC/C,MAEF,QACEttD,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ08C,gBAC1BtgF,EAAO23C,OAAO4a,EAAArpB,SAASq3C,WAAYX,EAAUE,IAE/C,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlBv7C,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAEF,KAAK+rB,EAAAC,MAAMwpC,OACT,OAAOp5D,KAAKmgF,kBAAkBltD,EAAMC,EAAO+vC,GAE7C,KAAKtzC,EAAAC,MAAMypC,YAAaumB,GAAW,EACnC,KAAKjwD,EAAAC,MAAMljB,KAKT,GAJA6yE,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa+B,KAC5C,CACZ4mB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFH,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,OAC7C,CAGL,GAFAC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS8sC,OAAQ4J,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASu3C,OACTluB,EAAArpB,SAAS8sC,OACb4J,EACAE,GAEF,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASu3C,OAAQb,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASw3C,OAAQd,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASy3C,OAAQf,EAAUE,GAChD,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM0pC,aAAcsmB,GAAW,EACpC,KAAKjwD,EAAAC,MAAMhjB,MAKT,GAJA2yE,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAagC,KAC5C,CACZ2mB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFH,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,gBACZ,CAGL,GAFA8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS03C,OAAQhB,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACbhB,EACAE,GAEF,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS23C,OAAQjB,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS43C,OAAQlB,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS63C,OAAQnB,EAAUE,GAChD,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM2pC,gBAAiBqmB,GAAW,EACvC,KAAKjwD,EAAAC,MAAMyoC,SAKT,GAJAknB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAaiC,KAC5C,CACZ0mB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFL,EAAWv/E,KAAKy9E,uBAAuB8B,EAAUC,GACjDC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,OAC7C,CAGL,GAFAC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS6kC,OAAQ6R,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS83C,OACTzuB,EAAArpB,SAAS6kC,OACb6R,EACAE,GAEF,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS83C,OAAQpB,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS+3C,OAAQrB,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASg4C,OAAQtB,EAAUE,GAChD,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM4pC,yBAA0BomB,GAAW,EAChD,KAAKjwD,EAAAC,MAAMwoC,kBAKT,GAJAmnB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAakC,KAC5C,CACZymB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,IAAI31B,OAAQ,EAGZ,GAAyB,IAArB5lB,KAAK2vE,YAAYv8D,MAGnB,GAFAqsE,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOvpB,EAAA2H,KAAKzN,IAAG,GAClD67E,EAAY1/E,KAAK2vE,cACX/pD,EAAW5lB,KAAKqwE,gBAAiB,CAErC,KADIyQ,EAAY9gF,KAAK4iB,QAAQjM,aAAalN,EAAAzG,cAAcwE,QACxC,CACdxH,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,SAEpBwiB,EAAOxyB,EAAO47C,cACd,MAGF,KADIt5C,EAAY6+E,EAAUjlE,QAAUilE,EAAUjlE,QAAQ3a,IAAIuI,EAAAzG,cAAcqF,KAAO,MAC/D,CACdrI,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,aAEpBwiB,EAAOxyB,EAAO47C,cACd,MAEF1wC,OAAO5I,EAAUmR,MAAQ6+C,EAAA7kD,YAAY2N,oBACrC/a,KAAKqwE,eAAiBzqD,EAAW5lB,KAAK4O,SAASoM,gBAAmC/Y,EAAW,YAc/F,GARAs9E,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCv/E,KAAK2vE,YAAahmE,EAAA2H,KAAKxN,KACvB,GAAO,EACPmvB,GAEFusD,EAAWx/E,KAAK2vE,YAChB8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOvpB,EAAA2H,KAAKxN,IAAG,GAClD47E,EAAY1/E,KAAK2vE,cACX/pD,EAAW5lB,KAAKswE,gBAAiB,CAErC,KADIwQ,EAAY9gF,KAAK4iB,QAAQjM,aAAalN,EAAAzG,cAAcuE,OACxC,CACdvH,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,QAEpBwiB,EAAOxyB,EAAO47C,cACd,MAGF,KADIt5C,EAAY6+E,EAAUjlE,QAAUilE,EAAUjlE,QAAQ3a,IAAIuI,EAAAzG,cAAcqF,KAAO,MAC/D,CACdrI,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,YAEpBwiB,EAAOxyB,EAAO47C,cACd,MAEF1wC,OAAO5I,EAAUmR,MAAQ6+C,EAAA7kD,YAAY2N,oBACrC/a,KAAKswE,eAAiB1qD,EAAW5lB,KAAK4O,SAASoM,gBAAmC/Y,EAAW,MAM/FkwB,EAHIvM,GAAY5lB,KAAK61E,gBAAgBjwD,GAG9B5lB,KAAK+gF,eAAen7D,EAAU,CAAE25D,EAAUE,GAAa7sD,GAFvDjzB,EAAO47C,cAIhB,MAEF,KAAK5rB,EAAAC,MAAM6pC,aAAcmmB,GAAW,EACpC,KAAKjwD,EAAAC,MAAM0oC,MAKT,GAJAinB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAamC,KAC5C,CACZwmB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFL,EAAWv/E,KAAKy9E,uBAAuB8B,EAAUC,GACjDC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,gBACZ,CAGL,GAFA8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASm4C,OAAQzB,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASo4C,OACT/uB,EAAArpB,SAASm4C,OACbzB,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASo4C,OAAQ1B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASklC,OAAQwR,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASq4C,OACThvB,EAAArpB,SAASklC,OACbwR,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASq4C,OAAQ3B,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASs4C,OAAQ5B,EAAUE,GAChD,MAEF,QACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASu4C,OAAQ7B,EAAUE,GAChD,MAEF,QACE50E,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM8pC,eAAgBkmB,GAAW,EACtC,KAAKjwD,EAAAC,MAAM2oC,QAKT,GAJAgnB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,GACxCuc,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAaoC,KAC5C,CACZumB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFL,EAAWv/E,KAAKy9E,uBAAuB8B,EAAUC,GACjDC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,gBACZ,CAGL,GAFA8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OAIA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASmlC,OAAQuR,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASw4C,OACTnvB,EAAArpB,SAASmlC,OACbuR,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASw4C,OAAQ9B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASolC,OAAQsR,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASy4C,OACTpvB,EAAArpB,SAASolC,OACbsR,EACAE,GAEF,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASy4C,OAAQ/B,EAAUE,GAChD,MAEF,QAEE,KADI75D,EAAW5lB,KAAKmwE,gBACL,CAEb,KADI2Q,EAAY9gF,KAAK4iB,QAAQjM,aAAalN,EAAAzG,cAAcwE,QACxC,CACdxH,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,SAEpBwiB,EAAOxyB,EAAO47C,cACd,MAGF,KADIt5C,EAAY6+E,EAAUjlE,QAAUilE,EAAUjlE,QAAQ3a,IAAIuI,EAAAzG,cAAcsF,KAAO,MAC/D,CACdtI,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,aAEpBwiB,EAAOxyB,EAAO47C,cACd,MAEF1wC,OAAO5I,EAAUmR,MAAQ6+C,EAAA7kD,YAAY2N,oBACrC/a,KAAKmwE,eAAiBvqD,EAAW5lB,KAAK4O,SAASoM,gBAAmC/Y,EAAW,MAK7FkwB,EAHIvM,GAAY5lB,KAAK61E,gBAAgBjwD,GAG9B5lB,KAAK+gF,eAAen7D,EAAU,CAAE25D,EAAUE,GAAa7sD,GAFvDjzB,EAAO47C,cAIhB,MAEF,QAEE,KADI31B,EAAW5lB,KAAKowE,gBACL,CACb,IAAI0Q,EASA7+E,EARJ,KADI6+E,EAAY9gF,KAAK4iB,QAAQjM,aAAalN,EAAAzG,cAAcuE,OACxC,CACdvH,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,QAEpBwiB,EAAOxyB,EAAO47C,cACd,MAGF,KADIt5C,EAAY6+E,EAAUjlE,QAAUilE,EAAUjlE,QAAQ3a,IAAIuI,EAAAzG,cAAcsF,KAAO,MAC/D,CACdtI,KAAKqV,MACH3L,EAAA4L,eAAe6sD,mBACfvvC,EAAWjjB,MAAO,YAEpBwiB,EAAOxyB,EAAO47C,cACd,MAEF1wC,OAAO5I,EAAUmR,MAAQ6+C,EAAA7kD,YAAY2N,oBACrC/a,KAAKowE,eAAiBxqD,EAAW5lB,KAAK4O,SAASoM,gBAAmC/Y,EAAW,MAK7FkwB,EAHIvM,GAAY5lB,KAAK61E,gBAAgBjwD,GAG9B5lB,KAAK+gF,eAAen7D,EAAU,CAAE25D,EAAUE,GAAa7sD,GAFvDjzB,EAAO47C,cAIhB,MAEF,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM+pC,yBAA0BimB,GAAW,EAChD,KAAKjwD,EAAAC,MAAM8oC,kBAKT,GAJA6mB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAese,SACvD/B,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAagD,aAC5C,CACZ2lB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAKrB,OAFAkkC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,YACT3vE,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS+kC,OAAQ2R,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS24C,OAAQjC,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS24C,OACTtvB,EAAArpB,SAAS+kC,OACb2R,EACAE,GAEF,MAEF,QACA,QAKE,OAJAz/E,KAAKqV,MACH3L,EAAA4L,eAAemsE,2CACf7uD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWhzB,KAAK2vE,YAAY7xD,YAE1Ene,EAAO47C,cAEhB,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMgqC,+BAAgCgmB,GAAW,EACtD,KAAKjwD,EAAAC,MAAM+oC,wBAKT,GAJA4mB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAese,SACvD/B,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa4C,aAC5C,CACZ+lB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAMrB,OAHAgkC,EAAWv/E,KAAKy9E,uBAAuB8B,EAAUC,GACjDC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,YACT3vE,KAAK2vE,YAAYv8D,MACvB,OACA,OAIA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASglC,OAAQ0R,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS64C,OAAQnC,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS64C,OACTxvB,EAAArpB,SAASglC,OACb0R,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASilC,OAAQyR,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS84C,OAAQpC,EAAUE,GAChD,MAEF,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS84C,OACTzvB,EAAArpB,SAASilC,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJAz/E,KAAKqV,MACH3L,EAAA4L,eAAemsE,2CACf7uD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWhzB,KAAK2vE,YAAY7xD,YAE1Ene,EAAO47C,cAEhB,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMiqC,2CAA4C+lB,GAAW,EAClE,KAAKjwD,EAAAC,MAAMgpC,oCAKT,GAJA2mB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAese,SACvD/B,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa6C,eAC5C,CACZ8lB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAMrB,OAHAgkC,EAAWv/E,KAAKy9E,uBAAuB8B,EAAUC,GACjDC,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,YACT3vE,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASilC,OAAQyR,EAAUE,GAElD,OACA,OACA,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASilC,OAAQyR,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS84C,OAAQpC,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS84C,OACTzvB,EAAArpB,SAASilC,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJAz/E,KAAKqV,MACH3L,EAAA4L,eAAemsE,2CACf7uD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWhzB,KAAK2vE,YAAY7xD,YAE1Ene,EAAO47C,cAEhB,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMkqC,iBAAkB8lB,GAAW,EACxC,KAAKjwD,EAAAC,MAAMipC,UAKT,GAJA0mB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAese,SACvD/B,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAaqC,aAC5C,CACZsmB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFH,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,gBACZ,CAGL,GAFA8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS8kC,OAAQ4R,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS+4C,OAAQrC,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS+4C,OACT1vB,EAAArpB,SAAS8kC,OACb4R,EACAE,GAEF,MAEF,QACA,QAKE,OAJAz/E,KAAKqV,MACH3L,EAAA4L,eAAemsE,2CACf7uD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWhzB,KAAK2vE,YAAY7xD,YAE1Ene,EAAO47C,cAEhB,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMmqC,WAAY6lB,GAAW,EAClC,KAAKjwD,EAAAC,MAAMkpC,IAKT,GAJAymB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAese,SACvD/B,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAasC,YAC5C,CACZqmB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFH,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,gBACZ,CAGL,GAFA8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASg5C,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASg5C,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASi5C,MAAOvC,EAAUE,GAC/C,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASi5C,MACT5vB,EAAArpB,SAASg5C,MACbtC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAz/E,KAAKqV,MACH3L,EAAA4L,eAAemsE,2CACf7uD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWhzB,KAAK2vE,YAAY7xD,YAE1Ene,EAAO47C,cAEhB,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMoqC,aAAc4lB,GAAW,EACpC,KAAKjwD,EAAAC,MAAMmpC,MAKT,GAJAwmB,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAese,SACvD/B,EAAWx/E,KAAK2vE,YAGZ3vE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAC5C,IAAI6P,EAEEnB,EADN,GADImB,EAAiBszD,EAAStzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAauC,aAC5C,CACZomB,EAAOnyB,KAAK6/E,sBAAsB90D,EAAUkI,EAAMssD,EAAUrsD,EAAON,GACnE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAGrB,GAAIqkC,EACFH,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAAQ,GAClDE,EAAY1/E,KAAK2vE,gBACZ,CAGL,GAFA8P,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,GAC1CE,EAAY1/E,KAAK2vE,cACbgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA1/E,KAAKqV,MACH3L,EAAA4L,eAAewqE,8CACfltD,EAAWjjB,MAAO,IAAK6vE,EAAS1hE,WAAY4hE,EAAU5hE,YAExD9d,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,cAhBdgkC,EAAWv/E,KAAKw9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP1sD,GAEFwsD,EAAYz/E,KAAKw9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPzsD,GAWN,OAAQlzB,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASk5C,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASk5C,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASm5C,OAAQzC,EAAUE,GAChD,MAEF,OACA,OACEttD,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASm5C,OACT9vB,EAAArpB,SAASk5C,OACbxC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAz/E,KAAKqV,MACH3L,EAAA4L,eAAemsE,2CACf7uD,EAAWjjB,MAAOggB,EAAA+nC,sBAAsB9kC,EAAWI,UAAWhzB,KAAK2vE,YAAY7xD,YAE1Ene,EAAO47C,cAEhB,QACE1wC,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAKF,KAAK5rB,EAAAC,MAAMspC,oBACT,IAAIzxC,EAAOznB,KAAK+wE,YACZmO,EAAqC,GAAd9D,EAC3BmE,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAemc,WAAYF,GACnEM,EAAWx/E,KAAK2vE,YAEhB,IAAIsS,EAAYx6D,EAAK8gD,OAOrB,GANAvoE,KAAK+wE,YAAckR,EACnBA,EAAU/W,qBAAqBqU,GAC/BE,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRvc,GAAkBt5D,EAAA2H,KAAK1N,MAAQq/D,GAAkBt5D,EAAA2H,KAAKG,KACxDguE,EAAYz/E,KAAKkiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACV3pE,KAAK+wE,YAActpD,EACnBznB,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxBuuB,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcoF,EAAUC,GAC7Bx/E,KAAKm6E,cAAcsF,EAAWC,GAC9B//E,EAAOyD,IAAI,SAIR,GAAIo8E,EAASvM,UAAW,CAC7B,IAAIkP,EAAyBniF,KAAKkwE,oBAAoBh/D,IAAIquE,GACtD6C,EAA0BpiF,KAAKkwE,oBAAoBh/D,IAAIuuE,GACvDlJ,EAAO9uD,EAAKihD,aAAa8W,GAC7BD,EAAW5/E,EAAOm4C,UAAUy+B,EAAKtxD,MAAOs6D,GAIxC,IAAI8C,GAAmB,EACnBF,GAA0BC,EACvBD,GAGH1C,EAAYz/E,KAAKkzE,WAAWuM,GAC5B2C,GAA0B,GAH1BC,GAAmB,EAKC,GAAXjH,IACXqE,EAAYz/E,KAAKsiF,gBAAgB7C,EAAWwC,EAAWx6D,IAGzD,IAAI86D,EAAa,IAAIt7E,MACjBk7E,GACFI,EAAW/Q,QACTxxE,KAAKwiF,YACH7iF,EAAOi4C,UAAU2+B,EAAKtxD,MAAOu6D,EAAS1rB,kBAI5C2rB,EAAYz/E,KAAKkiF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUtY,mBACV3pE,KAAK+wE,YAActpD,EAEnB0K,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcoF,EAAUC,GAC7BC,EACA4C,EACIriF,KAAKkzE,WACHvzE,EAAOi4C,UAAU2+B,EAAKtxD,MAAOu6D,EAAS1rB,iBAExCn0D,EAAOi4C,UAAU2+B,EAAKtxD,MAAOu6D,EAAS1rB,kBAExCquB,GAA0BC,IAAyBpiF,KAAKkwE,oBAAoBx+D,IAAIygB,GAChFokD,GAAM9uD,EAAK0hD,cAAcoN,QAS7B,GALAkJ,EAAYz/E,KAAKkiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACV3pE,KAAK+wE,YAActpD,EAGf0K,EAAOxyB,EAAO2kD,gBAAgBi7B,GAAU,EAAM,GAChDptD,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcoF,EAAUv/E,KAAK2vE,aAClC8P,EACAttD,OAIG,CACL,IAAIopD,EAAY9zD,EAAKihD,aAAa8W,GAC7B/3D,EAAKikD,YAAY6T,EAAUC,IAAW/3D,EAAKwhD,aAAasS,EAAUt2D,MAAOlb,EAAA29D,WAAWiE,SACrFlkD,EAAKwjD,UAAUsU,EAAUC,IAAW/3D,EAAKwhD,aAAasS,EAAUt2D,MAAOlb,EAAA29D,WAAW9C,SACtFzyC,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcx6E,EAAOm4C,UAAUyjC,EAAUt2D,MAAOs6D,GAAWC,GAChEC,EACA9/E,EAAOi4C,UAAU2jC,EAAUt2D,MAAOu6D,EAAS1rB,iBAIjD9zD,KAAK2vE,YAAc6P,EACnB,MAEF,KAAK7vD,EAAAC,MAAMupC,QACL1xC,EAAOznB,KAAK+wE,YACZmO,EAAqC,GAAd9D,EAC3BmE,EAAWv/E,KAAK20E,kBAAkB1hD,EAAMgwC,EAAemc,WAAYF,GACnEM,EAAWx/E,KAAK2vE,YAEZsS,EAAYx6D,EAAK8gD,OAOrB,GANAvoE,KAAK+wE,YAAckR,EACnBA,EAAU5W,sBAAsBkU,GAChCE,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOssD,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRvc,GAAkBt5D,EAAA2H,KAAK1N,MAAQq/D,GAAkBt5D,EAAA2H,KAAKG,KACxDguE,EAAYz/E,KAAKkiF,6BAA6BD,EAAWxC,EAAWD,GACpEyC,EAAUtY,mBACV3pE,KAAK+wE,YAActpD,EACnBznB,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxBuuB,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcoF,EAAUC,GAC7B7/E,EAAOyD,IAAI,GACXpD,KAAKm6E,cAAcsF,EAAWC,SAI3B,GAAIF,EAASvM,UAAW,CACzBkP,EAAyBniF,KAAKkwE,oBAAoBh/D,IAAIquE,GACtD6C,EAA0BpiF,KAAKkwE,oBAAoBh/D,IAAIuuE,GACvDlJ,EAAO9uD,EAAKihD,aAAa8W,GAC7BD,EAAW5/E,EAAOm4C,UAAUy+B,EAAKtxD,MAAOs6D,GAIxC,IAAIkD,GAAmB,EACnBN,GAA0BC,EACvBD,GAGH1C,EAAYz/E,KAAKkzE,WAAWuM,GAC5B2C,GAA0B,GAH1BK,GAAmB,EAKC,GAAXrH,IACXqE,EAAYz/E,KAAKsiF,gBAAgB7C,EAAWwC,EAAWx6D,IAGrD86D,EAAa,IAAIt7E,MACjBk7E,GAGFI,EAAW/Q,QACTxxE,KAAKwiF,YACH7iF,EAAOi4C,UAAU2+B,EAAKtxD,MAAOu6D,EAAS1rB,kBAI5C2rB,EAAYz/E,KAAKkiF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUtY,mBACV3pE,KAAK+wE,YAActpD,EAEnB0K,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcoF,EAAUC,GAC7BiD,EACIziF,KAAKkzE,WACHvzE,EAAOi4C,UAAU2+B,EAAKtxD,MAAOu6D,EAAS1rB,iBAExCn0D,EAAOi4C,UAAU2+B,EAAKtxD,MAAOu6D,EAAS1rB,gBAC1C2rB,IAEE0C,GAA0BC,IAAyBpiF,KAAKkwE,oBAAoBx+D,IAAIygB,GAChFokD,GAAM9uD,EAAK0hD,cAAcoN,QAS7B,GALAkJ,EAAYz/E,KAAKkiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACV3pE,KAAK+wE,YAActpD,EAGf0K,EAAOxyB,EAAO2kD,gBAAgBi7B,GAAU,EAAM,GAChDptD,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcoF,EAAUC,GAC7BrtD,EACAstD,OAIG,CACDlE,EAAY9zD,EAAK2hD,oBAAoBoW,GACpC/3D,EAAKikD,YAAY6T,EAAUC,IAAW/3D,EAAKwhD,aAAasS,EAAUt2D,MAAOlb,EAAA29D,WAAWiE,SACrFlkD,EAAKwjD,UAAUsU,EAAUC,IAAW/3D,EAAKwhD,aAAasS,EAAUt2D,MAAOlb,EAAA29D,WAAW9C,SACtFzyC,EAAOxyB,EAAO46C,GACZv6C,KAAKm6E,cAAcx6E,EAAOm4C,UAAUyjC,EAAUt2D,MAAOs6D,GAAWC,GAChE7/E,EAAOi4C,UAAU2jC,EAAUt2D,MAAOu6D,EAAS1rB,gBAC3C2rB,GAINz/E,KAAK2vE,YAAc6P,EACnB,MAEF,QACE30E,QAAO,GACPsnB,EAAOnyB,KAAKL,OAAO47C,cAGvB,IAAKqkC,EAAU,OAAOztD,EACtB,IAAIvjB,EAAW5O,KAAK4O,SAChBgc,EAAS5qB,KAAK4O,SAASu0D,kBAAkBlwC,EAAMjzB,KAAK+wE,aACxD,OAAKnmD,EACE5qB,KAAK0iF,eACV93D,EACAuH,EACAc,EACArkB,EAAS+xD,sBACT/xD,EAASgyD,yBACTqC,GAAkBt5D,EAAA2H,KAAKG,MAPL9R,EAAO47C,eAW7Bi0B,EAAAvtE,UAAA0gF,qBAAA,SACElb,EACAnmE,EACA+xE,EACAjN,GAIA,OAAOpmE,KAAK+gF,eAAetZ,EAAkB,CAAE4L,GAAajN,GAAY,IAG1EoJ,EAAAvtE,UAAA49E,sBAAA,SACEpY,EACAx0C,EACAssD,EACArsD,EACAkzC,GAEA,IAAIsZ,EACJ,GAAIjY,EAAiBprD,GAAG5S,EAAApH,YAAY+f,UAAW,CAC7C,IAAIhT,EAAgBvE,OAAO48D,EAAiB72D,QAAS/F,OAAOuE,EAAcgE,MAAQ6+C,EAAA7kD,YAAYwO,OAC9F8jE,EAAYjY,EAAiB92D,UAAU0W,eAAe,QAUtDq4D,EAAYjY,EAAiB92D,UAAU0W,eAAe,GAExD,IAAIo4D,EAAYz/E,KAAK20E,kBAAkBzhD,EAAOwsD,EAAS,GACvD,OAAO1/E,KAAK+gF,eAAetZ,EAAkB,CAAE8X,EAAUE,GAAarZ,IAGxEoJ,EAAAvtE,UAAAk+E,kBAAA,SAAkBvtD,EAAwBuoD,EAA6BlY,GACrE,IACIr0D,EADU5O,KAAK4iB,QACIhU,SACnB6Y,EAAOznB,KAAK+wE,YACZnmD,EAAShc,EAASu0D,kBAAkBvwC,EAAYnL,GACpD,IAAKmD,EAAQ,OAAO5qB,KAAKL,OAAO47C,cAChC,IAII2X,EAJA0vB,EAAiBh0E,EAAS+xD,sBAC1B3sC,EAAoBplB,EAASgyD,yBAIjC,OAAQh2C,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY6Q,OAEf,IAAKje,KAAKyzE,cAAsB7oD,GAAS,OAAO5qB,KAAKL,OAAO47C,cAG9D,KAAK0W,EAAA7kD,YAAYuO,MAIjB,KAAKs2C,EAAA7kD,YAAY8X,MACfguC,EAAmCtoC,EAAQ5O,KAC3C,MAEF,KAAKi2C,EAAA7kD,YAAYkO,mBACf,IAAIE,EAAsCoP,EAAQpP,gBAClD,IAAKA,EAKH,OAJAxb,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACfjwD,EAAWjjB,MAAkBib,EAAQjc,cAEhC3O,KAAKL,OAAO47C,cAGrB,KADItyB,EAAiBjpB,KAAK4O,SAASoM,gBAAgBQ,EAAiB,KAAM3R,EAAAg4D,UAAW/3D,EAAA22D,WAAWO,SAC3E,OAAOhhE,KAAKL,OAAO47C,cACxC1wC,OAAyD,GAAlDoe,EAAetY,UAAU0W,eAAevc,QAC/CooD,EAAajqC,EAAetY,UAAU0W,eAAe,GACrD,MAEF,KAAK4qC,EAAA7kD,YAAYqO,SACf,IAAIwN,EACJ,KADIA,EAA4B2B,EAAQ3B,gBAMtC,OAJAjpB,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACfjwD,EAAWjjB,MAAkBib,EAAQjc,cAEhC3O,KAAKL,OAAO47C,cAErB1wC,OAAyD,GAAlDoe,EAAetY,UAAU0W,eAAevc,QAC/CooD,EAAajqC,EAAetY,UAAU0W,eAAe,GACrD,MAEF,KAAK4qC,EAAA7kD,YAAYwO,MACf,GAAIoY,EAAmB,CACrB,IAAI8uD,EAAcr7D,EAAKpL,GAAE,OAcrB0mE,EAAqBn4D,EAAQF,eAAeunC,EAAAzoD,aAAa4B,YAAa03E,GAC1E,IAAKC,EAaH,OAZyBn4D,EAAQF,eAAeunC,EAAAzoD,aAAa2B,YAAa23E,GAOxE9iF,KAAKqV,MACH3L,EAAA4L,eAAe0tE,+CACfpwD,EAAWjjB,MAAeib,EAAQjc,cAPpC3O,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACf1vC,EAAWjjB,MAAeib,EAAQjc,cAQ/B3O,KAAKL,OAAO47C,cAErB1wC,OAAqD,GAA9Ck4E,EAAWpyE,UAAU0W,eAAevc,QAC3CooD,EAAa6vB,EAAWpyE,UAAU0W,eAAe,GACjD,MAIJ,QAKE,OAJArnB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,cAMvB,OADA1wC,OAAOqoD,GAAcvpD,EAAA2H,KAAKG,MACnBzR,KAAK0iF,eACV93D,EACA5qB,KAAK20E,kBAAkBwG,EAAiBjoB,EAAY,IACpDtgC,EACAgwD,EACA5uD,EACAivC,GAAkBt5D,EAAA2H,KAAKG,OAK3B+9D,EAAAvtE,UAAAygF,eAAA,SAEE93D,EAEAyoD,EAEA8H,EAEAyH,EAEAK,EAEAC,GAEA,IAAIvjF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YAKhB,OAAQnmD,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY8X,MACf,OAAIuC,EAAKoiD,YAAoBj/C,EAAQ3F,MAAOlb,EAAA29D,WAAW6U,UAAU,IAC/Dv8E,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACf1H,EAAgBxrE,MAAOib,EAAOjc,cAEhC3O,KAAK2vE,YAAcuT,EAAct4D,EAAQ5O,KAAOrS,EAAA2H,KAAKG,KAC9C9R,EAAO47C,eAETv7C,KAAKmjF,oBAA2Bv4D,EAAQyoD,EAAW6P,GAE5D,KAAKjxB,EAAA7kD,YAAY6Q,OACf,OAAKje,KAAKyzE,cAAsB7oD,GAC5BA,EAAO9L,MAAMrV,EAAApH,YAAYma,MAAQ/S,EAAApH,YAAYid,WAC/Ctf,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACf1H,EAAgBxrE,MAChBib,EAAOjc,cAET3O,KAAK2vE,YAAcuT,EAAet4D,EAAQ5O,KAAOrS,EAAA2H,KAAKG,KAC/C9R,EAAO47C,eAETv7C,KAAK41E,qBAA6BhrD,EAAQyoD,EAAW6P,GAVZvjF,EAAO47C,cAYzD,KAAK0W,EAAA7kD,YAAYuO,MACf,IAAI+4D,EAA0B9pD,EAAQ8pD,gBACtC,OACU9pD,EAAQvO,GAAG5S,EAAApH,YAAYid,WAE7BmI,EAAKg9C,eAAepoD,GAAG5S,EAAApH,YAAYyd,cACnC40D,EASG10E,KAAKojF,oBAA2Bx4D,EACrCyoD,EAEArzE,KAAK20E,kBAAkB9pE,OAAO+3E,GAAiB5iF,KAAKoR,QAAQI,WAC5D0xE,IAVAljF,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACf1H,EAAgBxrE,MAAeib,EAAQjc,cAElChP,EAAO47C,eASlB,KAAK0W,EAAA7kD,YAAYkO,mBACXtb,KAAKkwE,oBAAoBh/D,IAAImiE,KAAYA,EAAYrzE,KAAKqjF,gBAAgBhQ,EAAW5rD,IACzF,IAAIjM,EAAsCoP,EAAQpP,gBAClD,IAAKA,EAKH,OAJAxb,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACf1H,EAAgBxrE,MAAOib,EAAOjc,cAEzBhP,EAAO47C,cAGhB,KADItyB,EAAiBjpB,KAAK4O,SAASoM,gBAAgBQ,EAAiB,KAAM3R,EAAAg4D,UAAW/3D,EAAA22D,WAAWO,SAC3E,OAAOrhE,EAAO47C,cAEnC,IAAK2nC,EAAK,OAAOljF,KAAK+gF,eAAe93D,EAAgB,CAAEoqD,GAAa8H,GAEpE,IAAI5/D,EAAkB1Q,OAA2B+f,EAAQrP,iBAEzD,KADIyN,EAAiBhpB,KAAK4O,SAASoM,gBAAgBO,EAAiB,KAAM1R,EAAAg4D,UAAW/3D,EAAA22D,WAAWO,SAC3E,OAAOrhE,EAAO47C,cACnC,IACI+nC,GADAtyD,EAAahI,EAAerY,UAAUqgB,YACR8iC,eAClC,OAAOn0D,EAAOm6C,MAAM,KAAM,CACxB95C,KAAK+gF,eAAe93D,EAAgB,CAAEoqD,GAAa8H,GACnDn7E,KAAK+gF,eAAe/3D,EAAgB,KAAMmyD,IACzCmI,GAEL,KAAKrxB,EAAA7kD,YAAYqO,SAEf,IAAIwN,EACJ,GAFIjpB,KAAKkwE,oBAAoBh/D,IAAImiE,KAAYA,EAAYrzE,KAAKqjF,gBAAgBhQ,EAAW5rD,MACrFwB,EAA4B2B,EAAQ3B,gBAMtC,OAJAjpB,KAAKqV,MACH3L,EAAA4L,eAAeutE,oEACf1H,EAAgBxrE,MAAOib,EAAOjc,cAEzBhP,EAAO47C,cAGhB,IAAK2nC,EAAK,CACR,IAAIK,EAAWvjF,KAAK20E,kBAAkB9pE,OAAO+3E,GAAiB5iF,KAAKoR,QAAQI,WAC3E,OAAOxR,KAAK+gF,eAAe93D,EAAgB,CAAEs6D,EAAUlQ,GAAa8H,GAKlEmI,GADAtyD,GADAhI,EAAiBne,OAAkB+f,EAAQ5B,iBACfrY,UAAUqgB,YACR8iC,eAFlC,IAAI9qC,EAGAw6D,EAAWxjF,KAAK20E,kBAAkB9pE,OAAO+3E,GAAiB5iF,KAAKoR,QAAQI,WAEvEgqE,EADY/zD,EAAK2hD,oBAAoBp4C,GACV/L,MAC/B,OAAOtlB,EAAOm6C,MAAM,KAAM,CACxB95C,KAAK+gF,eAAe93D,EAAgB,CAClCtpB,EAAOm4C,UAAU0jC,EAAgBgI,GACjCnQ,GACC8H,GACHn7E,KAAK+gF,eAAe/3D,EAAgB,CAClCrpB,EAAOi4C,UAAU4jC,EAAgB8H,IAChCnI,IACFmI,GAEL,KAAKrxB,EAAA7kD,YAAYwO,MAEf,GADI5b,KAAKkwE,oBAAoBh/D,IAAImiE,KAAYA,EAAYrzE,KAAKqjF,gBAAgBhQ,EAAW5rD,IACrFw7D,EAAiB,CACnB,IAAIH,EAAcr7D,EAAKpL,GAAE,OACrBgnD,EAAqBz4C,EAAQF,eAAeunC,EAAAzoD,aAAa2B,YAAa23E,GAC1E,IAAKzf,EAKH,OAJArjE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACf6Y,EAAgBxrE,MAAOib,EAAOjc,cAEzBhP,EAAO47C,cAEhB,IAAIwnC,EAAqBn4D,EAAQF,eAAeunC,EAAAzoD,aAAa4B,YAAa03E,GAC1E,IAAKC,EAMH,OALA/iF,KAAKqV,MACH3L,EAAA4L,eAAe0tE,+CACf7H,EAAgBxrE,MAAOib,EAAOjc,cAEhC3O,KAAK2vE,YAAcuT,EAAM7f,EAAW1yD,UAAUqgB,WAAarnB,EAAA2H,KAAKG,KACzD9R,EAAO47C,cAEhB,IAAI2X,EAAqBtoC,EAAQ5O,KAE7BynE,GADAD,EAAWxjF,KAAK20E,kBAAkB9pE,OAAO+3E,GAAiB5iF,KAAKoR,QAAQI,WACzDxR,KAAK20E,kBAAkBsO,EAAiBt5E,EAAA2H,KAAKlO,IAAG,IAClE,GAAI8/E,EAAK,CACP,IAAIQ,EAAkBj8D,EAAKihD,aAAaxV,GACpCywB,EAAmBl8D,EAAK2hD,oBAAoBppE,KAAK2vE,aACjD3+C,EAAaqyC,EAAW1yD,UAAUqgB,WAEtC,OADAvJ,EAAK0hD,cAAcua,GACZ/jF,EAAOm6C,MAAM,KAAM,CACxB95C,KAAK+gF,eAAegC,EAAY,CAC9BpjF,EAAOm4C,UAAU4rC,EAAgBz+D,MAAOu+D,GACxC7jF,EAAOm4C,UAAU6rC,EAAiB1+D,MAAOw+D,GACzCpQ,GACC8H,GACHn7E,KAAK+gF,eAAe1d,EAAY,CAC9B1jE,EAAOi4C,UAAU8rC,EAAgBz+D,MAAOy+D,EAAgB1nE,KAAK83C,gBAC7Dn0D,EAAOi4C,UAAU+rC,EAAiB1+D,MAAO0+D,EAAiB3nE,KAAK83C,iBAC9DqnB,IACFnqD,EAAW8iC,gBAEd,OAAO9zD,KAAK+gF,eAAegC,EAAY,CACrCS,EACAC,EACApQ,GACC8H,IAUX,OAJAn7E,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf68D,EAAgBxrE,OAEXhQ,EAAO47C,eAIRi0B,EAAAvtE,UAAAkhF,oBAAR,SAEEh8D,EAEAksD,EAEA6P,GAEA,IAAIlnE,EAAOmL,EAAMnL,KACjBnR,OAAOmR,GAAQrS,EAAA2H,KAAKG,MACpB,IAAIgW,EAAOznB,KAAK+wE,YACZ7pD,EAAaC,EAAMlC,MAQvB,GANIjJ,EAAKK,GAAE,OACLoL,EAAKwjD,UAAUoI,EAAWr3D,GAAOyL,EAAKwhD,aAAa/hD,EAAYnd,EAAA29D,WAAW9C,SACzEn9C,EAAKohD,eAAe3hD,EAAYnd,EAAA29D,WAAW9C,UAElDn9C,EAAKwhD,aAAa/hD,EAAYnd,EAAA29D,WAAW8C,WAErCxuD,EAAKi3D,UAAW,CAClB,IAAItzE,EAASK,KAAKL,OACdwzE,EAAan3D,EAAK83C,eAEtB,OAAIrsC,EAAKsiD,eAAe7iD,EAAYnd,EAAA29D,WAAW2T,cACzCr7E,KAAKkwE,oBAAoBh/D,IAAImiE,IAC/BA,EAAYrzE,KAAK4jF,mBACfjkF,EAAOi4C,UAAU1wB,EAAYisD,GAC7BE,GAEE6P,GACFljF,KAAK2vE,YAAc3zD,EACZrc,EAAOm4C,UAAU5wB,EAAYmsD,KAEpCrzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAO+5C,UAAUxyB,EAAYmsD,MAGtCA,EAAYrzE,KAAKszE,kBACf3zE,EAAOi4C,UAAU1wB,EAAYisD,GAC7BE,GAEE6P,GACFljF,KAAK2vE,YAAc3zD,EACZrc,EAAOm4C,UAAU5wB,EAAYmsD,KAEpCrzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAO+5C,UAAUxyB,EAAYmsD,MAIxC5rD,EAAKohD,eAAe3hD,EAAYnd,EAAA29D,WAAW2C,wBAC3C5iD,EAAKwhD,aAAa/hD,EAAYnd,EAAA29D,WAAWwB,UACpClpE,KAAKkwE,oBAAoBh/D,IAAImiE,KAAYA,EAAYrzE,KAAKkzE,WAAWG,IACtE6P,GACFljF,KAAK2vE,YAAc3zD,EACZrc,EAAOm4C,UAAU5wB,EAAYmsD,KAEpCrzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAO+5C,UAAUxyB,EAAYmsD,KAQxC,OAJIr3D,EAAKK,GAAG,MACLoL,EAAKikD,YAAY2H,EAAWr3D,GAC5ByL,EAAKohD,eAAe3hD,EAAYnd,EAAA29D,WAAWiE,SADRlkD,EAAKwhD,aAAa/hD,EAAYnd,EAAA29D,WAAWiE,UAG/EuX,GACFljF,KAAK2vE,YAAc3zD,EACZhc,KAAKL,OAAOm4C,UAAU5wB,EAAYmsD,KAEzCrzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjBzR,KAAKL,OAAO+5C,UAAUxyB,EAAYmsD,KAMvC7D,EAAAvtE,UAAA2zE,qBAAR,SAEEt5D,EAEA+2D,EAEA6P,GAEA,IAAIvjF,EAASK,KAAKL,OACdqc,EAAOM,EAAON,KAClBnR,OAAOmR,GAAQrS,EAAA2H,KAAKG,MACpB,IAAI0hE,EAAan3D,EAAK83C,eAEtB,OAAI93C,EAAKi3D,UACHjzE,KAAKkwE,oBAAoBh/D,IAAImiE,GAC3B6P,GACFljF,KAAK2vE,YAAc3zD,EACZrc,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOi6C,WAAWt9B,EAAO3N,aACvB3O,KAAK4jF,mBACHjkF,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,GACvCE,IAGJ1zE,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,IACtCA,KAEHnzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOi6C,WAAWt9B,EAAO3N,aAC9B3O,KAAK4jF,mBACHjkF,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,GACvCE,KAKF6P,GACFljF,KAAK2vE,YAAc3zD,EACZrc,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOi6C,WAAWt9B,EAAO3N,aACvB3O,KAAKszE,kBACH3zE,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,GACvCE,IAGJ1zE,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,IACtCA,KAEHnzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOi6C,WAAWt9B,EAAO3N,aAC9B3O,KAAKszE,kBACH3zE,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,GACvCE,MAMRA,EAAYrzE,KAAKy9E,uBAAuBpK,EAAWr3D,GAC/CknE,GACFljF,KAAK2vE,YAAc3zD,EACZrc,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOi6C,WAAWt9B,EAAO3N,aAAc0kE,GACvC1zE,EAAOq4C,WAAW17B,EAAO3N,aAAcwkE,IACtCA,KAEHnzE,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOi6C,WAAWt9B,EAAO3N,aAC9B0kE,MAOR7D,EAAAvtE,UAAAmhF,oBAAA,SAEEl4D,EAEAmoD,EAEAmQ,EAEAN,GAEA,IAAIvjF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACZ/J,EAAY97C,EAAMlP,KAClB6nE,EAAkB7c,EAAUlT,eAChCjpD,OAAOqgB,EAAMta,OAAOwC,MAAQ6+C,EAAA7kD,YAAYwO,OACxC,IAAIwL,EAAmB8D,EAAMta,OAAQoL,KACjC8nE,EAAiB18D,EAAS0sC,eAE9B,GAAIkT,EAAUiM,WAAa7rD,EAAS6rD,UAAW,CAC7C,IAAI8Q,EAAWt8D,EAAKihD,aAAathD,GACjC,GAAIpnB,KAAKkwE,oBAAoBh/D,IAAImiE,GAAY,CAC3C,GAAI6P,EAAK,CACP,IAAIc,EAAYv8D,EAAK2hD,oBAAoBpC,GAKzC,OAJKv/C,EAAKikD,YAAY2H,EAAWrM,IAAYv/C,EAAKwhD,aAAa+a,EAAU/+D,MAAOlb,EAAA29D,WAAWiE,SACvFlkD,EAAKwjD,UAAUoI,EAAWrM,IAAYv/C,EAAKwhD,aAAa+a,EAAU/+D,MAAOlb,EAAA29D,WAAW9C,SACxFn9C,EAAK0hD,cAAc4a,GACnB/jF,KAAK2vE,YAAc3I,EACZrnE,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOs3C,MAAM+vB,EAAUzU,SACrB5yD,EAAOm4C,UAAUisC,EAAS9+D,MAAOu+D,GACjCxjF,KAAK4jF,mBACHjkF,EAAOu4C,KAAK8uB,EAAUzU,SAAUyU,EAAU3qD,GAAE,GAC1C1c,EAAOi4C,UAAUmsC,EAAS9+D,MAAO6+D,GACjCD,EAAiB34D,EAAMrC,cAEzBlpB,EAAOm4C,UAAUksC,EAAU/+D,MAAOouD,IAEpCwQ,EAAiB34D,EAAMrC,cAEzBlpB,EAAOi4C,UAAUosC,EAAU/+D,MAAO4+D,IACjCA,GAIH,OAFAp8D,EAAK0hD,cAAc4a,GACnB/jF,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOs3C,MAAM+vB,EAAUzU,SAC5B5yD,EAAOm4C,UAAUisC,EAAS9+D,MAAOu+D,GACjCxjF,KAAK4jF,mBACHjkF,EAAOu4C,KAAK8uB,EAAUzU,SAAUyU,EAAU3qD,GAAE,GAC1C1c,EAAOi4C,UAAUmsC,EAAS9+D,MAAO6+D,GACjCD,EAAiB34D,EAAMrC,cAEzBwqD,GAEFwQ,EAAiB34D,EAAMrC,cAI3B,GAAIq6D,EAAK,CACHc,EAAYv8D,EAAK2hD,oBAAoBpC,GAKzC,OAJKv/C,EAAKikD,YAAY2H,EAAWrM,IAAYv/C,EAAKwhD,aAAa+a,EAAU/+D,MAAOlb,EAAA29D,WAAWiE,SACvFlkD,EAAKwjD,UAAUoI,EAAWrM,IAAYv/C,EAAKwhD,aAAa+a,EAAU/+D,MAAOlb,EAAA29D,WAAW9C,SACxFn9C,EAAK0hD,cAAc4a,GACnB/jF,KAAK2vE,YAAc3I,EACZrnE,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOs3C,MAAM+vB,EAAUzU,SACrB5yD,EAAOm4C,UAAUisC,EAAS9+D,MAAOu+D,GACjCxjF,KAAKszE,kBACH3zE,EAAOu4C,KAAK8uB,EAAUzU,SAAUyU,EAAU3qD,GAAE,GAC1C1c,EAAOi4C,UAAUmsC,EAAS9+D,MAAO6+D,GACjCD,EAAiB34D,EAAMrC,cAEzBlpB,EAAOm4C,UAAUksC,EAAU/+D,MAAOouD,IAEpCwQ,EAAiB34D,EAAMrC,cAEzBlpB,EAAOi4C,UAAUosC,EAAU/+D,MAAO4+D,IACjCA,GAIH,OAFAp8D,EAAK0hD,cAAc4a,GACnB/jF,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOs3C,MAAM+vB,EAAUzU,SAC5B5yD,EAAOm4C,UAAUisC,EAAS9+D,MAAOu+D,GACjCxjF,KAAKszE,kBACH3zE,EAAOu4C,KAAK8uB,EAAUzU,SAAUyU,EAAU3qD,GAAE,GAC1C1c,EAAOi4C,UAAUmsC,EAAS9+D,MAAO6+D,GACjCD,EAAiB34D,EAAMrC,cAEzBwqD,GAEFwQ,EAAiB34D,EAAMrC,cAK7B,GAAIq6D,EAAK,CACHc,EAAYv8D,EAAK2hD,oBAAoBpC,GAIzC,OAHKv/C,EAAKikD,YAAY2H,EAAWrM,IAAYv/C,EAAKwhD,aAAa+a,EAAU/+D,MAAOlb,EAAA29D,WAAWiE,SACvFlkD,EAAKwjD,UAAUoI,EAAWrM,IAAYv/C,EAAKwhD,aAAa+a,EAAU/+D,MAAOlb,EAAA29D,WAAW9C,SACxF5kE,KAAK2vE,YAAc3I,EACZrnE,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOs3C,MAAM+vB,EAAUzU,SACrBixB,EACA7jF,EAAOm4C,UAAUksC,EAAU/+D,MAAOouD,GAClCwQ,EAAiB34D,EAAMrC,cAEzBlpB,EAAOi4C,UAAUosC,EAAU/+D,MAAO4+D,IACjCA,GAGH,OADA7jF,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOs3C,MAAM+vB,EAAUzU,SAC5BixB,EACAnQ,EACAwQ,EAAiB34D,EAAMrC,eAO/B2mD,EAAAvtE,UAAA06E,sBAAA,SAEE/pD,EAEAqwC,EAEAmY,GAGA,IAAIz7E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YAGhB,GAAIn+C,EAAWA,WAAWxf,MAAQxJ,EAAAyJ,SAASmd,MAAO,CAChD,IAAIyzD,EAAOjkF,KAAK+wE,YACZtM,EAAiBwf,EAAKxf,eAC1B,IAAKA,EAAepoD,GAAG5S,EAAApH,YAAYyd,aAKjC,OAJA9f,KAAKqV,MACH3L,EAAA4L,eAAe4uE,8FACftxD,EAAWjjB,OAENhQ,EAAO47C,cAGhB,IAAInsC,EAAgBvE,OAAO45D,EAAe7zD,QAAS/F,OAAOuE,EAAcgE,MAAQ6+C,EAAA7kD,YAAYwO,OAC5F,IAAIuoE,EAAoBt5E,OAAeuE,EAAeqa,MAClDs7C,EAAYl6D,OAAOo5E,EAAKjf,YAAYv7D,EAAAzG,cAAcoC,QAClDguE,EAAiBpzE,KAAKoR,QAAQgiE,eAO9BgR,EAAUpkF,KAAKqkF,kBACjBrkF,KAAKskF,kBAAkBH,EAAmBvxD,GAC1CA,EAAW1S,UACX0S,EACAjzB,EAAO46C,GACL56C,EAAOi4C,UAAUmtB,EAAU9/C,MAAOmuD,GAClCzzE,EAAOi4C,UAAUmtB,EAAU9/C,MAAOmuD,GAClCpzE,KAAKkzE,WACHlzE,KAAKw2E,eAAsBpnE,KAE9B,IAGHvE,OAAO7K,KAAKkwE,oBAAoBh/D,IAAIkzE,IACpC,IAAIpO,EAAyB,CAC3Br2E,EAAO+5C,UAAUqrB,EAAU9/C,MAAOm/D,IAKpC,OAHApkF,KAAKy2E,wBAA+BrnE,EAAe4mE,GAG/CiO,EAAKnlE,MACP,QAGA9e,KAAKqV,MACH3L,EAAA4L,eAAeivE,kFACf3xD,EAAWjjB,OAENhQ,EAAO47C,gBAEhB0oC,EAAKv1E,IAAI,KACT1O,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACjB9R,EAAOm6C,MAAM,KAAMk8B,IAI5B,IAGIrlE,EACA6zE,EAJA55D,EAAS5qB,KAAK4O,SAASu0D,kBAAkBvwC,EAAWA,WAAYnL,GACpE,IAAKmD,EAAQ,OAAOjrB,EAAO47C,cAI3B,OAAQ3wB,EAAOxX,MAGb,KAAK6+C,EAAA7kD,YAAY2N,mBACf,IAAI9Y,EAA+B2oB,EAC/BpB,EAAgBoJ,EAAWpJ,cAG/B,GAAIvnB,EAAUkW,aAAa85C,EAAA5kD,eAAeyE,SACxC,OAAO9R,KAAKykF,6BAA6BxiF,EAAW2wB,EAAYqwC,GAGlE,IAAIr9C,EAA4B,KAGhC,GAAI4D,EAAe,CACjB,IAAKvnB,EAAUoa,GAAG5S,EAAApH,YAAYwP,SAK5B,OAJA7R,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf9uC,EAAWA,WAAWjjB,MAAO1N,EAAU0M,cAElChP,EAAO47C,cAEhB31B,EAAW5lB,KAAK4O,SAAS02D,iCACvBrjE,EACAunB,EACA/B,EAAKg9C,eAAe7zD,OACpB/G,EAAAg4D,QAAqBp6C,EAAK3B,yBAC1B8M,OAIG,IAAI3wB,EAAUoa,GAAG5S,EAAApH,YAAYwP,SAAU,CAI5C,IAHA,IAAI6yE,EAAgB,IAAIt9E,IACpBkjB,EAAqBzf,OAAO5I,EAAUqoB,oBACtCg8C,EAAoBh8C,EAAmBxf,OAClCzK,EAAI,EAAGA,EAAIimE,IAAqBjmE,EACvCqkF,EAAch2E,IAAI4b,EAAmBjqB,GAAGO,KAAK+U,KAAM,MAGrD,IAAIsrD,EAAiBh/D,EAAU+jE,iBAAiBj1C,WAC5CikC,EAAgBiM,EAAen2D,OAC/B65E,EAAgB/xD,EAAW1S,UAC3Bgd,EAAeynD,EAAc75E,OAC7B85E,EAAgB,IAAI39E,MAAqBi2B,GAC7C,IAAS78B,EAAI,EAAGA,EAAI20D,IAAiB30D,EAAG,CACtC,IAAIkhE,EAAWN,EAAe5gE,GAAG2b,KAC7B6oE,EAAetjB,EAASnuD,MAAQxJ,EAAAyJ,SAAS0oB,WAA8BwlC,EAAU3gE,KAAKgU,KAEtF,KADgB2sD,EAAU3gE,KAAKoP,WAAW2F,KAE1CmvE,EAAqBzkF,EAAI68B,EACzBynD,EAActkF,GACd4gE,EAAe5gE,GAAGokB,YACtB,IAAKqgE,EAKH,OAJA9kF,KAAKqV,MACH3L,EAAA4L,eAAeuL,+BACf+R,EAAWjjB,MAAOqlD,EAAcl3C,SAAS,IAAKof,EAAapf,SAAS,KAE/Dne,EAAO47C,cAEhB,GAAqB,OAAjBspC,GAAyBH,EAAcxzE,IAAI2zE,GAAe,CAE5D,GADIE,EAAeL,EAAcxjF,IAAI2jF,GACnB,CAChBD,EAAcvkF,GAAKL,KAAK20E,kBAAkBmQ,EAAoBC,GAC9D,IAAIpF,OAAU,EACd,KAAMA,EAAah2E,EAAA2H,KAAKsiD,kBAAkBmxB,EAAc/kF,KAAK2vE,aAAa,OAClEgQ,EAAah2E,EAAA2H,KAAKsiD,kBAAkBmxB,EAAc/kF,KAAK2vE,aAAa,IAKxE,OAJA3vE,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACf3T,EAAe5gE,GAAG2b,KAAKrM,MAAO3P,KAAK2vE,YAAY7xD,WAAYinE,EAAajnE,YAEnEne,EAAO47C,cAGlBwpC,EAAepF,OAEfiF,EAAcvkF,GAAKL,KAAK20E,kBAAkBmQ,EAAoBn7E,EAAA2H,KAAKyhD,MACnEgyB,EAAe/kF,KAAK2vE,YAGtB+U,EAAch2E,IAAIm2E,EAAcE,OAC3B,CACL,IAAIC,EAAehlF,KAAK4O,SAASiyD,YAC/BI,EAAe5gE,GAAG2b,KAClByL,EAAKg9C,eACLh9C,EAAK3B,yBAEP,IAAKk/D,EAAc,OAAOrlF,EAAO47C,cACjCqpC,EAAcvkF,GAAKL,KAAK20E,kBAAkBmQ,EAAoBE,EAAY,IAG9E,IAAI3e,EAAwB,IAAIp/D,MAAYq/D,GAC5C,IAASjmE,EAAI,EAAGA,EAAIimE,IAAqBjmE,EAAG,CAC1C,IAAI0kF,EAAel6E,OAAO65E,EAAcxjF,IAAIopB,EAAmBjqB,GAAGO,KAAK+U,OACvE0wD,EAAsBhmE,GAAK0kF,EAO7B,OALAn/D,EAAW5lB,KAAK4O,SAASoM,gBACvB/Y,EACAokE,EACAx8D,EAAAg4D,QAAqBp6C,EAAK3B,2BAGrB9lB,KAAK+gF,eAAen7D,EAAUg/D,EAAehyD,EAAYqwC,GAAkBt5D,EAAA2H,KAAKG,MADjEzR,KAAKL,OAAO47C,cAQlC31B,EAAW5lB,KAAK4O,SAASoM,gBAAgB/Y,EAAW,MAEtD,IAAK2jB,EAAU,OAAO5lB,KAAKL,OAAO47C,cAGlC,IAAIioC,EAA0B,EAK9B,OAJI59D,EAASvJ,GAAG5S,EAAApH,YAAY+f,YAC1BohE,EAAWxjF,KAAK20E,kBAAkB9pE,OAAO7K,KAAK4O,SAAS+xD,uBAAwB3gE,KAAKoR,QAAQI,YAGvFxR,KAAKqkF,kBACVz+D,EACAgN,EAAW1S,UACX0S,EACA4wD,EACApI,GAKJ,KAAKnpB,EAAA7kD,YAAY8X,MACf,GAAIvU,EAAoBia,EAAQ5O,KAAKy2C,mBAAoB,CAErD+xB,EADU55D,EAAQvO,GAAG5S,EAAApH,YAAYsiB,SACtBhlB,EAAOyD,IAAI28C,QAAgBn1B,EAAQlG,uBAEnC/kB,EAAOi4C,UAAkBhtB,EAAQ3F,MAAOitC,EAAAjyB,WAAW75B,KAEhE,MAMA,OAJApG,KAAKqV,MACH3L,EAAA4L,eAAeiwD,uGACf3yC,EAAWjjB,MAAeib,EAAQ5O,KAAK8B,YAElCne,EAAO47C,cAGlB,KAAK0W,EAAA7kD,YAAY6Q,OACf,GAAItN,EAAqBia,EAAQ5O,KAAKy2C,mBAAoB,CACxD+xB,EAAW7kF,EAAOq4C,WAAoBptB,EAAQjc,aAAuBic,EAAQ5O,KAAK83C,gBAClF,MAMA,OAJA9zD,KAAKqV,MACH3L,EAAA4L,eAAeiwD,uGACf3yC,EAAWjjB,MAAgBib,EAAQ5O,KAAK8B,YAEnCne,EAAO47C,cAGlB,KAAK0W,EAAA7kD,YAAYuO,MACf,IAAIK,EAAe4O,EAAQ5O,KAC3B,GAAIrL,EAAYqL,EAAKy2C,mBAAoB,CACvC,IAAImwB,EAAiB/3E,OAAO7K,KAAK4O,SAAS+xD,uBACtC6iB,EAAWxjF,KAAK20E,kBAAkBiO,EAAgB5iF,KAAKoR,QAAQI,WACnEgzE,EAAW7kF,EAAOu4C,KAChB,GACA,EACAsrC,EACAtxB,EAAAjyB,WAAW75B,IACHwkB,EAAQ/B,cAElB,MAMA,OAJA7oB,KAAKqV,MACH3L,EAAA4L,eAAeiwD,uGACf3yC,EAAWjjB,MAAOqM,EAAK8B,YAElBne,EAAO47C,cAGlB,KAAK0W,EAAA7kD,YAAYob,gBACf7X,EAA6Bia,EAAQja,UACrC6zE,EAAWxkF,KAAK20E,kBAAkB/hD,EAAWA,WAA6BhI,EAAQ5O,KAAI,GACtF,MAGF,KAAKi2C,EAAA7kD,YAAYkO,mBACf,IAAIC,EAAkB1Q,OAA2B+f,EAAQrP,iBAEzD,KADIyN,EAAiBhpB,KAAK4O,SAASoM,gBAAgBO,EAAiB,OAC/C,OAAO5b,EAAO47C,cAGnC,GAFAipC,EAAWxkF,KAAKqkF,kBAAkBr7D,EAAgB,GAAI4J,EAAWA,cACjEjiB,EAAY3Q,KAAK2vE,YAAYld,oBAM3B,OAJAzyD,KAAKqV,MACH3L,EAAA4L,eAAeiwD,uGACf3yC,EAAWjjB,MAAO3P,KAAK2vE,YAAY7xD,YAE9Bne,EAAO47C,cAEhB,MAEF,KAAK0W,EAAA7kD,YAAYqO,SACf,IAAIuN,EAAiBne,OAAkB+f,EAAQ5B,gBAK/C,GAJAw7D,EAAWxkF,KAAKqkF,kBAAkBr7D,EAAgB,GAAI4J,EAAWA,WAC/D5yB,KAAK20E,kBAAkB9pE,OAAO7K,KAAK4O,SAAS+xD,uBAAwB3gE,KAAKoR,QAAQI,cAEnFb,EAAY3Q,KAAK2vE,YAAYld,oBAM3B,OAJAzyD,KAAKqV,MACH3L,EAAA4L,eAAeiwD,uGACf3yC,EAAWjjB,MAAO3P,KAAK2vE,YAAY7xD,YAE9Bne,EAAO47C,cAEhB,MAIF,QAKE,OAJAv7C,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAGlB,OAAOv7C,KAAKilF,oBACVt0E,EACA6zE,EACA5xD,EAAW1S,UACX0S,EACA,EACAqwC,GAAkBt5D,EAAA2H,KAAKG,OAInB+9D,EAAAvtE,UAAAwiF,6BAAR,SACExiF,EACA2wB,EACAqwC,GAEA,IAAIz5C,EAA+B,KAI/Bc,EAAqBroB,EAAUqoB,mBAC/Bk3C,EAAoB5uC,EAAWpJ,cAC/BoJ,EAAWpJ,gBACRvnB,EAAUoa,GAAG5S,EAAApH,YAAYwP,UAC5B7R,KAAKqV,MACH3L,EAAA4L,eAAeosD,sBACf9uC,EAAWjjB,MAAO1N,EAAU0M,cAGhC6a,EAAgBxpB,KAAK4O,SAASszD,qBAC5Br3D,OAAOyf,GACPk3C,EACAxhE,KAAK+wE,YAAYtM,eAAe7zD,OAChC/G,EAAAg4D,QAAqB7hE,KAAK+wE,YAAYjrD,yBACtC8M,IAKJ,IAAIT,EAAOuuC,EAAAwkB,YACTllF,KACAiC,EACAunB,EACAoJ,EAAW1S,UACX+iD,EACArwC,GAEF,OAAKT,IACHnyB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,gBASvBi0B,EAAAvtE,UAAAkjF,mBAAA,SACEx0E,EACAusB,EACAkoD,EACAhf,GAKA,GAAIgf,IAAwB,MADbz0E,EAAUyW,UAMvB,OAJApnB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,QAEN,EAIT,IAAI8kD,EAAU9jD,EAAU8jD,QACxB,GAAIA,EAKF,OAJAz0D,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,QAEN,EAGT,IAAI01E,EAAU10E,EAAU6jD,mBACpB/U,EAAU9uC,EAAU0W,eAAevc,OAGvC,OAAIoyB,EAAemoD,GACjBrlF,KAAKqV,MACHgwE,EAAU5lC,EACN/1C,EAAA4L,eAAegwE,wCACf57E,EAAA4L,eAAeuL,+BACnBulD,EAAWz2D,MAAO01E,EAAQvnE,WAAYof,EAAapf,aAE9C,KAILof,EAAeuiB,IAAYgV,KAC7Bz0D,KAAKqV,MACH3L,EAAA4L,eAAeuL,+BACfulD,EAAWz2D,MAAO8vC,EAAQ3hC,WAAYof,EAAapf,aAE9C,IAOX0xD,EAAAvtE,UAAAoiF,kBAAA,SACEz+D,EACA2/D,EACAnf,EACAof,EACApK,QADA,IAAAoK,MAAA,QACA,IAAApK,MAAA,GAEA,IAAIl+C,EAAeqoD,EAAoBz6E,OACnC6F,EAAYiV,EAASjV,UACzB,IAAK3Q,KAAKmlF,mBACRx0E,EACAusB,EACW,GAAXsoD,EACApf,GAGA,OADApmE,KAAK2vE,YAAch/D,EAAUqgB,WACtBhxB,KAAKL,OAAO47C,cAIrB,GAAI31B,EAASzN,aAAa85C,EAAA5kD,eAAekS,QAAS,CAEhD,GADA1U,QAAQ+a,EAASvJ,GAAG5S,EAAApH,YAAYm2E,cAC5Bx4E,KAAKyvE,uBAAuB7rD,SAASgC,GAKlC,CACL5lB,KAAKyvE,uBAAuBlxD,KAAKqH,GACjC,IAAI6/D,EAAiB90E,EAAU0W,eAC/Bxc,OAAOqyB,GAAgBuoD,EAAe36E,QAGtC,IADA,IAAI6mB,EAAO,IAAI1qB,MAAqBi2B,GAC3B78B,EAAI,EAAGA,EAAI68B,IAAgB78B,EAClCsxB,EAAKtxB,GAAKL,KAAK20E,kBAAkB4Q,EAAoBllF,GAAIolF,EAAeplF,GACtE,IAIJ,IAAI8xB,EAAOnyB,KAAK0lF,eAAe9/D,EAAU+L,EAAM6zD,EAAkD,IAA7B,EAAXpK,IASzD,OARIp7E,KAAK2vE,YAAYsD,YACF,GAAXmI,EAGJp7E,KAAKkwE,oBAAoBx+D,IAAIygB,GAF7BA,EAAOnyB,KAAKqjF,gBAAgBlxD,EAAMnyB,KAAK+wE,cAK3C/wE,KAAKyvE,uBAAuB3G,MACrB32C,EAzBPnyB,KAAKqe,QACH3U,EAAA4L,eAAeqwE,yCACfvf,EAAWz2D,MAAOiW,EAASjX,cA4BjC,IAAIi3E,EAAuBJ,EAAUtoD,EAAe,EAAIA,EACpDua,EAAW,IAAIxwC,MAAqB2+E,GACpC3gE,EAAQ,EACRugE,IACF/tC,EAAS,GAAK+tC,EACdvgE,EAAQ,GAEV,IAAIoC,EAAiB1W,EAAU0W,eAC/B,IAAShnB,EAAI,EAAGA,EAAI68B,IAAgB78B,IAAK4kB,EACvCwyB,EAASxyB,GAASjlB,KAAK20E,kBAAkB4Q,EAAoBllF,GAAIgnB,EAAehnB,GAAE,GAKpF,GADAwK,OAAOoa,GAAS2gE,GACZj1E,EAAUqgB,WAAWiiD,UAAW,CAClC,GAAe,EAAXmI,EAEF,OAAOp7E,KAAK+gF,eAAen7D,EAAU6xB,EAAU2uB,GAAY,GACtD,GAAe,GAAXgV,EAAuC,CAE5CjpD,EAAOnyB,KAAK+gF,eAAen7D,EAAU6xB,EAAU2uB,GAAY,GAAO,GAEtE,OADApmE,KAAKkwE,oBAAoBx+D,IAAIygB,GACtBA,EAEP,OAAOnyB,KAAK+gF,eAAen7D,EAAU6xB,EAAU2uB,GAAY,GAAO,GAGtE,OAAOpmE,KAAK+gF,eAAen7D,EAAU6xB,EAAU2uB,EACJ,IAA7B,EAAXgV,KAIL5L,EAAAvtE,UAAAyjF,eAAA,SACE9/D,EACA6xB,EACA+tC,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAeA,IAbA,IAAIlmF,EAASK,KAAKL,OACdu9B,EAAeua,EAAWA,EAAS3sC,OAAS,EAC5C6F,EAAYiV,EAASjV,UACrB0W,EAAiB1W,EAAU0W,eAC3B2tC,EAAgB3tC,EAAevc,OAG/BspE,EAAep0E,KAAK+wE,YACpBtpD,EAAO1d,EAAA2d,KAAK4gD,aAAa8L,EAAanM,eAAgBriD,GACtDP,EAAO,GACPygE,EAAa,IAAI3+E,IAGZ9G,EAAI68B,EAAe,EAAG78B,GAAK,IAAKA,EAAG,CAM1C,IAAI0lF,EAAYtuC,EAAUp3C,GACtB2lF,EAAY3+D,EAAehnB,GAC3B4lF,EAAgBx+D,EAAK6hD,eAAe34D,EAAU6W,iBAAiBnnB,GAAI2lF,EAAWF,GAClF/7E,EAAA6kE,eAAemX,EAAWD,GAErB1R,EAAa1I,YAAYqa,EAAWC,IAAYv+D,EAAKwhD,aAAagd,EAAchhE,MAAOlb,EAAA29D,WAAWiE,SACnGlkD,EAAKwjD,UAAU8a,EAAWC,IAAYv+D,EAAKwhD,aAAagd,EAAchhE,MAAOlb,EAAA29D,WAAW9C,SAExFohB,EAAU/S,YACPjzE,KAAKkwE,oBAAoBh/D,IAAI60E,KAAYA,EAAY/lF,KAAKkzE,WAAW6S,IAC1Et+D,EAAKwhD,aAAagd,EAAchhE,MAAOlb,EAAA29D,WAAWwB,WAEpD7jD,EAAKmsD,QACH7xE,EAAO+5C,UAAUusC,EAAchhE,MAAO8gE,IAG1C,GAAIP,EAAS,CACX,IAAIp2E,EAAgBvE,OAAO+a,EAAShV,QAAS/F,OAAOuE,EAAcgE,MAAQ6+C,EAAA7kD,YAAYwO,OACtF,IAAIwL,EAAWvc,OAAO+a,EAASjV,UAAUyW,UACrC29C,EAAYt9C,EAAK6hD,eAAe7/D,EAAAzG,cAAcoC,MAAOgiB,EAAU0+D,GAEnEzgE,EAAKmsD,QACH7xE,EAAO+5C,UAAUqrB,EAAU9/C,MAAOugE,IAEpC,IAAIU,EAAuB92E,EAAeqa,KACtCy8D,GAAcz+D,EAAK+hD,eAAe//D,EAAAzG,cAAcqC,OAAQ6gF,EAAalqE,KAAM+oD,EAAU9/C,YAEzFpa,QAAQ+a,EAASjV,UAAUyW,UAK7BpnB,KAAK+wE,YAActpD,EACnB,IAASpnB,EAAI68B,EAAc78B,EAAI20D,IAAiB30D,EAAG,CACjD,IAAI8lF,EAAW9+D,EAAehnB,GAC1Bm0E,EAAWx0E,KAAK20E,kBAClB9pE,OAAO+a,EAAS3jB,UAAU+jE,iBAAiBj1C,WAAW1wB,GAAGokB,aACzD0hE,EAAQ,GAGNF,EAAgBx+D,EAAK6hD,eAAe34D,EAAU6W,iBAAiBnnB,GAAI8lF,GAClE1+D,EAAKikD,YAAY8I,EAAU2R,IAAW1+D,EAAKwhD,aAAagd,EAAchhE,MAAOlb,EAAA29D,WAAWiE,SACzFlkD,EAAKwjD,UAAUuJ,EAAU2R,IAAW1+D,EAAKwhD,aAAagd,EAAchhE,MAAOlb,EAAA29D,WAAW9C,SACtFuhB,EAASlT,WACXxrD,EAAKwhD,aAAagd,EAAchhE,MAAOlb,EAAA29D,WAAWwB,UAClD7jD,EAAK9G,KACH5e,EAAO+5C,UAAUusC,EAAchhE,MAC7BjlB,KAAKkzE,WAAWsB,MAIpBnvD,EAAK9G,KACH5e,EAAO+5C,UAAUusC,EAAchhE,MAAOuvD,IAM5Cx0E,KAAK+1E,oBAAoBnwD,EAAUP,GAG9BoC,EAAKpL,GAAE,OACVrc,KAAKq2E,oBAAoB5uD,EAAMpC,GAC/BrlB,KAAKs0E,mBAAmB7sD,EAAMpC,IAEhCoC,EAAKkiD,mBACL,IAAI34C,EAAavJ,EAAKuJ,WACtBhxB,KAAK+wE,YAAcqD,EAGnB,IAAIjiD,EAAOxyB,EAAOm6C,MAAMryB,EAAK4gD,kBAAmBhjD,EAAM2L,EAAW8iC,gBAQjE,OAPA9zD,KAAK2vE,YAAc3+C,EACfA,EAAWiiD,WACT4S,IACF1zD,EAAOnyB,KAAKwiF,YAAYrwD,GACxBnyB,KAAK2vE,YAAchmE,EAAA2H,KAAKG,MAGrB0gB,GAITq9C,EAAAvtE,UAAAwwE,iBAAA,SAAiBnwD,GAQf,IAAI+D,EAAa/D,EAAS+D,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAI+/D,EAAoB9jE,EAAS3R,UAC7B01E,EAAe/jE,EAAS3T,aACxB23E,EAAyBF,EAAkB/+D,eAC3Ck/D,EAAgCjkE,EAASrgB,UAAU+jE,iBAAiBj1C,WACpEC,EAAao1D,EAAkBp1D,WAC/B5J,EAAWg/D,EAAkBh/D,SAC7ByF,EAAavK,EAASjG,GAAG5S,EAAApH,YAAY+f,UAGrCokE,EAAeJ,EAAkB5xB,mBACjCiyB,EAAcD,EACdE,EAAeJ,EAAuBx7E,OACtC67E,EAAcD,EACd75D,MACA45D,IACAE,GAEJ,IAAIC,EAAc/7E,OAAO87E,EAAcF,GAEnCI,EAAoB,IAAI5/E,MAAqBw/E,GAC7CK,EAAe,EAGfnnF,EAASK,KAAKL,OACdktB,IACFg6D,EAAkB,GAAKlnF,EAAOi4C,UAAU,EAAG53C,KAAKoR,QAAQgiE,gBACxD0T,EAAe,GAIjB,IAAK,IAAIzmF,EAAI,EAAGA,EAAImmF,IAAgBnmF,IAAKymF,EACvCD,EAAkBC,GAAgBnnF,EAAOi4C,UAAUkvC,EAAcR,EAAuBjmF,GAAGyzD,gBAE7FjpD,OAAOi8E,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIp9E,EAAA8Z,UAAU6iE,EAAwBt1D,EAAY5J,GAC5E2/D,EAAoBvyB,mBAAqBkyB,EACzCK,EAAoBxyB,eAAiB6xB,EAAkB7xB,gBACvDluC,EAAa,IAAI4rC,EAAAnhD,SACfwR,EAAS1hB,KAAO,cAChB0hB,EAASrgB,UACT8kF,EACAzkE,EAASwD,0BAEApX,IAAI4T,EAAS7S,MAAQhG,EAAApH,YAAYm2E,WAAa/uE,EAAApH,YAAYswE,UACrErwD,EAAS+D,WAAaA,EAItB,IAAI+tD,EAAep0E,KAAK+wE,YACpBtpD,EAAOpB,EAAWoB,KACtBznB,KAAK+wE,YAActpD,EAGnB,IAAIwzB,EAAW2rC,EAAc,EACzB3xD,EAAQ,IAAIhuB,MAAcg0C,GAC1B+rC,EAAM,KAAOJ,EAAY9oE,SAAS,IACtC,IAASzd,EAAI,EAAGA,EAAI46C,IAAY56C,EAAG,CACjC,IAAI22B,EAAQ32B,EAAEyd,SAAS,IAAMkpE,EAC7B/xD,EAAM50B,GAAK22B,EAEb,IAAI3R,EAAO1lB,EAAOm6C,MAAM7kB,EAAM,GAAI,CAChCt1B,EAAOm6C,MAAM,aAAc,CACzBn6C,EAAOo7C,OAAO9lB,EAAO,aAEnBuxD,EACI7mF,EAAO23C,OACL4a,EAAArpB,SAAS03C,OACT5gF,EAAOq4C,WAAW0oB,EAAA2E,eAAe4hB,KAAM/0B,EAAAjyB,WAAW75B,KAClDzG,EAAOyD,IAAIojF,IAEb7mF,EAAOq4C,WAAW0oB,EAAA2E,eAAe4hB,KAAM/0B,EAAAjyB,WAAW75B,QAG1DzG,EAAO47C,gBAET,IAASl7C,EAAI,EAAGA,EAAIumF,IAAevmF,IAAKymF,EAAc,CACpD,IAAI9qE,EAAOsqE,EAAuBE,EAAenmF,GAC7C4Q,EAAcs1E,EAA8BC,EAAenmF,GAC3DokB,EAAcxT,EAAYwT,YAC1B+vD,OAAQ,EACR/vD,EACF+vD,EAAW70E,EAAO+5C,UAAUotC,EAC1B9mF,KAAK20E,kBACHlwD,EACAzI,EAAI,KAKRhc,KAAKqV,MACH3L,EAAA4L,eAAe4xE,4CACfj2E,EAAYtB,OAEd6kE,EAAW70E,EAAO47C,eAEpBl2B,EAAO1lB,EAAOm6C,MAAM7kB,EAAM50B,EAAI,GAAI,CAChCglB,EACAmvD,IAEFqS,EAAkBC,GAAgBnnF,EAAOi4C,UAAUkvC,EAAc9qE,EAAK83C,gBAExEjpD,OAAOi8E,GAAgBH,GAEvB,IAAI3Q,EAAyB,CAAE3wD,GAC3B++D,EAAUzkF,EAAOa,KAAK6lF,EAAcQ,EAAmB71D,EAAW8iC,gBAClE9iC,GAAcrnB,EAAA2H,KAAKG,KACrBzR,KAAKkiF,6BAA6Bz6D,EAAM28D,EAASpzD,EAAYglD,IAE7DA,EAAMz3D,KAAK6lE,GACXpkF,KAAKq2E,oBAAoB5uD,EAAMuuD,IAEjCvuD,EAAKkiD,mBACL3pE,KAAK+wE,YAAcqD,EAEnB,IAAI3C,EAAU9xE,EAAOy9C,YACnB/2B,EAAW1X,aACX3O,KAAK0xE,mBACHqV,EAAoB1/D,eACpB2J,EACA5J,GAEFzd,EAAAuqD,mBAAmB7tC,EAAWJ,kBAC9BtmB,EAAOm6C,MAAM,KAAMk8B,EAAOhlD,EAAW8iC,iBAGvC,OADAztC,EAAWyB,SAASnoB,EAAQ8xE,GACrBprD,GAIDmpD,EAAAvtE,UAAAklF,cAAR,WACE,IAAKnnF,KAAK+vE,QAAS,CACjB,IAAIpwE,EAASK,KAAKL,OAClBK,KAAK+vE,QAAUpwE,EAAOo9C,UACpB2jB,EAAA2E,eAAe4hB,KACf/0B,EAAAjyB,WAAW75B,KACX,EACAzG,EAAOyD,IAAI,IAGf,OAAOs9D,EAAA2E,eAAe4hB,MAIhBzX,EAAAvtE,UAAAywE,cAAR,WACE,IAAK1yE,KAAKgwE,QAAS,CACjB,IAAIrwE,EAASK,KAAKL,OAClBK,KAAKgwE,QAAUrwE,EAAOy9C,YAAYsjB,EAAA2E,eAAe+hB,QAC/CpnF,KAAK0xE,mBAAmB,CAAE/nE,EAAA2H,KAAK7N,KAAOkG,EAAA2H,KAAKG,MAC3C,KACA9R,EAAOi6C,WAAW55C,KAAKmnF,gBACrBxnF,EAAOi4C,UAAU,EAAGsa,EAAAjyB,WAAW75B,OAGnCzG,EAAOk+C,kBAAkB6iB,EAAA2E,eAAe+hB,QAAS,aAEnD,OAAO1mB,EAAA2E,eAAe+hB,SAMxB5X,EAAAvtE,UAAAixE,WAAA,SAAW/gD,GACT,IAAIrY,EAAiB9Z,KAAK4iB,QAAQ9I,eAElC,OADA9Z,KAAK61E,gBAAgB/7D,GACd9Z,KAAKL,OAAOa,KAAKsZ,EAAenL,aAAc,CAAEwjB,GAAQnyB,KAAKoR,QAAQgiE,iBAI9E5D,EAAAvtE,UAAAqxE,kBAAA,SAAkB+T,EAAwBC,GAKxC,IAAI3nF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACZv/D,EAAYxR,KAAKoR,QAAQI,UACzB4hE,EAAiBpzE,KAAKoR,QAAQgiE,eAC9BmU,EAAQ9/D,EAAKihD,aAAal3D,EAAWzH,EAAA6kE,eAAeyY,IACpDG,EAAQ//D,EAAK2hD,oBAAoB53D,GAErC,OADAiW,EAAK0hD,cAAcoe,GACZ5nF,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAO46C,GACL56C,EAAO23C,OAAO87B,GAAkBlhB,EAAAjyB,WAAW55B,IAAM6rD,EAAArpB,SAAS4iC,MAAQvZ,EAAArpB,SAAS2iC,MACzE7rE,EAAOm4C,UAAUyvC,EAAMtiE,MAAOqiE,GAC9B3nF,EAAOm4C,UAAU0vC,EAAMviE,MAAOoiE,IAEhC1nF,EAAOm6C,MAAM,KAAM,CACjBn6C,EAAOw6C,KACLn6C,KAAKkzE,WAAWvzE,EAAOi4C,UAAU2vC,EAAMtiE,MAAOmuD,KAEhDpzE,KAAKwiF,YAAY7iF,EAAOi4C,UAAU4vC,EAAMviE,MAAOmuD,OAGnDzzE,EAAOi4C,UAAU2vC,EAAMtiE,MAAOmuD,IAC7BA,IAIL5D,EAAAvtE,UAAA2hF,mBAAA,SAAmByD,EAAwBC,GAGzC,IAAI3nF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACZv/D,EAAYxR,KAAKoR,QAAQI,UACzB4hE,EAAiBpzE,KAAKoR,QAAQgiE,eAC9BmD,EAAO9uD,EAAK2hD,oBAAoB53D,EAAWzH,EAAA6kE,eAAeyY,IAC9D,OAAO1nF,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAO+5C,UAAU68B,EAAKtxD,MAAOqiE,GAC7BtnF,KAAKwiF,YAAY6E,GACjB1nF,EAAOi4C,UAAU2+B,EAAKtxD,MAAOmuD,IAC5BA,IAIL5D,EAAAvtE,UAAAugF,YAAA,SAAYrwD,GACV,IAAIpY,EAAkB/Z,KAAK4iB,QAAQ7I,gBAEnC,OADA/Z,KAAK61E,gBAAgB97D,GACd/Z,KAAKL,OAAOa,KAAKuZ,EAAgBpL,aAAc,CAAEwjB,GAAQ+/B,EAAAjyB,WAAWsY,OAI7Ei3B,EAAAvtE,UAAAohF,gBAAA,SAAgBlxD,EAAqB1K,GAEnC,YAFmC,IAAAA,MAAaznB,KAAK+wE,aAE9C/wE,KAAKL,OAAOm4C,UAAUrwB,EAAKshD,oBAAoB/oE,KAAKoR,QAAQI,WAAWyT,MAAOkN,IAIvFq9C,EAAAvtE,UAAAwlF,gBAAA,SAAgBt1D,EAAqB1K,GAInC,OAAQyqC,EAAApL,gBAAgB30B,IACtB,KAAK+/B,EAAAhyB,aAAa8uB,SAChB,GAAIkD,EAAAxK,WAAWv1B,GAAO,CACpB,IAAIlN,EAAQitC,EAAA5K,iBAAiBn1B,GAC7B,GAAI1K,EAAKsiD,eAAe9kD,EAAOlb,EAAA29D,WAAW2T,cAKxC,OADA5zD,EAAKohD,eAAe5jD,EAAOlb,EAAA29D,WAAW2T,cAC/Bp2D,EAGX,MAEF,KAAKitC,EAAAhyB,aAAakuB,MAChB,GAA2B,OAAvB8D,EAAApJ,aAAa32B,GAAgB,CAC/B,IAAI6pD,EAAQ9pB,EAAAlJ,mBAAmB72B,GAC/B,GAAI6pD,EACF,OAAOh8E,KAAKynF,gBAAgBv1B,EAAAhJ,cAAc/2B,EAAM6pD,EAAQ,GAAIv0D,IAMpE,OAAQ,GAQV+nD,EAAAvtE,UAAAqgF,gBAAA,SAAgBnwD,EAAqBu1D,EAAqBC,GAKxD,OADY3nF,KAAKynF,gBAAgBt1D,EAAMu1D,GAEnC1nF,KAAKqjF,gBAAgBlxD,EAAMw1D,GAC3B3nF,KAAKqjF,gBAAgBrjF,KAAKkzE,WAAW/gD,GAAOw1D,IAIlDnY,EAAAvtE,UAAAo0E,oBAAA,SAAoB5uD,EAAYuuD,EAAwB4R,gBAAA,IAAAA,OAAA,GACtD,IAAI7f,EAAetgD,EAAKsgD,aACxB,GAAIA,EAAc,CAChB,IAAIpoE,EAASK,KAAKL,WAClB,IAAkB,IAAAokB,EAAArP,EAAAqzD,EAAaztD,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAApC,IAAIuS,EAAKhM,EAAA7Z,MACZ,GAAI6lB,EAAM9K,GAAG5S,EAAApH,YAAY2mE,QAAS,CAChC,IAAI9hD,EAAaC,EAAMlC,MACnBwC,EAAKsiD,eAAe7iD,EAAYnd,EAAA29D,WAAW2T,gBACzCuM,GAAYngE,EAAKohD,eAAe3hD,EAAYnd,EAAA29D,WAAW2T,cAC3DrF,EAAMz3D,KACJve,KAAKwiF,YACH7iF,EAAOi4C,UAAU1wB,EAAYC,EAAMnL,KAAK83C,yHAUtD0b,EAAAvtE,UAAAigF,6BAAA,SACEz6D,EACA4rD,EACAn5C,EACA87C,EACA4R,QADA,IAAA5R,MAAA,WACA,IAAA4R,OAAA,GAEK5R,IAAOA,EAAQ,IAAI/uE,OACxB+uE,EAAMz3D,KACJve,KAAKL,OAAO86C,OAEd,IAAIotC,EAAe7R,EAAMlrE,OAEzB,GADA9K,KAAKq2E,oBAAoB5uD,EAAMuuD,EAAO4R,GAClC5R,EAAMlrE,OAAS+8E,EAAc,CAC/B,IAAI1U,EAAaj5C,EAAU45B,eACvByiB,EAAO9uD,EAAK2hD,oBAAoBlvC,GAC/BzS,EAAKikD,YAAY2H,EAAWn5C,IAAYzS,EAAKwhD,aAAasN,EAAKtxD,MAAOlb,EAAA29D,WAAWiE,SAClFlkD,EAAKwjD,UAAUoI,EAAWn5C,IAAYzS,EAAKwhD,aAAasN,EAAKtxD,MAAOlb,EAAA29D,WAAW9C,SACnF,IAAIjlE,EAASK,KAAKL,OAKlB,OAJAq2E,EAAM6R,EAAe,GAAKloF,EAAO+5C,UAAU68B,EAAKtxD,MAAOouD,GACvD2C,EAAMz3D,KACJ5e,EAAOi4C,UAAU2+B,EAAKtxD,MAAOkuD,IAExBxzE,EAAOm6C,MAAM,KAAMk8B,EAAO7C,GAC5B,OAAI6C,EAAMlrE,OAAS,GACxBkrE,EAAM6R,EAAe,GAAKxU,EACnBrzE,KAAKL,OAAOm6C,MAAM,KAAMk8B,EAAO97C,EAAU45B,iBAE3Cuf,GAIT7D,EAAAvtE,UAAAqyE,mBAAA,SAAmB7sD,EAAYuuD,WACzBr2E,EAASK,KAAKL,OAClB,GAAI8nB,EAAKpL,GAAE,OAA4B,CAIrC,IADA,IAAIzL,OAAM,EACHA,EAAS6W,EAAK7W,QAAQ6W,EAAO7W,EACpC5Q,KAAKq2E,oBAAoB5uD,EAAMuuD,GAAO,YAEtC,IAAkB,IAAAjyD,EAAArP,EAAA+S,EAAKwgD,eAAejiD,eAAa7K,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAAhD,IAAIuS,EAAKhM,EAAA7Z,MACR4lB,EAAaC,EAAMlC,MACnBwC,EAAKsiD,eAAe7iD,EAAYnd,EAAA29D,WAAW2T,gBAC7C5zD,EAAKohD,eAAe3hD,EAAYnd,EAAA29D,WAAW2T,cAC3CrF,EAAMz3D,KACJve,KAAKwiF,YACH7iF,EAAOi4C,UAAU1wB,EAAYC,EAAMnL,KAAK83C,uHAWpD0b,EAAAvtE,UAAA8+E,eAAA,SACEn7D,EACA6xB,EACA2uB,EACAyf,EAEAiC,GAEA,QAJA,IAAAjC,OAAA,QAEA,IAAAiC,OAAA,GAEIliE,EAASzN,aAAa85C,EAAA5kD,eAAekS,QAAS,CAEhD,GADA1U,QAAQ+a,EAASvJ,GAAG5S,EAAApH,YAAYm2E,cAC5Bx4E,KAAKyvE,uBAAuB7rD,SAASgC,GAKlC,CAEL,IAAImiE,EACJ,GAFA/nF,KAAKyvE,uBAAuBlxD,KAAKqH,GAE7BA,EAASvJ,GAAG5S,EAAApH,YAAY+f,UAAW,CACrC,IAAI4lE,EAAcn9E,OAAO4sC,GACzB5sC,OAAOm9E,EAAYl9E,QACnBi9E,EAAO/nF,KAAK0lF,eAAe9/D,EAAUoiE,EAAYvf,MAAM,GAAIuf,EAAY,GAAInC,QAE3EkC,EAAO/nF,KAAK0lF,eAAe9/D,EAAU6xB,EAAU,EAAGouC,GAUpD,OARI7lF,KAAK2vE,YAAYsD,YACd6U,EAGH9nF,KAAKkwE,oBAAoBx+D,IAAIq2E,GAF7BA,EAAO/nF,KAAKqjF,gBAAgB0E,EAAM/nF,KAAK+wE,cAK3C/wE,KAAKyvE,uBAAuB3G,MACrBif,EAtBP/nF,KAAKqe,QACH3U,EAAA4L,eAAeqwE,yCACfvf,EAAWz2D,MAAOiW,EAASjX,cAuBjC,IAAIs5E,EAAcxwC,EAAWA,EAAS3sC,OAAS,EAC3CoyB,EAAe+qD,EAEfxB,EADe7gE,EAASjV,UAAU6jD,mBAElCkyB,EAAe9gE,EAASjV,UAAU0W,eAAevc,OACjD67E,EAAcD,EACd9gE,EAASvJ,GAAG5S,EAAApH,YAAY+f,cACxBqkE,IACAE,IACAzpD,GAEJryB,OAAOo9E,GAAexB,GAEtB,IAAI9mF,EAASK,KAAKL,OAClB,IAAKK,KAAK61E,gBAAgBjwD,GAAW,OAAOjmB,EAAO47C,cACnD,IAAIvqB,EAAapL,EAASjV,UAAUqgB,WAChCk3D,EAAetiE,EAASvJ,GAAG5S,EAAApH,YAAY0yE,eAG3C,GAAIkT,EAActB,EAAa,CACxBlvC,KACHA,EAAW,IAAIxwC,MAAM0/E,IACZ77E,OAAS,GAEpB,IAAIuc,EAAiBzB,EAASjV,UAAU0W,eACpC45C,EAAiBr7C,EAAS3jB,UAAU+jE,iBAAiBj1C,WACzDlmB,OAAOo2D,EAAen2D,QAAUuc,EAAevc,QAE/C,IADA,IAAIq9E,GAA0B,EACrB9nF,EAAI68B,EAAc78B,EAAIqmF,IAAgBrmF,EAAG,CAChD,IAAIokB,EAAcw8C,EAAe5gE,GAAGokB,YACpC,GAAIA,EAAa,CACf,GAAI7a,EAAAimB,oBAAoBpL,EAAYrR,MAAO,CACzCqkC,EAASl5B,KAAKve,KAAK20E,kBACL1T,EAAe5gE,GAAGokB,YAC9B4C,EAAehnB,GAAE,IAGnB,SAEF,IAAIwa,EAAW7a,KAAK4O,SAASu0D,kBAAkB1+C,EAAamB,EAAS6B,KAAMJ,EAAehnB,IAC1F,GAAIwa,GACEA,EAASzH,MAAQ6+C,EAAA7kD,YAAY6Q,OAAQ,CACvC,IAAI4tD,EAAiBhxD,EACrB,GAAI7a,KAAKyzE,cAAc5H,GAAS,CAC1BA,EAAOxvD,GAAG5S,EAAApH,YAAYsiB,SACxB8yB,EAASl5B,KACPve,KAAKw8E,sBAAsB3Q,EAAQxkD,EAAehnB,GAAE,IAGtDo3C,EAASl5B,KACPve,KAAKw9E,kBACH79E,EAAOq4C,WAAW6zB,EAAOl9D,aAAck9D,EAAO7vD,KAAK83C,gBACnD+X,EAAO7vD,KAAMqL,EAAehnB,IAAI,GAAO,EAAOokB,IAIpD,WAKRgzB,EAASl5B,KAAK8I,EAAehnB,GAAG0zD,aAAap0D,IAC7CwoF,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAI5lE,EAAWsD,EAEf,GADAA,EAAW5lB,KAAKyyE,iBAAiB7sD,IAC5B5lB,KAAK61E,gBAAgBjwD,GAAW,OAAOjmB,EAAO47C,cACnD31B,EAAS6B,KAAKhY,MAAQ6S,EAASmF,KAAKhY,MACpC,IAAI6zE,EAAmBtyD,EAAW8iC,eAC9Bs0B,EAAOzoF,EAAOa,KAAKolB,EAASjX,aAAc8oC,EAAU6rC,GAYxD,OAXAtjF,KAAK2vE,YAAc3+C,EACfA,EAAWiiD,YACT4S,GACFuC,EAAOpoF,KAAKwiF,YAAY4F,GACxBpoF,KAAK2vE,YAAchmE,EAAA2H,KAAKG,MACdq2E,EAGV9nF,KAAKkwE,oBAAoBx+D,IAAI02E,GAF7BA,EAAOpoF,KAAKqjF,gBAAgB+E,IAKzBzoF,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOi6C,WAAW55C,KAAKmnF,gBAAiBxnF,EAAOyD,IAAI85B,IACnDkrD,GACCpoF,KAAK2vE,YAAY7b,iBAQ1B,IAAI3hC,EAAOxyB,EAAOa,KAAKolB,EAASjX,aAAc8oC,EAAUzmB,EAAW8iC,gBAUnE,OATA9zD,KAAK2vE,YAAc3+C,EACfA,EAAWiiD,YACT4S,GACF1zD,EAAOnyB,KAAKwiF,YAAYrwD,GACxBnyB,KAAK2vE,YAAchmE,EAAA2H,KAAKG,MACdq2E,IACV31D,EAAOnyB,KAAKqjF,gBAAgBlxD,KAGzBA,GAITq9C,EAAAvtE,UAAAgjF,oBAAA,SACEt0E,EACA6zE,EACAe,EACAnf,EACAof,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAEA,IAAI3oD,EAAeqoD,EAAoBz6E,OAEvC,IAAK9K,KAAKmlF,mBACRx0E,EACAusB,EACW,GAAXsoD,EACApf,GAEA,OAAOpmE,KAAKL,OAAO47C,cAGrB,IAAIqqC,EAAuBJ,EAAUtoD,EAAe,EAAIA,EACpDua,EAAW,IAAIxwC,MAAqB2+E,GACpC3gE,EAAQ,EACRugE,IACF/tC,EAAS,GAAK+tC,EACdvgE,EAAQ,GAGV,IADA,IAAIoC,EAAiB1W,EAAU0W,eACtBhnB,EAAI,EAAGA,EAAI68B,IAAgB78B,IAAK4kB,EACvCwyB,EAASxyB,GAASjlB,KAAK20E,kBAAkB4Q,EAAoBllF,GAAIgnB,EAAehnB,GAAE,GAKpF,OADAwK,OAAOoa,GAAS2gE,GACT5lF,KAAKqoF,iBAAiB13E,EAAW6zE,EAAU/sC,EAAUouC,IAI9DrW,EAAAvtE,UAAAomF,iBAAA,SACE13E,EACA6zE,EACA/sC,EACAouC,QADA,IAAApuC,MAAA,WACA,IAAAouC,OAAA,GAEA,IAAIoC,EAAcxwC,EAAWA,EAAS3sC,OAAS,EAC3CoyB,EAAe+qD,EAEfxB,EADe91E,EAAU6jD,mBAEzBkyB,EAAe/1E,EAAU0W,eAAevc,OACxC67E,EAAcD,EACd/1E,EAAUyW,aACVq/D,IACAE,IACAzpD,GAEJryB,OAAOo9E,GAAexB,GAEtBzmF,KAAK0xE,mBAAmB/gE,EAAU0W,eAAgB1W,EAAUqgB,WAAYrgB,EAAUyW,UAClF,IAAIznB,EAASK,KAAKL,OAGlB,GAAIsoF,EAActB,EAAa,CACxBlvC,KACHA,EAAW,IAAIxwC,MAAM0/E,IACZ77E,OAAS,GAGpB,IADA,IAAIuc,EAAiB1W,EAAU0W,eACtBhnB,EAAI68B,EAAc78B,EAAIqmF,IAAgBrmF,EAC7Co3C,EAASl5B,KAAK8I,EAAehnB,GAAG0zD,aAAap0D,IAIjD,IAAIqxB,EAAargB,EAAUqgB,WACvBmB,EAAOxyB,EAAO07C,cAAcmpC,EAAU/sC,EAAU9mC,EAAU8X,qBAU9D,OATAzoB,KAAK2vE,YAAc3+C,EACfA,EAAWiiD,YACT4S,GACF1zD,EAAOnyB,KAAKwiF,YAAYrwD,GACxBnyB,KAAK2vE,YAAchmE,EAAA2H,KAAKG,MAExB0gB,EAAOnyB,KAAKqjF,gBAAgBlxD,IAGzBxyB,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOi6C,WAAW55C,KAAKmnF,gBACrBxnF,EAAOyD,IAAI85B,IAEb/K,GACCnyB,KAAK2vE,YAAY7b,iBAGtB0b,EAAAvtE,UAAA26E,uBAAA,SACEhqD,EACAqwC,EACAmY,GAKA,IAHA,IAAI1nD,EAAcd,EAAWc,YACzB40D,EAAiB50D,EAAY5oB,OAC7By9E,EAAQ,IAAIthF,MAAqBqhF,KAC5BjoF,EAAI,EAAGA,EAAIioF,IAAkBjoF,EACpCkoF,EAAMloF,GAAKL,KAAK20E,kBAAkBjhD,EAAYrzB,GAAIsJ,EAAA2H,KAAKG,KACrD,GAIJ,OADA82E,EAAMD,GAAkBtoF,KAAK20E,kBAAkBjhD,EAAY40D,GAAiBrlB,EAAgBmY,GACrFp7E,KAAKL,OAAOm6C,MAAM,KAAMyuC,EAAOvoF,KAAK2vE,YAAY7b,iBAGzD0b,EAAAvtE,UAAA46E,+BAAA,SACEjqD,EACAqwC,EACAmY,GAEA,IAAIxwD,EAAS5qB,KAAK4O,SAAS40D,+BACzB5wC,EACA5yB,KAAK+wE,YACL9N,GAEF,IAAKr4C,EAAQ,OAAO5qB,KAAKL,OAAO47C,cAChC,OAAQ3wB,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAYwO,MACf,IAAIynD,EAAqBz4C,EAAQF,eAAeunC,EAAAzoD,aAAa2B,YAAanL,KAAK+wE,YAAY10D,GAAE,QAC7F,IAAKgnD,EAKH,OAJArjE,KAAKqV,MACH3L,EAAA4L,eAAegtD,qCACf1vC,EAAWA,WAAWjjB,MAAeib,EAAQjc,cAExC3O,KAAKL,OAAO47C,cAErB,IAAIiqC,EAAUxlF,KAAK20E,kBAAkB/hD,EAAWA,WAAoBhI,EAAQ5O,KAAI,GAGhF,OAAOhc,KAAKqkF,kBAAkBhhB,EAAY,CACxCzwC,EAAWoB,mBACVpB,EAAY4yD,EAASpK,GAO5B,OAJAp7E,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,eAGrBi0B,EAAAvtE,UAAA66E,0BAAA,SACElqD,EACA41D,EACApN,GAEA,IAAInqE,EAAc2hB,EAAW3hB,YAAYmuB,QACzCv0B,QAAQoG,EAAYkT,gBACpB,IAUIyB,EAVA6B,EAAOznB,KAAK+wE,YACZtM,EAAiBh9C,EAAKg9C,eACtBxiE,EAAY,IAAIgwD,EAAAlhD,kBAClBE,EAAYrQ,KAAK+U,KAAK7K,OAClBmG,EAAYrQ,KAAK+U,KACjB,cAAgB8uD,EAAel+C,mBAAmBzI,SAAS,IAC/D2mD,EACAxzD,EACAghD,EAAA5kD,eAAeqC,MAGboW,EAA0Bjc,EAAAg4D,QAAQp6C,EAAK3B,yBAI3C,GAAI0iE,EAAqB,CACvB,IAAIziB,EAAgB9jE,EAAU+jE,iBAC1B/E,EAAiB8E,EAAch1C,WAC/B03D,EAAuBxnB,EAAen2D,OAGtCuc,EAAiBmhE,EAAoBnhE,eACrC2tC,EAAgB3tC,EAAevc,OACnC,GAAI29E,EAAuBzzB,EAKzB,OAJAh1D,KAAKqV,MACH3L,EAAA4L,eAAeuL,+BACf+R,EAAWjjB,MAAOqlD,EAAcl3C,WAAY2qE,EAAqB3qE,YAE5D9d,KAAKL,OAAO47C,cAKrB,IADA,IAAIgZ,EAAiB,IAAIttD,MAAcwhF,GAC9BpoF,EAAI,EAAGA,EAAIooF,IAAwBpoF,EAAG,CAC7C,IAAI6gE,EAAgBD,EAAe5gE,GAEnC,GADAk0D,EAAel0D,GAAK6gE,EAActgE,KAAK+U,MAClC/L,EAAAo2B,cAAckhC,EAAcllD,MAAO,CAMtC,KALIunD,EAAevjE,KAAK4O,SAASiyD,YAC/BK,EAAcllD,KACdyoD,EAAe7zD,OACfkV,IAEiB,OAAO9lB,KAAKL,OAAO47C,cACtC,IAAKl0B,EAAehnB,GAAGszD,uBAAuB4P,GAK5C,OAJAvjE,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACf1T,EAAcvxD,MAAO0X,EAAehnB,GAAGyd,WAAYylD,EAAazlD,YAE3D9d,KAAKL,OAAO47C,eAOzB,IAAIvqB,EAAaw3D,EAAoBx3D,WACrC,IAAKpnB,EAAAo2B,cAAc+lC,EAAc/0C,YAAa,CAM5C,KALIuyC,EAAevjE,KAAK4O,SAASiyD,YAC/BkF,EAAc/0C,WACdyzC,EAAe7zD,OACfkV,IAEiB,OAAO9lB,KAAKL,OAAO47C,cACtC,GACEvqB,GAAcrnB,EAAA2H,KAAKG,KACf8xD,GAAgB55D,EAAA2H,KAAKG,MACpB8xD,EAAa5P,uBAAuB3iC,GAMzC,OAJAhxB,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACf7O,EAAc/0C,WAAWrhB,MAAO4zD,EAAazlD,WAAYkT,EAAWlT,YAE/D9d,KAAKL,OAAO47C,cAKvB,IAAIn0B,EAAWohE,EAAoBphE,SAC/BshE,EAAe3iB,EAAc90C,iBACjC,GAAIy3D,EAAc,CAChB,IAAKthE,EAKH,OAJApnB,KAAKqV,MACH3L,EAAA4L,eAAe2vD,+CACfyjB,EAAa/4E,OAER3P,KAAKL,OAAO47C,cAErB,IAAIgoB,EAKJ,KALIA,EAAevjE,KAAK4O,SAASiyD,YAC/B6nB,EACAjkB,EAAe7zD,OACfkV,IAEiB,OAAO9lB,KAAKL,OAAO47C,cACtC,IAAKn0B,EAASusC,uBAAuB4P,GAKnC,OAJAvjE,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACf8T,EAAa/4E,MAAOyX,EAAStJ,WAAYylD,EAAazlD,YAEjD9d,KAAKL,OAAO47C,cAIvB,IAAI5qC,EAAY,IAAIhH,EAAA8Z,UAAU4D,EAAgB2J,EAAY5J,GAS1D,GARAzW,EAAU6jD,mBAAqBQ,EAC/BrkD,EAAU4jD,eAAiBA,EAC3B3uC,EAAW,IAAIqsC,EAAAnhD,SACb7O,EAAUrB,KACVqB,EACA0O,EACAmV,IAEG9lB,KAAK61E,gBAAgBjwD,GAAW,OAAO5lB,KAAKL,OAAO47C,cACxDv7C,KAAK2vE,YAAc6Y,EAAoBxsE,SAGlC,CAML,KALA4J,EAAW5lB,KAAK2zE,kCACd1xE,EACA,GACA6jB,IAEa,OAAO9lB,KAAKL,OAAO47C,cAClCv7C,KAAK2vE,YAAc/pD,EAASjV,UAAUqL,KAGxC,IAAIiJ,EAAQjlB,KAAKu4E,yBAAyB3yD,GAC1C,OAAOX,EAAQ,EACXjlB,KAAKL,OAAO47C,cACZv7C,KAAKL,OAAOyD,IAAI6hB,IAIduqD,EAAAvtE,UAAA0mF,4BAAR,SAAoC/1D,GAClC,IAAIrR,EAAeqR,EAAWjjB,MAAMoD,OAAOwO,aACvC3T,EAAc5N,KAAK4iB,QAAQhV,YAC/B/C,OAAO+C,EAAYsD,IAAIqQ,IACH3T,EAAY1M,IAAIqgB,GACjBlF,GAAG5S,EAAApH,YAAYswE,WAChC3yE,KAAKg0E,kBAAkBzyD,EAAcqR,IASzC48C,EAAAvtE,UAAA86E,4BAAA,SACEnqD,EACAqwC,EACAmY,GAEA,IAAIz7E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACZtM,EAAiBh9C,EAAKg9C,eAG1B,OAAQ7xC,EAAWxf,MACjB,KAAKxJ,EAAAyJ,SAASyc,KACZ,IAAI1e,EAAUpR,KAAKoR,QAInB,OAHK6xD,EAAe/2C,iBAClBlsB,KAAK2vE,YAAcv+D,EAAQI,WAEtBJ,EAAQc,SACXvS,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAKwG,EAAAyJ,SAAS0c,KAEZ,OADA/vB,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKwG,EAAAyJ,SAAS2c,MAEZ,OADAhwB,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKwG,EAAAyJ,SAASsqB,KACZ,GAAI8mC,EAAepoD,GAAG5S,EAAApH,YAAY+f,UAAW,CAC3C,IAAI2iD,EAAYl6D,OAAO4c,EAAKu9C,YAAYv7D,EAAAzG,cAAcoC,QAClDgK,EAAgBvE,OAAO45D,EAAe7zD,QAAS/F,OAAOuE,EAAcgE,MAAQ6+C,EAAA7kD,YAAYwO,OAC5F,IAAIw3D,EAAiBpzE,KAAKoR,QAAQgiE,eAClC,GAAI3O,EAAepoD,GAAG5S,EAAApH,YAAYyd,eAC3B2H,EAAKpL,GAAE,IAAuB,CACjCoL,EAAK/Y,IAAG,IAOR,IAAIsnE,EAAyB,CAC3Br2E,EAAO46C,GACL56C,EAAOw3C,MAAMi8B,GAAkBlhB,EAAAjyB,WAAW55B,IAAM6rD,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OACvExrE,EAAOi4C,UAAUmtB,EAAU9/C,MAAOmuD,IAEpCzzE,EAAO+5C,UAAUqrB,EAAU9/C,MACzBjlB,KAAKkzE,WACHlzE,KAAKw2E,eAAsBpnE,OAUnC,OALApP,KAAKy2E,wBAA+BrnE,EAAe4mE,GACnDA,EAAMz3D,KACJ5e,EAAOi4C,UAAUmtB,EAAU9/C,MAAOmuD,IAEpCpzE,KAAK2vE,YAAc5K,EAAU/oD,KACtBrc,EAAOm6C,MAAM,KAAMk8B,EAAO5C,GAIrC,IAAIhsD,EAAWvc,OAAO45D,EAAe9zD,UAAUyW,UAE/C,OADApnB,KAAK2vE,YAAcvoD,EACZznB,EAAOi4C,UAAUmtB,EAAU9/C,MAAOmC,EAAS0sC,gBAOpD,OALA9zD,KAAKqV,MACH3L,EAAA4L,eAAe2vD,+CACfryC,EAAWjjB,OAEb3P,KAAK2vE,YAAc3vE,KAAKoR,QAAQI,UACzB7R,EAAO47C,cAEhB,KAAK3xC,EAAAyJ,SAASmd,MACZ,IAAIo4D,EAAO5oF,KAAK+wE,YACZ8X,EAAiBD,EAAKnkB,eAU1B,GATIokB,EAAexsE,GAAG5S,EAAApH,YAAYyd,eAC3B8oE,EAAKvsE,GAAE,MAEVrc,KAAKqV,MACH3L,EAAA4L,eAAewzE,iGACfl2D,EAAWjjB,QAIbi5E,EAAKvsE,GAAE,OAA4B,CACrC,IAAI0sE,EAAaH,EAAK5jB,YAAYv7D,EAAAzG,cAAcoC,OAChD,GAAI2jF,EAAY,CACd,IACIt/D,EADkB5e,OAAOk+E,EAAW/sE,KAAKkQ,gBAClBzC,KAC3B,GAAIA,EAEF,OADAzpB,KAAK2vE,YAAclmD,EAAKzN,KACjBrc,EAAOi4C,UAAUmxC,EAAW9jE,MAAOwE,EAAKzN,KAAK83C,iBAI1D,GAAI+0B,EAAexsE,GAAG5S,EAAApH,YAAY+f,UAAW,CACvChT,EAAgBvE,OAAOg+E,EAAej4E,QAAS/F,OAAOuE,EAAcgE,MAAQ6+C,EAAA7kD,YAAYwO,OAC5F,IAAIuoE,EAA4B/0E,EAAeqa,KAC/C,GAAI06D,EAAmB,CACrB,IAAI6E,EAAY7E,EAAkBnoE,KAElC,OADAhc,KAAK2vE,YAAcqZ,EACZrpF,EAAOi4C,UAAU,EAAGoxC,EAAUl1B,iBAQzC,OALA9zD,KAAKqV,MACH3L,EAAA4L,eAAe6vD,iDACfvyC,EAAWjjB,OAEb3P,KAAK2vE,YAAc3vE,KAAKoR,QAAQI,UACzB7R,EAAO47C,cAIlBv7C,KAAK2oF,4BAA4B/1D,GAGjC,IAAIhI,EAAS5qB,KAAK4O,SAASi0D,kBACzBjwC,EACAnL,EACAznB,KAAK0vE,aAAejL,GAEtB,IAAK75C,EAAQ,OAAOjrB,EAAO47C,cAE3B,OAAQ3wB,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY8X,MACf,IAAIlJ,EAAe4O,EAAQ5O,KAE3B,GADAnR,OAAOmR,GAAQrS,EAAA2H,KAAKG,MACRmZ,EAAQvO,GAAG5S,EAAApH,YAAYsiB,SACjC,OAAO3kB,KAAKw8E,sBAA6B5xD,EAAQq4C,EAAgBmY,GAEnE,IAAIl0D,EAAqB0D,EAAQ3F,MAMjC,OALApa,OAAOqc,GAAc,GACjBlL,EAAKK,GAAE,MAAwBoL,EAAKoiD,YAAY3iD,EAAYnd,EAAA29D,WAAW9C,SAAS,KAClF5oD,EAAOA,EAAK02C,iBAEd1yD,KAAK2vE,YAAc3zD,EACZhc,KAAKL,OAAOi4C,UAAU1wB,EAAYlL,EAAK83C,gBAEhD,KAAK7B,EAAA7kD,YAAY6Q,OACf,IAAKje,KAAKyzE,cAAsB7oD,GAC9B,OAAO5qB,KAAKL,OAAO47C,cAEjBv/B,EAAgB4O,EAAQ5O,KAE5B,OADAnR,OAAOmR,GAAQrS,EAAA2H,KAAKG,MACPmZ,EAAQvO,GAAG5S,EAAApH,YAAYsiB,SAC3B3kB,KAAKw8E,sBAA8B5xD,EAAQq4C,EAAgBmY,IAEpEp7E,KAAK2vE,YAAc3zD,EACZhc,KAAKL,OAAOq4C,WAAoBptB,EAAQjc,aAAcqN,EAAK83C,iBAEpE,KAAK7B,EAAA7kD,YAAYyX,UACf,OAAK+F,EAAOvO,GAAG5S,EAAApH,YAAYswE,WAQ3B3yE,KAAK2vE,YAAchmE,EAAA2H,KAAKlO,IACRwnB,EAAQvO,GAAG5S,EAAApH,YAAYsiB,UACrC9Z,OAA4C,GAAzB+f,EAAQpG,mBACpBxkB,KAAKL,OAAOyD,IAAI28C,QAAoBn1B,EAAQlG,wBAE9C1kB,KAAKL,OAAOq4C,WAAuBptB,EAAQjc,aAAcujD,EAAAjyB,WAAW75B,OAZzEpG,KAAKqV,MACH3L,EAAA4L,eAAe2zE,+HACfr2D,EAAWjjB,OAEb3P,KAAK2vE,YAAchmE,EAAA2H,KAAKlO,IACjBpD,KAAKL,OAAO47C,eASvB,KAAK0W,EAAA7kD,YAAY2N,mBACf,IAAI6K,EAAW5lB,KAAK4O,SAASoM,gBACR4P,EACnB,KACA/gB,EAAAg4D,QAAqBp6C,EAAK3B,0BAE5B,IAAMF,IAAY5lB,KAAK61E,gBAAgBjwD,GAAY,OAAOjmB,EAAO47C,cACjE,IAAIt2B,EAAQjlB,KAAKu4E,yBAAyB3yD,GAE1C,OADA5lB,KAAK2vE,YAAc/pD,EAASjV,UAAUqL,KAC/Bhc,KAAKL,OAAOyD,IAAI6hB,GAO3B,OAJAjlB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEN3P,KAAKL,OAAO47C,eAGrBi0B,EAAAvtE,UAAA+6E,4BAAA,SACEpqD,EACAqwC,EACAmY,GAEA,IAAIz7E,EAASK,KAAKL,OAKdwyB,EAAOnyB,KAAK20E,kBAAkB/hD,EAAWA,WAAY5yB,KAAKoR,QAAQI,WAClE03E,EAAalpF,KAAK2vE,YAClBt2B,EAAer5C,KAAK4O,SAASiyD,YAAYjuC,EAAW4B,OAAQx0B,KAAK+wE,YAAYtM,gBAEjF,GADAzkE,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,MACnBy1C,EAAc,OAAO15C,EAAO47C,cAGjC,IAAKlC,EAAah9B,GAAE,KAClB,OAAO1c,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOw6C,KAAKhoB,GACZxyB,EAAOyD,IAAI8lF,GAAc7vC,EAAe,EAAI,IAC3C6Y,EAAAjyB,WAAW75B,KAIhB,IAAK8iF,EAAW7sE,GAAE,KAChB,OAAO1c,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOw6C,KAAKhoB,GACZxyB,EAAOyD,IAAI,IACV8uD,EAAAjyB,WAAW75B,KAIhB,IAAIgtE,EAAiB8V,EAAWp1B,eAGhC,GAAIo1B,EAAW7sE,GAAE,OAAyBg9B,EAAah9B,GAAE,KAAsB,CAG7E,GAAI6sE,EAAWx2B,gBAAgB/nC,eAAe0uB,GAC5C,OAAO15C,EAAO23C,OACZ87B,GAAkBlhB,EAAAjyB,WAAW55B,IACzB6rD,EAAArpB,SAAS4iC,MACTvZ,EAAArpB,SAAS2iC,MACbr5C,EACA+2D,EAAWn1B,aAAap0D,IAK5B,GAAI05C,EAAa1uB,eAAeu+D,GAAa,CAC3C,IAAItmE,EAAU5iB,KAAK4iB,QACnB,IAAMsmE,EAAWpW,cAAez5B,EAAay5B,YAAc,CACzD,IACIyI,EADOv7E,KAAK+wE,YACK3H,oBAAoB8f,GACrChvE,EAAqBrP,OAAO+X,EAAQ1I,oBAExC,OADAla,KAAK61E,gBAAgB37D,GACdva,EAAO46C,GACZ56C,EAAOw3C,MACLi8B,GAAkBlhB,EAAAjyB,WAAW55B,IACzB6rD,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZxrE,EAAOm4C,UAAUyjC,EAAUt2D,MAAOkN,IAEpCxyB,EAAOyD,IAAI,GACXpD,KAAK+gF,eAAe7mE,EAAoB,CACtCva,EAAOi4C,UAAU2jC,EAAUt2D,MAAOmuD,GAClCzzE,EAAOyD,IAAIi2C,EAAantB,eAAgB3c,KACvCqjB,IAGL5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,YAMZ,CAGL,GAAIu5E,EAAWv+D,eAAe0uB,GAC5B,OAAO15C,EAAOm6C,MAAM,KAAM,CACxB95C,KAAKw9E,kBAAkBrrD,EAAM+2D,EAAYv/E,EAAA2H,KAAKG,MAAM,GAAO,EAAOmhB,EAAWA,YAC7EjzB,EAAOyD,IAAI,IACV8uD,EAAAjyB,WAAW75B,KAGT,GAAIizC,EAAa1uB,eAAeu+D,GAAa,CAC9CtmE,EAAU5iB,KAAK4iB,QACnB,IAAMsmE,EAAWpW,cAAez5B,EAAay5B,YAAc,CAKrDyI,EADOv7E,KAAK+wE,YACK3H,oBAAoB8f,GACrChvE,EAAqBrP,OAAO+X,EAAQ1I,oBAExC,OADAla,KAAK61E,gBAAgB37D,GACdva,EAAO46C,GACZ56C,EAAOw3C,MACLi8B,GAAkBlhB,EAAAjyB,WAAW55B,IACzB6rD,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZxrE,EAAOm4C,UAAUyjC,EAAUt2D,MAAOkN,IAEpCxyB,EAAOyD,IAAI,GACXpD,KAAK+gF,eAAe7mE,EAAoB,CACtCva,EAAOi4C,UAAU2jC,EAAUt2D,MAAOmuD,GAClCzzE,EAAOyD,IAAIi2C,EAAantB,eAAgB3c,KACvCqjB,IAGL5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,QAOnB,OAAOhQ,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOw6C,KAAKhoB,GACZxyB,EAAOyD,IAAI,IACV8uD,EAAAjyB,WAAW75B,MAGhBopE,EAAAvtE,UAAAg7E,yBAAA,SACErqD,EACAqwC,EACAmY,EACA+N,QAAA,IAAAA,OAAA,GAEA,IAAIxpF,EAASK,KAAKL,OAClB,OAAQizB,EAAWvS,aACjB,KAAKzW,EAAA0W,YAAYyc,MACflyB,QAAQs+E,GACR,IAAI/1B,EAAY6P,EAAe/2C,eAC/B,OAAIknC,GACEA,EAAUnxD,WAAajC,KAAK4iB,QAAQxJ,eAC/BpZ,KAAKopF,oBACVv+E,OAAOuoD,EAAU5pC,eAAe,GACPoJ,EAAYH,mBACrC2oD,EACAxoD,IAIN5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,eAEhB,KAAK3xC,EAAA0W,YAAY8c,MACf,IAAIisD,EAAsCz2D,EAAYtxB,MAItD,OAHI6nF,IACFE,GAAcA,GAEZpmB,GAAkBt5D,EAAA2H,KAAKzN,IAClBlE,EAAOkE,IAASwlF,IAEzBrpF,KAAK2vE,YAAchmE,EAAA2H,KAAKxN,IACjBnE,EAAOmE,IAAIulF,IAEpB,KAAKz/E,EAAA0W,YAAYgd,QACf,IAAIqmC,EAAsC/wC,EAAYtxB,MAClD6nF,IACFxlB,EAAWkB,QACT5yD,QAAQ,GACR0xD,IAGJ,IAAI3nD,EAAOhc,KAAK4O,SAAS80D,4BAA4BC,EAAUV,GAE/D,OADAjjE,KAAK2vE,YAAc3zD,EACXA,EAAK5I,MACX,OAAqB,IAAKpT,KAAKoR,QAAQc,SAAU,OAAOvS,EAAOyD,IAAI28C,QAAQ4jB,IAC3E,OAAmB,OAAOhkE,EAAO0D,IAAI08C,QAAQ4jB,GAAW3jB,SAAS2jB,IACjE,OAAqB,IAAK3jE,KAAKoR,QAAQc,SAAU,OAAOvS,EAAOyD,IAAI28C,QAAQ4jB,IAC3E,OAAmB,OAAOhkE,EAAO0D,IAAI08C,QAAQ4jB,GAAW3jB,SAAS2jB,IACjE,QAAmB,OAAOhkE,EAAOkE,IAAIylF,WAAW3lB,IAChD,QAAmB,OAAOhkE,EAAOmE,IAAIylF,WAAW5lB,IAChD,QAAS,OAAOhkE,EAAOyD,IAAI28C,QAAQ4jB,IAGvC,KAAK/5D,EAAA0W,YAAYC,OAEf,OADA1V,QAAQs+E,GACDnpF,KAAKwpF,qBAA8C52D,GAE5D,KAAKhpB,EAAA0W,YAAYkd,OAEf,OADA3yB,QAAQs+E,GACDnpF,KAAKypF,qBAA8C72D,EAAYqwC,GAS1E,OALAjjE,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAEb3P,KAAK2vE,YAAc1M,EACZtjE,EAAO47C,eAGhBi0B,EAAAvtE,UAAAunF,qBAAA,SAAqB52D,GACnB,OAAO5yB,KAAKq3E,mBAAmBzkD,EAAWtxB,QAG5CkuE,EAAAvtE,UAAAmnF,oBAAA,SACEzR,EACAjkD,EACA0nD,EACAhV,GAmBA,IAjBA,IAAIzmE,EAASK,KAAKL,OACdijB,EAAU5iB,KAAK4iB,QACfxJ,EAAiBvO,OAAO+X,EAAQxJ,gBAChC8+D,EAAgBrtE,OAAO7K,KAAK4O,SAASkM,aAAa1B,EAAgB,CAAEu+D,KACpE9gE,EAAsBhM,OAAO+X,EAAQ/L,qBACrCysD,EAAY4U,EAAcl8D,KAC1ByL,EAAOznB,KAAK+wE,YAGZgT,EAAWt8D,EAAKihD,aAAapF,GAC7BomB,EAAgBjiE,EAAKihD,aAAa7xD,EAAoBmF,MAGtDlR,EAAS4oB,EAAY5oB,OACrBwP,EAAS,IAAIrT,MAAqB6D,GAClC+U,GAAW,EACX8pE,EAAoBhS,EAAY7jB,eAC3BzzD,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC/B,IAAIuyB,EAAac,EAAYrzB,GACzB8xB,EAAOS,EACPjzB,EAAO0iD,qBACLriD,KAAK20E,kBAA8B/hD,EAAY+kD,EAAW,IAI5DA,EAAY5jB,aAAap0D,GACzBuyD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MACxC/5C,OAAOqnD,EAAAnL,kBAAkB50B,IAASw3D,GAElC9pE,GAAW,EAEbvF,EAAOja,GAAK8xB,EAId,GAAItS,EAAU,CACZ4H,EAAK0hD,cAAc4a,GACnBt8D,EAAK0hD,cAAcugB,GAEnB,IAAIjS,EAAoB70D,EAAQ60D,kBAC5BQ,EAAgBj4E,KAAK03E,wBAAwBC,EAAar9D,GAC1DsvE,EAAgB5qB,QAAQiZ,EAAc9oE,OAAQ8C,QAAQwlE,IAI1D,GAAe,GAAX2D,EAAyC,CAC3C,IAAIyO,EAAe7pF,KAAKg4E,wBAAwBL,EAAaM,GACzD6R,EAAe9qB,QAAQ6qB,EAAa16E,OAAQ8C,QAAQwlE,IAExD,OADAz3E,KAAK2vE,YAAcrM,EACZ1gD,EAAQxR,QAAQc,SACnBlS,KAAKL,OAAO0D,IAAI08C,QAAQ+pC,GAAe9pC,SAAS8pC,IAChD9pF,KAAKL,OAAOyD,IAAI28C,QAAQ+pC,IAKxB33D,EAAOnyB,KAAK+gF,eAAen+D,EAAQxI,mBAAoB,CACzDza,EAAOyD,IAAI0H,GACX8X,EAAQxR,QAAQc,SACZvS,EAAO0D,IAAIs0E,EAAYoS,WACvBpqF,EAAOyD,IAAIu0E,EAAYoS,WAC3BpqF,EAAOyD,IAAI80E,EAAc3oE,IACzBqT,EAAQxR,QAAQc,SACZvS,EAAO0D,IAAI08C,QAAQ6pC,GAAgB5pC,SAAS4pC,IAC5CjqF,EAAOyD,IAAI28C,QAAQ6pC,KACtBxjB,GAEH,OADApmE,KAAK2vE,YAAcrM,EACZtjE,KAAKqjF,gBAAgBrjF,KAAKkzE,WAAW/gD,IAMhD,IADa+lD,EAAcxtD,eAAeunC,EAAAzoD,aAAa4B,aAAa,GASlE,OAPAqc,EAAK0hD,cAAc4a,GACnBt8D,EAAK0hD,cAAcugB,GACnB1pF,KAAKqV,MACH3L,EAAA4L,eAAe0tE,+CACf5c,EAAWz2D,MAAOuoE,EAAcvpE,cAElC3O,KAAK2vE,YAAcrM,EACZ3jE,EAAO47C,cAEhB,IAAIyuC,EAAkB1mB,EAAUxP,eAE5BkiB,EAAQ,IAAI/uE,MAEhB+uE,EAAMz3D,KACJ5e,EAAO+5C,UAAUqqC,EAAS9+D,MACxBjlB,KAAK+gF,eAAen+D,EAAQxI,mBAAoB,CAC9Cza,EAAOyD,IAAI0H,GACX8X,EAAQxR,QAAQc,SACZvS,EAAO0D,IAAIs0E,EAAYoS,WACvBpqF,EAAOyD,IAAIu0E,EAAYoS,WAC3BpqF,EAAOyD,IAAI80E,EAAc3oE,IACzBqT,EAAQxR,QAAQc,SACZvS,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACdgjE,KAIP,IAAI6jB,EAAYp/E,OAAOqtE,EAAczhE,aAAa,cAClD5L,OAAOo/E,EAAU72E,MAAQ6+C,EAAA7kD,YAAYuO,OACrCq6D,EAAMz3D,KACJ5e,EAAO+5C,UAAUgwC,EAAczkE,MAC7BtlB,EAAOu4C,KAAKorB,EAAU/Q,UAAU,EAC9B5yD,EAAOi4C,UAAUmsC,EAAS9+D,MAAO+kE,GACjCA,EACQC,EAAWphE,gBAKzB,IADA,IAAIoqD,EAAY0E,EAAY1E,UACZ8W,GAAP1pF,EAAI,EAAes3E,EAAYoS,WAAW1pF,EAAIyK,IAAUzK,EAAG,CAClE,IAAIgzE,EAAY/4D,EAAOja,GACnB4yE,IAEFI,EAAYrzE,KAAKkzE,WAAWG,IAG9B2C,EAAMz3D,KACJ5e,EAAOs3C,MAAM0gC,EAAYplB,SACvB5yD,EAAOi4C,UAAU8xC,EAAczkE,MAAO+kE,GACtC3W,EACAsW,EACAtpF,GAAK0pF,IAWX,OANA/T,EAAMz3D,KACJ5e,EAAOi4C,UAAUmsC,EAAS9+D,MAAO+kE,IAEnCviE,EAAK0hD,cAAc4a,GACnBt8D,EAAK0hD,cAAcugB,GACnB1pF,KAAK2vE,YAAcrM,EACZ3jE,EAAOm6C,MAAM,KAAMk8B,EAAOgU,IAGnCxa,EAAAvtE,UAAAwnF,qBAAA,SAAqB72D,EAAqCqwC,GACxD,IAAItjE,EAASK,KAAKL,OAGdusB,EAAiB+2C,EAAe/2C,eACpC,IAAKA,GAAkBA,EAAe7P,GAAG5S,EAAApH,YAAYqd,UAKnD,OAJA1f,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACfhiD,EAAWjjB,MAAO,WAAYszD,EAAenlD,YAExCne,EAAO47C,cAIhB,IAAI2uC,EAAOh+D,EAAetC,oBAC1B,GAAIsgE,EAAM,CAGR,GAAIA,EAAKv5E,UAAU6jD,mBAKjB,OAJAx0D,KAAKqV,MACH3L,EAAA4L,eAAe60E,sDACfv3D,EAAWjjB,MAAOuc,EAAepO,YAE5Bne,EAAO47C,cAEhB,GAAI2uC,EAAK7tE,GAAG5S,EAAApH,YAAY00D,SAKtB,OAJA/2D,KAAKqV,MACH3L,EAAA4L,eAAe80E,mFACfx3D,EAAWjjB,MAAOuc,EAAepO,YAE5Bne,EAAO47C,cAEhB,GAAI2uC,EAAK7tE,GAAG5S,EAAApH,YAAY20D,WAKtB,OAJAh3D,KAAKqV,MACH3L,EAAA4L,eAAe+0E,qFACfz3D,EAAWjjB,MAAOuc,EAAepO,YAE5Bne,EAAO47C,cAKlB,IAAItmB,EAAQrC,EAAWqC,MACnBgmB,EAAWhmB,EAAMnqB,OACjBwP,EAASsY,EAAWtY,OACpBuB,EAAUqQ,EAAerQ,QACzByuE,GAAY,EACZ/B,EAAQ,IAAIthF,MAAqBg0C,EAAW,GAE5CsgC,EADOv7E,KAAK+wE,YACKhI,oBAAoB/oE,KAAKoR,QAAQI,WACtD3G,OAAOowC,GAAY3gC,EAAOxP,QAC1B,IAAK,IAAIzK,EAAI,EAAGyS,EAAImoC,EAAU56C,EAAIyS,IAAKzS,EAAG,CACxC,IAAIgb,EAASQ,EAAUA,EAAQ3a,IAAI+zB,EAAM50B,GAAGsV,MAAQ,KACpD,GAAK0F,GAAUA,EAAOjI,MAAQ6+C,EAAA7kD,YAAYuO,MAA1C,CAQA,IAAIK,EAAeX,EAAQW,KAC3BusE,EAAMloF,EAAI,GAAKL,KAAKL,OAAOs3C,MACzBj7B,EAAKu2C,SACLvyD,KAAKL,OAAOi4C,UAAU2jC,EAAUt2D,MAAOjlB,KAAKoR,QAAQgiE,gBACpDpzE,KAAK20E,kBAAkBr6D,EAAOja,GAAYgb,EAAQW,KAAI,GACtDA,EAAK83C,eACGz4C,EAAQwN,mBAbhB7oB,KAAKqV,MACH3L,EAAA4L,eAAektD,oCACfvtC,EAAM50B,GAAGsP,MAAOslB,EAAM50B,GAAGsV,KAAMuW,EAAepO,YAEhDwsE,GAAY,EAahB,OADAtqF,KAAK2vE,YAAczjD,EAAelQ,KAAK02C,gBACnC43B,EAAkB3qF,EAAO47C,eAG7BgtC,EAAM,GAAK5oF,EAAO+5C,UAChB6hC,EAAUt2D,MACVjlB,KAAKkzE,WACHlzE,KAAKw2E,eAAetqD,KAKxBq8D,EAAMA,EAAMz9E,OAAS,GAAKnL,EAAOi4C,UAAU2jC,EAAUt2D,MAAOjlB,KAAKoR,QAAQgiE,gBAEzEpzE,KAAK2vE,YAAczjD,EAAelQ,KAC3Brc,EAAOm6C,MAAM,KAAMyuC,EAAOvoF,KAAKoR,QAAQgiE,kBAGhD5D,EAAAvtE,UAAAi7E,qBAAA,SACEtqD,EACAqwC,EACAmY,GAEA,IAAIz7E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YAGZnmD,EAAS5qB,KAAK4O,SAASu0D,kBACzBvwC,EAAWA,WACXnL,GAEF,IAAKmD,EAAQ,OAAOjrB,EAAO47C,cAC3B,GAAI3wB,EAAOxX,MAAQ6+C,EAAA7kD,YAAY+J,gBAK7B,OAJAnX,KAAKqV,MACH3L,EAAA4L,eAAei1E,yEACf33D,EAAWA,WAAWjjB,OAEjB3P,KAAKL,OAAO47C,cAErB,IAGIrvB,EAHAlM,EAAiC4K,EACjCxb,EAA8B,KAC9Boa,EAAgBoJ,EAAWpJ,cAqB/B,OAdEpa,GAJCoa,GACoD,QAApD0C,EAAiB+2C,EAAe/2C,iBACjCA,EAAe7P,GAAG5S,EAAApH,YAAYwP,SAEd7R,KAAK4O,SAASkM,aAC5BkF,EACAkM,EAAe1C,cACf3f,EAAAg4D,QAAqBp6C,EAAK3B,0BAGZ9lB,KAAK4O,SAASgzD,8BAC5B5hD,EACAwJ,EACA/B,EAAKg9C,eAAe7zD,OACpB/G,EAAAg4D,QAAqBp6C,EAAK3B,yBAC1B8M,KAIAqwC,GAAkBt5D,EAAA2H,KAAKG,OAAM2pE,GAAW,GACrCp7E,KAAKwqF,mBAAmBp7E,EAAewjB,EAAW1S,UAAWk7D,EAAaxoD,IAFtDjzB,EAAO47C,eAMpCi0B,EAAAvtE,UAAAqiF,kBAAA,SAAkBl1E,EAAsBg3D,GACtC,IAAIxgD,EAAWxW,EAAcwa,oBAC7B,GAAIhE,EAGF,OADKA,EAASzN,aAAa85C,EAAA5kD,eAAekS,SAASvf,KAAK61E,gBAAgBjwD,GACjEA,EAIT,IAAI2gD,EAAYn3D,EAAcqa,KAC9B,GAAI88C,EAAW,CACb,IAAIkkB,EAAWzqF,KAAKskF,kBAAkB/d,EAAWH,GACjDxgD,EAAW,IAAIqsC,EAAAnhD,SACbrH,EAAAzG,cAAcsC,YACd,IAAI2sD,EAAAlhD,kBACFtH,EAAAzG,cAAcsC,YACd8J,EAEsBq7E,EAASx5E,YAAamuB,SAE9CqrD,EAAS95E,UACT,WAKFiV,EAAW,IAAIqsC,EAAAnhD,SACbrH,EAAAzG,cAAcsC,YACd,IAAI2sD,EAAAlhD,kBACFtH,EAAAzG,cAAcsC,YACd8J,EACApP,KAAK4iB,QAAQzS,8BAA8B1G,EAAAzG,cAAcsC,YACvDmE,EAAApH,YAAY+f,SAAW3Y,EAAApH,YAAYyd,cAGvC,IAAInW,EAAA8Z,UAAU,KAAMrU,EAAc4M,KAAM5M,EAAc4M,MACtD,MAIJ4J,EAASjX,aAAeS,EAAcT,aAAelF,EAAA/G,mBAAqB,cAC1EkjB,EAASlX,IAAIjF,EAAApH,YAAYswE,UACzB/sD,EAAS3jB,UAAU0jB,oBAAoB,GAAIC,GAC3CxW,EAAcwa,oBAAsBhE,EACpC,IAAIwuD,EAAep0E,KAAK+wE,YACpBtpD,EAAO7B,EAAS6B,KACpBznB,KAAK+wE,YAActpD,EAGnB,IAAI9W,EAAYiV,EAASjV,UACrBhR,EAASK,KAAKL,OACdyzE,EAAiBpzE,KAAKoR,QAAQgiE,eAC9B4C,EAAQ,IAAI/uE,MAqBhB,GAZA+uE,EAAMz3D,KACJ5e,EAAO46C,GACL56C,EAAOw3C,MAAMi8B,GAAkBlhB,EAAAjyB,WAAW55B,IAAM6rD,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OACvExrE,EAAOi4C,UAAU,EAAGw7B,IAEtBzzE,EAAO+5C,UAAU,EACf15C,KAAKkzE,WACHlzE,KAAKw2E,eAAepnE,OAKxBm3D,EAAW,CACb,IAAIl/C,EAAiB1W,EAAU0W,eAC3B2tC,EAAgB3tC,EAAevc,OAC/B2sC,EAAW,IAAIxwC,MAAqB,EAAI+tD,GAC5Cvd,EAAS,GAAK93C,EAAOi4C,UAAU,EAAGw7B,GAClC,IAAK,IAAI/yE,EAAI,EAAGA,EAAI20D,IAAiB30D,EACnCo3C,EAASp3C,EAAI,GAAKV,EAAOi4C,UAAUv3C,EAAI,EAAGgnB,EAAehnB,GAAGyzD,gBAG9DkiB,EAAMz3D,KACJ5e,EAAO+5C,UAAU,EACf15C,KAAK+gF,eAAel2E,OAAO07D,EAAU38C,qBAAsB6tB,EAAU2uB,GAAY,GAAO,KAI9FpmE,KAAKy2E,wBAAwBrnE,EAAe4mE,GAC5C,IAAI3wD,EAAOrlB,KAAKkiF,6BAA6Bz6D,EAAM9nB,EAAOi4C,UAAU,EAAGw7B,GAAiBhkE,EAAc4M,KAAMg6D,GAC5GvuD,EAAKkiD,mBACL3pE,KAAK+wE,YAAcqD,EAGnB,IAAIz2B,EAAU39C,KAAK0xE,mBAAmB/gE,EAAU0W,eAAgB1W,EAAUqgB,WAAYrgB,EAAUyW,UAC5FS,EAASjC,EAASI,cAClBq3B,EAAW,IAAIp2C,MACfghF,EAAc,EAAIt3E,EAAU0W,eAAevc,OAC3CypE,EAAY1sD,EAAO/c,OACvB,GAAIypE,EAAY0T,EACd,IAAS5nF,EAAI4nF,EAAa5nF,EAAIk0E,IAAal0E,EAAGg9C,EAAS9+B,KAAKsJ,EAAOxnB,GAAG2b,KAAK83C,gBAE7E,IAAI2d,EAAU9xE,EAAOy9C,YAAYx3B,EAASjX,aAAcgvC,EAASN,EAAUh4B,GAE3E,OADAO,EAASkC,SAASnoB,EAAQ8xE,GACnB7rD,GAGT4pD,EAAAvtE,UAAAuoF,mBAAA,SAEEp7E,EAEAm2E,EAEAnK,EAEAhV,GAEA,IAAI8jB,EAAOlqF,KAAKskF,kBAAkBl1E,EAAeg3D,GAC7Cj0C,EAAOnyB,KAAKqkF,kBACd6F,EACA3E,EACAnf,EACApmE,KAAKoR,QAAQI,UAAUuiD,aAAa/zD,KAAKL,QACzCy7E,GAKF,OAHIlpB,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAWsY,OACxCv4C,KAAK2vE,YAAcvgE,EAAc4M,MAE5BmW,GAQTq9C,EAAAvtE,UAAAk7E,gCAAA,SACEna,EACAC,EACAmY,GAEA,IAAIz7E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YAEhB/wE,KAAK2oF,4BAA4B3lB,GAEjC,IAAIp4C,EAAS5qB,KAAK4O,SAASm0D,gCAAgCC,EAAgBv7C,EAAMw7C,GACjF,IAAKr4C,EAAQ,OAAOjrB,EAAO47C,cAE3B,OAAQ3wB,EAAOxX,MACb,KAAK6+C,EAAA7kD,YAAY6Q,OACf,IAAKje,KAAKyzE,cAAsB7oD,GAC9B,OAAOjrB,EAAO47C,cAEhB,IAAI8D,EAAsBz0B,EAAQ5O,KAElC,OADAnR,OAAOw0C,GAAc11C,EAAA2H,KAAKG,MACbmZ,EAAQvO,GAAG5S,EAAApH,YAAYsiB,SAC3B3kB,KAAKw8E,sBAA8B5xD,EAAQq4C,EAAgBmY,IAEpEp7E,KAAK2vE,YAActwB,EACZ1/C,EAAOq4C,WAAoBptB,EAAQjc,aAAc0wC,EAAWyU,iBAErE,KAAK7B,EAAA7kD,YAAYyX,UACf,IAAI6lE,EAAU7/E,OAAmB+f,EAAQha,QACzC,OADkD/F,OAAO6/E,EAAQt3E,MAAQ6+C,EAAA7kD,YAAYiX,MAChFrkB,KAAK0zE,YAAkBgX,IAI5B1qF,KAAK2vE,YAAchmE,EAAA2H,KAAKlO,IACRwnB,EAAQvO,GAAG5S,EAAApH,YAAYsiB,UACrC9Z,OAA4C,GAAzB+f,EAAQpG,mBACpB7kB,EAAOyD,IAAI28C,QAAoBn1B,EAAQlG,wBAEzC/kB,EAAOq4C,WAAuBptB,EAAQjc,aAAcujD,EAAAjyB,WAAW75B,OARpEpG,KAAK2vE,YAAchmE,EAAA2H,KAAKlO,IACjBpD,KAAKL,OAAO47C,eASvB,KAAK0W,EAAA7kD,YAAYuO,MACf9Q,OAAe+f,EAAQ/B,cAAgB,GACvC,IAAI26D,EAAWxjF,KAAK20E,kBAAkB9pE,OAAO7K,KAAK4O,SAAS+xD,uBAAwB3gE,KAAKoR,QAAQI,WAEhG,OADAxR,KAAK2vE,YAAsB/kD,EAAQ5O,KAC5Brc,EAAOu4C,KACJttB,EAAQ5O,KAAKu2C,SACb3nC,EAAQ5O,KAAKK,GAAG,GACxBmnE,EACQ54D,EAAQ5O,KAAK83C,eACblpC,EAAQ/B,cAGpB,KAAKopC,EAAA7kD,YAAYkO,mBACf,IAAIC,EAAsCqP,EAAQrP,gBAClD,GAAIA,EAAiB,CACnB,IAAI1a,EAASb,KAAK4O,SAASoM,gBAAgBO,EAAiB,MAC5D,GAAI1a,EAAQ,OAAOb,KAAKqkF,kBAAkBxjF,EAAQ,GAAImiE,EAAgB,GAExE,OAAOrjE,EAAO47C,cAEhB,KAAK0W,EAAA7kD,YAAYqO,SACf,IAAIuN,EAAiBne,OAAkB+f,EAAQ5B,gBAC/C,OAAOhpB,KAAKqkF,kBAAkBr7D,EAAgB,GAAIg6C,EAChDhjE,KAAK20E,kBAAkB9pE,OAAO7K,KAAK4O,SAAS+xD,uBAAwB3gE,KAAKoR,QAAQI,YAGrF,KAAKygD,EAAA7kD,YAAY2N,mBAKf,OAJA/a,KAAKqV,MACH3L,EAAA4L,eAAeq1E,wEACf3nB,EAAerzD,MAA2Bib,EAAQhqB,MAE7CjB,EAAO47C,cAOlB,OAJAv7C,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf0kD,EAAerzD,OAEVhQ,EAAO47C,eAGhBi0B,EAAAvtE,UAAAm7E,yBAAA,SACExqD,EACAqwC,EACAmY,GAEA,IAAIvlD,EAASjD,EAAWiD,OACpBC,EAASlD,EAAWkD,OACpBgkD,EAAY95E,KAAK+wE,YAEjBmJ,EAAWl6E,KAAKL,OAAO0iD,qBACzBriD,KAAKm6E,cACHn6E,KAAK20E,kBAAkB/hD,EAAWgD,UAAWjsB,EAAA2H,KAAK1N,MAClD5D,KAAK2vE,cAKT,GACEzd,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,OAC1CsN,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAW75B,IAE1C,OAAO8rD,EAAAlL,iBAAiBkzB,GACpBl6E,KAAK20E,kBAAkB9+C,EAAQotC,GAC/BjjE,KAAK20E,kBAAkB7+C,EAAQmtC,GAGrC,IAAIic,EAAkC,GAAX9D,EAEvBwP,EAAa9Q,EAAUvR,OAC3BvoE,KAAK+wE,YAAc6Z,EACnB,IAAIC,EAAa7qF,KAAK20E,kBAAkB9+C,EAAQotC,EAAgBic,GAC5D4L,EAAa9qF,KAAK2vE,YAClBob,EAA2B/qF,KAAKkwE,oBAAoBh/D,IAAI25E,GAExDG,EAAalR,EAAUvR,OAC3BvoE,KAAK+wE,YAAcia,EACnB,IAAIC,EAAajrF,KAAK20E,kBAAkB7+C,EAAQmtC,EAAgBic,GAC5DgM,EAAalrF,KAAK2vE,YAClBwb,EAA2BnrF,KAAKkwE,oBAAoBh/D,IAAI+5E,GAExDtL,EAAah2E,EAAA2H,KAAKsiD,kBAAkBk3B,EAAYI,GAAY,GAChE,IAAKvL,EAMH,OALA3/E,KAAKqV,MACH3L,EAAA4L,eAAes/D,mCACf9+C,EAAOnmB,MAAOu7E,EAAWptE,WAAYgtE,EAAWhtE,YAElD9d,KAAK2vE,YAAc1M,EACZjjE,KAAKL,OAAO47C,cAErBsvC,EAAa7qF,KAAKw9E,kBAChBqN,EACAC,EAAYnL,GACZ,GAAO,EACP9pD,GAEFo1D,EAAajrF,KAAKw9E,kBAChByN,EACAC,EAAYvL,GACZ,GAAO,EACP7pD,GAEF91B,KAAK2vE,YAAcgQ,EAEfoL,GAA4BI,EACzBJ,GAIHE,EAAajrF,KAAKkzE,WAAW+X,GAC7BE,GAA2B,IAJ3BN,EAAa7qF,KAAKkzE,WAAW2X,GAC7BE,GAA2B,IAKnBA,GAA4BpL,EAAW1M,YAE/C4X,EAAa7qF,KAAKsiF,gBAAgBuI,EAAYD,EAAY9Q,GAC1DmR,EAAajrF,KAAKsiF,gBAAgB2I,EAAYD,EAAYlR,IAI9D+Q,EAAa7qF,KAAKkiF,6BAA6B0I,EAAYC,EAAYlL,GACvEiL,EAAWjhB,mBAEXshB,EAAajrF,KAAKkiF,6BAA6B8I,EAAYC,EAAYtL,GACvEqL,EAAWrhB,mBAEX3pE,KAAK+wE,YAAc+I,EACnBA,EAAUpP,cAAckgB,EAAYI,GAEpC,IAAI74D,EAAOnyB,KAAKL,OAAO46C,GAAG2/B,EAAU2Q,EAAYI,GAGhD,OAFApgF,OAAOkgF,GAA4BI,GAC/BJ,GAA0B/qF,KAAKkwE,oBAAoBx+D,IAAIygB,GACpDA,GAGTq9C,EAAAvtE,UAAAo7E,8BAAA,SACEzqD,EACAqwC,EACAmY,GAEA,IAAIz7E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YAGZqa,EAAWprF,KAAK20E,kBAClB/hD,EAAW6D,QACXwsC,EAAemc,WAAU,GAK3B,GAAIltB,EAAApL,gBAAgBskC,IAAal5B,EAAAhyB,aAAaguB,YAAa,OAAOk9B,EAGlE,IASIj5D,EATAopD,EAA0B,KAW9B,OAVItY,GAAkBt5D,EAAA2H,KAAKG,OACzB8pE,EAAY9zD,EAAKihD,aAAa1oE,KAAK2vE,aACnCyb,EAAWzrF,EAAOm4C,UAChByjC,EAAUt2D,MACVmmE,IAMIx4D,EAAWI,UACjB,KAAKrD,EAAAC,MAAM4oC,UACT,OAAQx4D,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAAS8sC,OACTyV,EACAzrF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAayD,aAC5C,CACZklB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAS20D,EAAUx4D,GACzE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAGlB,OACE,IAAInqC,EAAUpR,KAAKoR,QACnB+gB,EAAOxyB,EAAO23C,OACZlmC,EAAQc,SACJggD,EAAArpB,SAASu3C,OACTluB,EAAArpB,SAAS8sC,OACbyV,EACAprF,KAAK2vE,YAAY3b,YAAYr0D,IAE/B,MAEF,OACA,OACEwyB,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAASu3C,OACTgL,EACAzrF,EAAO0D,IAAI,IAEb,MAEF,QACE8uB,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAASw3C,OACT+K,EACAzrF,EAAOkE,IAAI,IAEb,MAEF,QACEsuB,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAASy3C,OACT8K,EACAzrF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADA+G,QAAO,GACAlL,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM6oC,YACT,OAAQz4D,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAAS03C,OACT6K,EACAzrF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAC5C,IAAI6P,EAEEnB,EADN,GADImB,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAa0D,aAC5C,CACZilB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAS20D,EAAUx4D,GACzE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAGlB,OACMnqC,EAAUpR,KAAKoR,QACnB+gB,EAAOxyB,EAAO23C,OACZlmC,EAAQc,SACJggD,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACb6K,EACAprF,KAAK2vE,YAAY3b,YAAYr0D,IAE/B,MAEF,OACA,OACEwyB,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAAS23C,OACT4K,EACAzrF,EAAO0D,IAAI,IAEb,MAEF,QACE8uB,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAAS43C,OACT2K,EACAzrF,EAAOkE,IAAI,IAEb,MAEF,QACEsuB,EAAOxyB,EAAO23C,OACZ4a,EAAArpB,SAAS63C,OACT0K,EACAzrF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADA+G,QAAO,GACAlL,EAAO47C,cAGlB,MAEF,QAEE,OADA1wC,QAAO,GACAlL,EAAO47C,cAIlB,IAAI3sC,EAAW5O,KAAK4O,SAChBgc,EAAShc,EAASu0D,kBAAkBvwC,EAAW6D,QAAShP,GAG5D,IAAK8zD,EAEH,OADAv7E,KAAK2vE,YAAchmE,EAAA2H,KAAKG,KACnBmZ,EACE5qB,KAAK0iF,eACV93D,EACAuH,EACAS,EAAW6D,QACX7nB,EAAS+xD,sBACT/xD,EAASgyD,0BACT,GAPkBjhE,EAAO47C,cAStB,IAAK3wB,EACV,OAAOjrB,EAAO47C,cAIhB,IAAI8vC,EAAWrrF,KAAK0iF,eAClB93D,EACAuH,EACAS,EAAW6D,QACX7nB,EAAS+xD,sBACT/xD,EAASgyD,0BACT,GAGF5gE,KAAK2vE,YAAc4L,EAAUv/D,KAC7ByL,EAAK0hD,cAAcoS,GACnB,IAAIpI,EAAaoI,EAAUv/D,KAAK83C,eAEhC,OAAOn0D,EAAOm6C,MAAM,KAAM,CACxBuxC,EACA1rF,EAAOi4C,UAAU2jC,EAAUt2D,MAAOkuD,IACjCA,IAGL3D,EAAAvtE,UAAAq7E,6BAAA,SACE1qD,EACAqwC,EACAmY,GAEA,IAEIjpD,EAFAxyB,EAASK,KAAKL,OACdigF,GAAW,EAGf,OAAQhtD,EAAWI,UACjB,KAAKrD,EAAAC,MAAMljB,KAQT,GAPAylB,EAAOnyB,KAAK20E,kBACV/hD,EAAW6D,QACXwsC,EAAemc,WAAU,GAKvBp/E,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAakD,MAC5C,CACZylB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAIhB,MAEF,KAAK5rB,EAAAC,MAAMhjB,MACT,GAAIgmB,EAAW6D,QAAQrjB,MAAQxJ,EAAAyJ,SAAS+M,UAClBwS,EAAW6D,QAASpW,aAAezW,EAAA0W,YAAYgd,SAC/C1K,EAAW6D,QAASpW,aAAezW,EAAA0W,YAAY8c,OAClE,CAEDjL,EAAOnyB,KAAKi9E,yBAA4CrqD,EAAW6D,QAASwsC,EAAc,GAAoB,GAE1GjjE,KAAKoR,QAAQ2W,WAAW/nB,KAAK25E,iBAAiBxnD,EAAMS,EAAWjjB,OACnE,MAUF,GAPAwiB,EAAOnyB,KAAK20E,kBACV/hD,EAAW6D,QACXwsC,EAAemc,WAAU,GAKvBp/E,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAaoD,OAC5C,CACZulB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAGhB,OAAQv7C,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS03C,OAAQ5gF,EAAOyD,IAAI,GAAI+uB,GACrD,MAEF,OACA,OACEA,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACbvgF,KAAK2vE,YAAY5b,aAAap0D,GAC9BwyB,GAEF,MAEF,OACA,OACEA,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS23C,OAAQ7gF,EAAO0D,IAAI,GAAI8uB,GACrD,MAEF,QACEA,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ+nD,OAAQn5D,GACpC,MAEF,QACEA,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQgoD,OAAQp5D,GACpC,MAEF,QACEtnB,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM4oC,UAST,GARAonB,GAAW,EACXztD,EAAOnyB,KAAK20E,kBACV/hD,EAAW6D,QACXwsC,EAAemc,WAAU,GAKvBp/E,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAamD,YAC5C,CACZwlB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAGhB,OAAQv7C,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS8sC,OAAQxjD,EAAMnyB,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,OACA,OACE+uB,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASu3C,OACTluB,EAAArpB,SAAS8sC,OACbxjD,EACAnyB,KAAK2vE,YAAY3b,YAAYr0D,IAE/B,MAEF,OACA,OACEwyB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASu3C,OAAQjuD,EAAMxyB,EAAO0D,IAAI,IACvD,MAEF,QACE8uB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASw3C,OAAQluD,EAAMxyB,EAAOkE,IAAI,IACvD,MAEF,QACEsuB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASy3C,OAAQnuD,EAAMxyB,EAAOmE,IAAI,IACvD,MAEF,QACE+G,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAM6oC,YAST,GARAmnB,GAAW,EACXztD,EAAOnyB,KAAK20E,kBACV/hD,EAAW6D,QACXwsC,EAAemc,WAAU,GAKvBp/E,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAE5C,GADI6P,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAaqD,YAC5C,CACZslB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAGhB,OAAQv7C,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS03C,OAAQpuD,EAAMxyB,EAAOyD,IAAI,IACvD,MAEF,OACA,OACE+uB,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACbpuD,EACAnyB,KAAK2vE,YAAY3b,YAAYr0D,IAE/B,MAEF,OACA,OACEwyB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS23C,OAAQruD,EAAMxyB,EAAO0D,IAAI,IACvD,MAEF,QACE8uB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS43C,OAAQtuD,EAAMxyB,EAAOkE,IAAI,IACvD,MAEF,QACEsuB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS63C,OAAQvuD,EAAMxyB,EAAOmE,IAAI,IACvD,MAEF,QACE+G,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMopC,YAQT,GAPA7mC,EAAOnyB,KAAK20E,kBACV/hD,EAAW6D,QACXwsC,EAAemc,WAAU,GAKvBp/E,KAAK2vE,YAAYtzD,GAAE,KAErB,GADI6P,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAasD,KAC5C,CACZqlB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAStE,EAAMS,GACrE,MAMNT,EAAOnyB,KAAKwrF,eAAer5D,EAAMnyB,KAAK2vE,aACtC3vE,KAAK2vE,YAAchmE,EAAA2H,KAAK1N,KACxB,MAEF,KAAK+rB,EAAAC,MAAMqpC,MAYT,GAXA9mC,EAAOnyB,KAAK20E,kBACV/hD,EAAW6D,QACXwsC,GAAkBt5D,EAAA2H,KAAKG,KACnB9H,EAAA2H,KAAKlO,IACL6/D,EAAe5mD,GAAE,GACf1S,EAAA2H,KAAKjO,IACL4/D,EAAc,GAKlBjjE,KAAK2vE,YAAYtzD,GAAE,KAAuB,CAC5C,IAAI6P,EAEEnB,EADN,GADImB,EAAiBlsB,KAAK2vE,YAAYzjD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeunC,EAAAzoD,aAAauD,aAC5C,CACZolB,EAAOnyB,KAAK2iF,qBAAqB53D,EAAU6H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA5yB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAShB,OAPEppB,EAAOnyB,KAAKw9E,kBAAkBrrD,EAC5BnyB,KAAK2vE,YAAa3vE,KAAK2vE,YAAY4R,SACnC,GAAO,EACP3uD,EAAW6D,SAIPz2B,KAAK2vE,YAAYv8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASk5C,OAAQ5vD,EAAMxyB,EAAOyD,KAAK,IACxD,MAEF,OACA,OACE+uB,EAAOxyB,EAAO23C,OACZt3C,KAAKoR,QAAQc,SACTggD,EAAArpB,SAASm5C,OACT9vB,EAAArpB,SAASk5C,OACb5vD,EACAnyB,KAAK2vE,YAAY1b,eAAet0D,IAElC,MAEF,OACA,OACEwyB,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASm5C,OAAQ7vD,EAAMxyB,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACEwH,QAAO,GACPsnB,EAAOxyB,EAAO47C,cAGlB,MAEF,KAAK5rB,EAAAC,MAAMunC,OAKT,OAJAn3D,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACfsU,EAAWjjB,OAENhQ,EAAO47C,cAEhB,QAEE,OADA1wC,QAAO,GACAlL,EAAO47C,cAGlB,IAAKqkC,EAAU,OAAOztD,EACtB,IAAIvjB,EAAW5O,KAAK4O,SAChBgc,EAAShc,EAASu0D,kBAAkBvwC,EAAW6D,QAASz2B,KAAK+wE,aACjE,OAAKnmD,EACE5qB,KAAK0iF,eACV93D,EACAuH,EACAS,EAAW6D,QACX7nB,EAAS+xD,sBACT/xD,EAASgyD,yBACTqC,GAAkBt5D,EAAA2H,KAAKG,MAPL9R,EAAO47C,eAY7Bi0B,EAAAvtE,UAAAw7E,uBAAA,SAAuBtrD,EAAqBnW,GAC1C,IAAIrc,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YAChB,OAAQ/0D,EAAK5I,MACX,OACMqU,EAAKikD,YAAYv5C,EAAMnW,KACzBmW,EAAOnyB,KAAKoR,QAAQW,WAAU,GAC1BpS,EAAOw3C,MAAM+a,EAAA3uB,QAAQkoD,cAAet5D,GACpCxyB,EAAO23C,OAAO4a,EAAArpB,SAASglC,OACrBluE,EAAO23C,OAAO4a,EAAArpB,SAAS+kC,OACrBz7C,EACAxyB,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACMqkB,EAAKikD,YAAYv5C,EAAMnW,KACzBmW,EAAOnyB,KAAKoR,QAAQW,WAAU,GAC1BpS,EAAOw3C,MAAM+a,EAAA3uB,QAAQmoD,eAAgBv5D,GACrCxyB,EAAO23C,OAAO4a,EAAArpB,SAASglC,OACrBluE,EAAO23C,OAAO4a,EAAArpB,SAAS+kC,OACrBz7C,EACAxyB,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACMqkB,EAAKikD,YAAYv5C,EAAMnW,KACzBmW,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS8kC,OAC5Bx7C,EACAxyB,EAAOyD,IAAI,OAGf,MAEF,OACMqkB,EAAKikD,YAAYv5C,EAAMnW,KACzBmW,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS8kC,OAC5Bx7C,EACAxyB,EAAOyD,IAAI,SAGf,MAEF,QACMqkB,EAAKikD,YAAYv5C,EAAMnW,KAEzBmW,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS2iC,MAC5Br5C,EACAxyB,EAAOyD,IAAI,KAMnB,OAAO+uB,GAITq9C,EAAAvtE,UAAA03E,iBAAA,SAAiBxnD,EAAqBxiB,GACpC,IAAIs4D,EAAiBjoE,KAAK+wE,YAAY9I,eAClCl1D,EAASpD,EAAMoD,OACfA,EAAOoV,eAAiB,IAAGpV,EAAOoV,eAAiBnoB,KAAKL,OAAO0mD,iBAAiBtzC,EAAOwQ,iBAC3F5T,EAAMuY,aAAeiK,EACrB81C,EAAe/hD,eAAe3H,KAAK5O,IAMrC6/D,EAAAvtE,UAAAupF,eAAA,SAAer5D,EAAqBnW,GAClC,IAAIrc,EAASK,KAAKL,OAClB,OAAQqc,EAAK5I,MACX,OACA,OACA,OACA,OACA,QACE+e,EAAOnyB,KAAKy9E,uBAAuBtrD,EAAMnW,GAG3C,OACA,OACE,OAAOrc,EAAOw3C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQh5C,GAEtC,OACA,OACE,OAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ6nC,OAAQj5C,GAEtC,OAAyBnyB,KAAKkwE,oBAAoBh/D,IAAIihB,KAAOA,EAAOnyB,KAAKqjF,gBAAgBlxD,IACzF,OACE,OAAOxyB,EAAOw3C,MAAmB,IAAbn7B,EAAK0/B,KAAawW,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OAAQh5C,GAEzE,QACE,OAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASijC,MAAO35C,EAAMxyB,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAO23C,OAAO4a,EAAArpB,SAASkjC,MAAO55C,EAAMxyB,EAAOmE,IAAI,IAExD,QAEE,OADA+G,QAAO,GACAlL,EAAOyD,IAAI,KAMxBosE,EAAAvtE,UAAAk4E,cAAA,SAAchoD,EAAqBnW,GACjC,IAAIrc,EAASK,KAAKL,OAClB,OAAQqc,EAAK5I,MACX,OACA,OACA,OACA,OACE+e,EAAOnyB,KAAKy9E,uBAAuBtrD,EAAMnW,GAG3C,QACA,OACA,OACE,OAAOmW,EAET,OACA,OACE,OAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAAS4iC,MAAOt5C,EAAMxyB,EAAO0D,IAAI,IAExD,OAAyBrD,KAAKkwE,oBAAoBh/D,IAAIihB,KAAOA,EAAOnyB,KAAKqjF,gBAAgBlxD,IACzF,OACE,OAAoB,IAAbnW,EAAK0/B,KACR/7C,EAAO23C,OAAO4a,EAAArpB,SAAS4iC,MAAOt5C,EAAMxyB,EAAO0D,IAAI,IAC/C8uB,EAEN,QACE,OAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASmjC,MAAO75C,EAAMxyB,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAO23C,OAAO4a,EAAArpB,SAASojC,MAAO95C,EAAMxyB,EAAOmE,IAAI,IAExD,QAEE,OADA+G,QAAO,GACAlL,EAAOyD,IAAI,KAMxBosE,EAAAvtE,UAAAu0E,eAAA,SACEpnE,GAGA,IAAIwT,EAAU5iB,KAAK4iB,QACnB/X,OAAOuE,EAAcwT,SAAWA,GAChC,IAAIjjB,EAASK,KAAKL,OACdyR,EAAUpR,KAAKoR,QACnBpR,KAAK2vE,YAAcvgE,EAAc4M,KACjC,IAAItC,EAAgBkJ,EAAQlJ,cAE5B,OADA1Z,KAAK61E,gBAAgBn8D,GACd/Z,EAAOa,KAAKkZ,EAAc/K,aAAc,CAC7CyC,EAAQc,SACJvS,EAAO0D,IAAI+L,EAAcua,qBACzBhqB,EAAOyD,IAAIgM,EAAcua,qBAC7BhqB,EAAOyD,IACLgM,EAAc+I,aAAa85C,EAAA5kD,eAAekL,WACtC,EACAnJ,EAAcG,KAEnB6B,EAAQgiE,iBAIb5D,EAAAvtE,UAAAw0E,wBAAA,SACErnE,EACA4mE,gBAAA,IAAAA,MAAA,IAEA,IAAIn6D,EAAUzM,EAAcyM,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAIlc,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACZuE,EAAW7tD,EAAKpL,GAAE,OAClBsvE,EAAiBrW,EACjBzqE,OAAO4c,EAAKu9C,YAAYv7D,EAAAzG,cAAcoC,QAAQ6f,MAC9C,EACAmuD,EAAiBpzE,KAAKoR,QAAQgiE,mBAElC,IAAmB,IAAArvD,EAAArP,EAAAmH,EAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAAhC,IAAIyG,EAAMF,EAAA7Z,MACb,GACE+Z,EAAOjI,MAAQ6+C,EAAA7kD,YAAYuO,OAC3BN,EAAOzK,QAAUxB,EAFnB,CAKA,IAAI8b,EAAe7P,EAAQxQ,QAAQqgB,EAAMpM,MAAMrV,EAAApH,YAAYma,QAC3D,IAAIwqD,EAAY97C,EAAMlP,KAClB6nE,EAAkB7c,EAAUlT,eAC5B4gB,EAAkBxpD,EAAMjpB,UAAUyyE,gBACtC,GAAIA,EAAiB,CACnB,IAAIF,EAAWx0E,KAAK20E,kBAAkBD,EAAiB1N,EACrD,IAEEA,EAAUiM,YAAcjzE,KAAKkwE,oBAAoBh/D,IAAIsjE,KACvDA,EAAWx0E,KAAKkzE,WAAWsB,IAE7BwB,EAAMz3D,KACJ5e,EAAOs3C,MAAM+vB,EAAUzU,SACrB5yD,EAAOi4C,UAAU+zC,EAAgBvY,GACjCoB,EACAqP,EACA34D,EAAMrC,mBAGL,CACL,IAAIF,EAAiBuC,EAAMjpB,UAAU0mB,eACrCqtD,EAAMz3D,KACJ5e,EAAOs3C,MAAM+vB,EAAUzU,SACrB5yD,EAAOi4C,UAAU+zC,EAAgBvY,GACjCzqD,GAAkB,EACdhpB,EAAOi4C,UACL09B,EACIzqE,OAAO4c,EAAKu9C,YAAY95C,EAAMtqB,OAAOqkB,MACrC,EAAI0D,EACRk7D,GAEF7c,EAAUjT,aAAap0D,GAC3BkkF,EACA34D,EAAMrC,mHAKd,OAAOmtD,GAGTxG,EAAAvtE,UAAA2pF,oBAAA,SACEz5D,EACA/iB,GAEA,IAAIzP,EAASK,KAAKL,OACd8nB,EAAOznB,KAAK+wE,YACZ8a,EAASpkE,EAAKihD,aAAa/+D,EAAA2H,KAAKlO,KAChC0oF,EAASnsF,EAAOu4C,KAAK,GAAG,EAC1Bv4C,EAAO23C,OAAO4a,EAAArpB,SAAS03C,OACrBpuD,EACAxyB,EAAOyD,IAAIpD,KAAK4iB,QAAQ60D,oBAE1BvlB,EAAAjyB,WAAW75B,KAET4wB,EAAQ,cAAgB5nB,EAAcxO,KAAO,IAAM6mB,EAAKuiD,iBACxD+hB,EAA8B,GAmBlC,OAlBAA,EAAWxtE,KACT5e,EAAOw6C,KACLx6C,EAAOs6C,GAAGjjB,EACRr3B,EAAO23C,OAAO4a,EAAArpB,SAASyiC,MACrB3rE,EAAOm4C,UAAU+zC,EAAO5mE,MAAO6mE,GAC/BnsF,EAAOyD,IAAIgM,EAAcG,KAE3B5P,EAAOyD,IAAI,MAMjB2oF,EAAWxtE,KACT5e,EAAOyD,IAAI,IAEbqkB,EAAK0hD,cAAc0iB,GACnBpkE,EAAKyiD,gBACEvqE,EAAOm6C,MAAM9iB,EAAO+0D,EAAY75B,EAAAjyB,WAAW75B,MAEtDopE,EA5/QA,CAA8B9lE,EAAAgZ,mBAggR9B,SAASsyD,EACPv/D,EACAxE,GAQA,GALAq+D,EAA8Br+D,EAAYtB,MAAMoD,OAAOurB,WAEvDixC,EAA+Btd,EAAA/tC,mBAC7BzO,EAAQ7U,KAAM6U,EAAQ7E,OAAQ6E,EAAQ4G,GAAG5S,EAAApH,YAAY+f,WAAW,GAE7D3M,EAAQ0C,aAAa85C,EAAA5kD,eAAe8U,UAAzC,CAEA,IAAIS,EAAUnN,EAAQmN,QAClBpF,EAAY3S,OAAOjB,EAAAm2B,cAAcn2B,EAAAmB,cAAcoX,SAAUlR,EAAYqM,aACrEqU,EAAOnU,EAAU0C,UACrB,GAAIyR,GAAQA,EAAK7mB,OAAQ,CACvB,IAAIF,EAAM+mB,EAAK,GAGX/mB,EAAIwI,MAAQxJ,EAAAyJ,SAAS+M,SAA+BxV,EAAKyV,aAAezW,EAAA0W,YAAYC,QACtFgvD,EAAyD3kE,EAAKtJ,MAC1DqwB,EAAK7mB,QAAU,KACjBF,EAAM+mB,EAAK,IACHve,MAAQxJ,EAAAyJ,SAAS+M,SAA+BxV,EAAKyV,aAAezW,EAAA0W,YAAYC,QACtF+uD,EAA8BC,EAC9BA,EAAyD3kE,EAAKtJ,MAC1DqwB,EAAK7mB,OAAS,GAChB8X,EAAQvN,MACN3L,EAAA4L,eAAeuL,+BACfrD,EAAU7N,MAAO,IAAKgiB,EAAK7mB,OAAOgT,aAItC8E,EAAQvN,MACN3L,EAAA4L,eAAesL,wBACfhW,EAAI+E,SAKViT,EAAQvN,MACN3L,EAAA4L,eAAesL,wBACfhW,EAAI+E,YAIRiT,EAAQvN,MACN3L,EAAA4L,eAAegwE,wCACf9nE,EAAU7N,MAAO,IAAK,MAS5B,SAAgBmnE,EAAQn3E,EAAgBq2E,EAAwBh6D,GAC9D,IAAIlR,EAASkrE,EAAMlrE,OACnB,GAAc,GAAVA,EAAa,OAAOnL,EAAO86C,MAC/B,GAAc,GAAV3vC,EAAa,CACf,IAAIkhF,EAAShW,EAAM,GACnB,GAAI9jB,EAAAnL,kBAAkBilC,IAAWhwE,EAAM,OAAOgwE,EAC9C,GAAI95B,EAAApL,gBAAgBklC,IAAW95B,EAAAhyB,aAAakuB,MAAO,CAGjD,IAFA,IAAI4tB,EAAQ9pB,EAAAlJ,mBAAmBgjC,GAC3BjyC,EAAW,IAAI9yC,MAAqB+0E,GAC/B37E,EAAI,EAAGA,EAAI27E,IAAS37E,EAAG05C,EAAS15C,GAAK6xD,EAAAhJ,cAAc8iC,EAAQ3rF,GACpE,OAAOV,EAAOm6C,MAAMoY,EAAApJ,aAAakjC,GAASjyC,EAAU/9B,IAGxD,OAAOrc,EAAOm6C,MAAM,KAAMk8B,EACxBh6D,GAAQk2C,EAAAjyB,WAAWgsD,KACf/5B,EAAAnL,kBAAkBivB,EAAMlrE,EAAS,IACjCkR,GAzkRKtc,EAAA8vE,WAyjRb9vE,EAAAo3E,yFC7zRA,SAAYxhE,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,uEACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,mFACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,6FACAA,IAAA,+FACAA,IAAA,iGACAA,IAAA,2DACAA,IAAA,iIACAA,IAAA,yDACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,8FACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,kIACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,oMACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,gIACAA,IAAA,8HACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,sMACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,wDACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0IACAA,IAAA,kDACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HACAA,IAAA,6KACAA,IAAA,2MAtIF,CAAY5V,EAAA4V,iBAAA5V,EAAA4V,eAAc,KA0I1B5V,EAAAouB,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,mkBCrRnB,IAoFgBo3C,EApFhB6mB,EAAA/rF,EAAA,IAODuJ,EAAAvJ,EAAA,GAIAyJ,EAAAzJ,EAAA,GAUAwJ,EAAAxJ,EAAA,GAOA+xD,EAAA/xD,EAAA,GAsBA8xD,EAAA9xD,EAAA,GASA4J,EAAA5J,EAAA,IAKA2J,EAAA3J,EAAA,GAIAsJ,EAAAtJ,EAAA,GAMA0J,EAAA1J,EAAA,GAubA,SAAgB+kF,EAEdiH,EAEAlqF,EAEAunB,EAEAiuB,EAEAwrB,EAEAmD,EAEAgmB,QAAA,IAAAA,OAAA,GAEA,IAAIzsF,EAASwsF,EAASxsF,OAUlB0sF,GAAY,EAEhB,OAAQpqF,EAAU0M,cAIhB,KAAK02D,EAAeinB,UAClB,IAAItwE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACEA,EAAKK,GAAE,KAAwBL,EAAKK,GAAE,KACzC1c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO47C,cAK3B,KAAK8pB,EAAemnB,QACdxwE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACEA,EAAKK,GAAE,GACV1c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO47C,cAK3B,KAAK8pB,EAAeonB,UACdzwE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACEA,GAAQrS,EAAA2H,KAAK1N,KAChBjE,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO47C,cAK3B,KAAK8pB,EAAeqnB,SACd1wE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACEA,EAAKK,GAAE,GACV1c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO47C,cAK3B,KAAK8pB,EAAesnB,YACd3wE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACEA,EAAKK,GAAE,KACV1c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO47C,cAK3B,KAAK8pB,EAAeunB,SACd5wE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,GADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,MACvBoY,EAAM,OAAOrc,EAAO47C,cAEzB,GADI6X,EAAYp3C,EAAKkQ,eACN,CACb,IAAInV,EAAiBo1E,EAASvpE,QAAQ7L,eACtC,GAAIA,GAAkBq8C,EAAUzoC,eAAe5T,GAAiB,OAAOpX,EAAOyD,IAAI,GAEpF,OAAOzD,EAAOyD,IAAI,GAEpB,KAAKiiE,EAAewnB,QACd7wE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,GADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,MACvBoY,EAAM,OAAOrc,EAAO47C,cAEzB,KADIrvB,GAAiBlQ,EAAKkQ,gBACL,OAAOvsB,EAAOyD,IAAI,GACvC,IAAI4c,EAAiBkM,GAAejqB,UACpC,OAAOtC,EAAOyD,IAAI4c,EAAeqJ,QAAQ8iE,EAASvpE,QAAQxJ,gBAAkB,EAAI,GAElF,KAAKisD,EAAeynB,YACd9wE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,GACDkQ,GAAiBlQ,EAAKkQ,gBAEnBvsB,EAAOyD,IAAI8oB,GAAe4gE,YAAc,EAAI,GADvBntF,EAAOyD,IAAI,GAFrBzD,EAAO47C,cAK3B,KAAK8pB,EAAe0nB,WACd/wE,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACErc,EAAOyD,IAAI4Y,EAAKy2C,mBAAqB,EAAI,GAD9B9yD,EAAO47C,cAG3B,KAAK8pB,EAAex0C,WACd7U,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACErc,EAAOyD,IAAI4Y,EAAKK,GAAE,KAAuB,EAAI,GADlC1c,EAAO47C,cAG3B,KAAK8pB,EAAe2nB,UAElB,GADAb,EAASxc,YAAchmE,EAAA2H,KAAK1N,KAE1BqpF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAI9lC,EAAU02E,EAASv9E,SAASu0D,kBAC9B1rB,EAAS,GACT00C,EAASpb,YACTpnE,EAAA2H,KAAKG,KACL3H,EAAA22D,WAAW0sB,SAEb,OAAOxtF,EAAOyD,IAAIqS,EAAU,EAAI,GAElC,KAAK4vD,EAAe+nB,WAElB,GADAjB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KAE1BqpF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAIppB,EAAOg6D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKyhD,MAExD,OADAo5B,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACrBjE,EAAOyD,IAAI8uD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAAQ,EAAI,GAEtE,KAAKygB,EAAe4N,UACdj3D,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACvBoY,EACErc,EAAOyD,IAAI4Y,EAAKi3D,UAAY,EAAI,GADrBtzE,EAAO47C,cAG3B,KAAK8pB,EAAegoB,OAElB,GADAlB,EAASxc,YAAcwc,EAAS/6E,QAAQI,UAEtC87E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAIgX,EAAoB/oC,EAAe,GAAG+oC,SACtCpgC,OAAI,EAkBR,OAjBIg6D,EAAS/6E,QAAQc,SAEf+wD,EAAe5mD,GAAE,IAAuB4mD,EAAevnB,MAAQ,IACjEywC,EAASxc,YAAchmE,EAAA2H,KAAK7N,IAC5B0uB,EAAOxyB,EAAOyD,IAAImvD,IAElBpgC,EAAOxyB,EAAO0D,IAAIkvD,EAAU,GAI1B0Q,EAAe5mD,GAAE,IAA8C,IAAvB4mD,EAAevnB,MACzDywC,EAASxc,YAAchmE,EAAA2H,KAAK5N,IAC5ByuB,EAAOxyB,EAAO0D,IAAIkvD,EAAU,IAE5BpgC,EAAOxyB,EAAOyD,IAAImvD,GAGfpgC,EAET,KAAKkzC,EAAekoB,QAElB,GADApB,EAASxc,YAAcwc,EAAS/6E,QAAQI,UAEtC87E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZgX,EAAoB/oC,EAAe,GAAG+oC,SAC1C1nD,OAAOhB,EAAAmjB,WAAWulC,IAClB,IAAIw3B,EAAYyD,IAASj7B,GACrBpgC,OAAI,EAkBR,OAjBIg6D,EAAS/6E,QAAQc,SAEf+wD,EAAe5mD,GAAE,IAAuB4mD,EAAevnB,MAAQ,IACjEywC,EAASxc,YAAchmE,EAAA2H,KAAK7N,IAC5B0uB,EAAOxyB,EAAOyD,IAAI2mF,IAElB53D,EAAOxyB,EAAO0D,IAAI0mF,EAAW,GAI3B9mB,EAAe5mD,GAAE,IAA8C,IAAvB4mD,EAAevnB,MACzDywC,EAASxc,YAAchmE,EAAA2H,KAAK5N,IAC5ByuB,EAAOxyB,EAAO0D,IAAI0mF,EAAW,IAE7B53D,EAAOxyB,EAAOyD,IAAI2mF,GAGf53D,EAET,KAAKkzC,EAAer6C,SAElB,GADAmhE,EAASxc,YAAcwc,EAAS/6E,QAAQI,UAEtC87E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cAChB,IAAI6X,EACJ,KADIA,EAAY5pC,EAAe,GAAG0C,gBAMhC,OAJAigE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEhB,IAAIpsC,OAAM,EACV,GAAIsoC,EAAS3sC,OAAQ,CACnB,GACE2sC,EAAS,GAAGrkC,MAAQxJ,EAAAyJ,SAAS+M,SACTq3B,EAAS,GAAIp3B,aAAezW,EAAA0W,YAAYC,OAM5D,OAJA4rE,EAAS92E,MACP3L,EAAA4L,eAAesL,wBACf62B,EAAS,GAAG9nC,OAEPhQ,EAAO47C,cAEhB,IAAItwB,EAAsCwsB,EAAS,GAAIn2C,MACnD4pB,EAAQkoC,EAAUv3C,QAAUu3C,EAAUv3C,QAAQ3a,IAAI+pB,GAAa,KACnE,IAAMC,GAASA,EAAM9X,MAAQ6+C,EAAA7kD,YAAYuO,MAKvC,OAJAwwE,EAAS92E,MACP3L,EAAA4L,eAAeq4E,yBACfl2C,EAAS,GAAG9nC,MAAOyjD,EAAUzkD,aAAcsc,GAEtCtrB,EAAO47C,cAEhBpsC,EAAiB+b,EAAOrC,kBAExB1Z,EAASikD,EAAUzpC,oBAErB,OAAIwiE,EAAS/6E,QAAQc,SAEf+wD,EAAe5mD,GAAE,IAAuB4mD,EAAevnB,MAAQ,IACjEywC,EAASxc,YAAchmE,EAAA2H,KAAK7N,IACrB9D,EAAOyD,IAAI+L,IAEXxP,EAAO0D,IAAI8L,GAIhB8zD,EAAe5mD,GAAE,IAA8C,IAAvB4mD,EAAevnB,MACzDywC,EAASxc,YAAchmE,EAAA2H,KAAK5N,IACrB/D,EAAO0D,IAAI8L,IAEXxP,EAAOyD,IAAI+L,GAOxB,KAAKk2D,EAAerS,IACpB,KAAKqS,EAAemoB,IACpB,KAAKnoB,EAAeuoB,OAClB,GACEC,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAIntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,GAEpD,IADI4Y,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEhB,IAAInE,GAAe,EACnB,OAAQn1C,EAAU0M,cAChB,KAAK02D,EAAerS,IAClB,OAAQh3C,EAAK5I,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQ2qC,OAAQ,MAC1C,OACA,OACE92B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQuqD,OACR57B,EAAA3uB,QAAQ2qC,OACZ,MAEF,OACA,OAAqB92B,EAAK8a,EAAA3uB,QAAQuqD,OAEpC,MAEF,KAAKzoB,EAAemoB,IAClB,OAAQxxE,EAAK5I,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQ4qC,OAAQ,MAC1C,OACA,OACE/2B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQwqD,OACR77B,EAAA3uB,QAAQ4qC,OACZ,MAEF,OACA,OAAqB/2B,EAAK8a,EAAA3uB,QAAQwqD,OAEpC,MAEF,KAAK1oB,EAAeuoB,OAClB,OAAQzB,EAASxc,YAAYv8D,MAC3B,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQ6qC,UAAW,MAC7C,OACA,OACEh3B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQyqD,UACR97B,EAAA3uB,QAAQ6qC,UACZ,MAEF,OACA,OAAqBh3B,EAAK8a,EAAA3uB,QAAQyqD,WAKxC,OAAW,GAAP52C,GACF+0C,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,eAET57C,EAAOw3C,MAAMC,EAAIhpB,GAE1B,KAAKi3C,EAAe4oB,KAClB,GACEJ,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,GAEpD,IADI4Y,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEhB,IAAIltB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GACnDmW,OAAI,EACR,OAAQnW,EAAK5I,MACX,OACA,OACA,OACA,OACA,QACE+e,EAAOg6D,EAAS1O,uBACd99E,EAAO23C,OAAO4a,EAAArpB,SAASqlD,QAAS9/D,EAAMC,GACtCrS,GAIJ,OACA,OACEmW,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASqlD,QAAS9/D,EAAMC,GAC7C,MAEF,OACA,OACE8D,EAAOxyB,EAAO23C,OACZ60C,EAAS/6E,QAAQc,SACbggD,EAAArpB,SAASslD,QACTj8B,EAAArpB,SAASqlD,QACb9/D,EAAMC,GAER,MAEF,OACA,OACE8D,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASslD,QAAS//D,EAAMC,GAC7C,MAEF,QACE89D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAIlB,OAAOppB,EAET,KAAKkzC,EAAe+oB,KAClB,GACEP,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,GAEpD,IADI4Y,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZltB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GACnDmW,OAAI,EACR,OAAQnW,EAAK5I,MACX,OACA,OACA,OACA,OACA,QACE+e,EAAOg6D,EAAS1O,uBACd99E,EAAO23C,OAAO4a,EAAArpB,SAASwlD,QAASjgE,EAAMC,GACtCrS,GAEF,MAEF,OACA,OACEmW,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASwlD,QAASjgE,EAAMC,GAC7C,MAEF,OACA,OACE8D,EAAOxyB,EAAO23C,OACZ60C,EAAS/6E,QAAQc,SACbggD,EAAArpB,SAASylD,QACTp8B,EAAArpB,SAASwlD,QACbjgE,EAAMC,GAER,MAEF,OACA,OACE8D,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASylD,QAASlgE,EAAMC,GAC7C,MAEF,QACE89D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAIlB,OAAOppB,EAET,KAAKkzC,EAAekpB,IAClB,GACEV,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZppB,OAAI,EACR,OAAQnW,EAAK5I,MACX,OACA,OACA,OACE,IAGIo7E,GAHA/mE,EAAO0kE,EAASpb,aAGErI,aAAa/+D,EAAA2H,KAAKlO,KACpCqrF,EAAkBhnE,EAAK2hD,oBAAoBz/D,EAAA2H,KAAKlO,KAAK6hB,MACrDypE,EAAkBF,EAAWvpE,MAGjCkN,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASk5C,OAC5BpiF,EAAO23C,OAAO4a,EAAArpB,SAAS8sC,OACrBh2E,EAAOm4C,UACL22C,EACA9uF,EAAO23C,OAAO4a,EAAArpB,SAASglC,OACrBluE,EAAOm4C,UAAU42C,EAAiBtgE,GAClCzuB,EAAOyD,IAAI,MAGfzD,EAAOi4C,UAAU82C,EAAiBx8B,EAAAjyB,WAAW75B,MAE/CzG,EAAOi4C,UAAU62C,EAAiBv8B,EAAAjyB,WAAW75B,MAG/CqhB,EAAK0hD,cAAcqlB,GACnB,MAEF,OACE,IAAIp9E,EAAU+6E,EAAS/6E,QACnBqW,EAAO0kE,EAASpb,YAChB4d,EAASv9E,EAAQc,SAEjBs8E,EAAa/mE,EAAKihD,aAAat3D,EAAQI,WACvCi9E,EAAkBhnE,EAAK2hD,oBAAoBh4D,EAAQI,WAAWyT,MAC9DypE,EAAkBF,EAAWvpE,MAEjCkN,EAAOxyB,EAAO23C,OAAOq3C,EAASz8B,EAAArpB,SAASm5C,OAAS9vB,EAAArpB,SAASk5C,OACvDpiF,EAAO23C,OAAOq3C,EAASz8B,EAAArpB,SAASu3C,OAASluB,EAAArpB,SAAS8sC,OAChDh2E,EAAOm4C,UACL22C,EACA9uF,EAAO23C,OAAOq3C,EAASz8B,EAAArpB,SAAS64C,OAASxvB,EAAArpB,SAASglC,OAChDluE,EAAOm4C,UAAU42C,EAAiBtgE,GAClCugE,EAAShvF,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAGzCzD,EAAOi4C,UAAU82C,EAAiBt9E,EAAQgiE,iBAE5CzzE,EAAOi4C,UAAU62C,EAAiBr9E,EAAQgiE,iBAG5C3rD,EAAK0hD,cAAcqlB,GACnB,MAEF,OAGMA,GAFA/mE,EAAO0kE,EAASpb,aAEErI,aAAa/+D,EAAA2H,KAAKjO,KACpCorF,EAAkBhnE,EAAK2hD,oBAAoBz/D,EAAA2H,KAAKjO,KAAK4hB,MACrDypE,EAAkBF,EAAWvpE,MAGjCkN,EAAOxyB,EAAO23C,OAAO4a,EAAArpB,SAASm5C,OAC5BriF,EAAO23C,OAAO4a,EAAArpB,SAASu3C,OACrBzgF,EAAOm4C,UACL22C,EACA9uF,EAAO23C,OAAO4a,EAAArpB,SAAS64C,OACrB/hF,EAAOm4C,UAAU42C,EAAiBtgE,GAClCzuB,EAAO0D,IAAI,MAGf1D,EAAOi4C,UAAU82C,EAAiBx8B,EAAAjyB,WAAW55B,MAE/C1G,EAAOi4C,UAAU62C,EAAiBv8B,EAAAjyB,WAAW55B,MAG/CohB,EAAK0hD,cAAcqlB,GACnB,MAEF,OACA,OACA,OACA,OACA,OACA,QACEr8D,EAAO/D,EACP,MAEF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQqrD,OAAQxgE,GACpC,MAEF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQsrD,OAAQzgE,GACpC,MAEF,QACE+9D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAIlB,OAAOppB,EAET,KAAKkzC,EAAe2F,IAClB,GACE6iB,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZltB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAM,GACrDo7B,OAAE,EACN,OAAQp7B,EAAK5I,MACX,OACA,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAASikC,MAAO,MAC1C,OACA,OACA,OACA,QAAsB11B,EAAK8a,EAAArpB,SAASkkC,MAAO,MAC3C,OAAqB31B,EAAK8a,EAAArpB,SAASmkC,MAAO,MAC1C,OAAqB51B,EAAK8a,EAAArpB,SAASokC,MAAO,MAC1C,OACE71B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAArpB,SAASmkC,MACT9a,EAAArpB,SAASikC,MACb,MAEF,OACE11B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAArpB,SAASokC,MACT/a,EAAArpB,SAASkkC,MACb,MAEF,QACE,OAAOptE,EAAO23C,OAAO4a,EAAArpB,SAASimD,OAAQ1gE,EAAMC,GAE9C,QACE,OAAO1uB,EAAO23C,OAAO4a,EAAArpB,SAASkmD,OAAQ3gE,EAAMC,GAE9C,QAKE,OAJA89D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAGd9zB,EAAO0kE,EAASpb,YAApB,IACIoC,EAAan3D,EAAK83C,eAClBk7B,EAAavnE,EAAKihD,aAAa1sD,GACnCyL,EAAKwhD,aAAa+lB,EAAW/pE,MAAOlb,EAAA29D,WAAWiE,SAC3C6iB,EAAa/mE,EAAK2hD,oBAAoBptD,GAG1C,OAFAyL,EAAKwhD,aAAaulB,EAAWvpE,MAAOlb,EAAA29D,WAAWiE,SAC/ClkD,EAAK0hD,cAAc6lB,GACZrvF,EAAOk7C,OACZl7C,EAAOm4C,UAAUk3C,EAAW/pE,MAAOmJ,GACnCzuB,EAAOm4C,UAAU02C,EAAWvpE,MAAOoJ,GACnC1uB,EAAO23C,OAAOF,EACZz3C,EAAOi4C,UAAUo3C,EAAW/pE,MAAOkuD,GACnCxzE,EAAOi4C,UAAU42C,EAAWvpE,MAAOkuD,KAIzC,KAAK9N,EAAe4pB,IAClB,GACEpB,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZltB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAM,GACrDo7B,OAAE,EACN,OAAQp7B,EAAK5I,MACX,OACA,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAASqjC,MAAO,MAC1C,OACA,OACA,OACA,QAAsB90B,EAAK8a,EAAArpB,SAASsjC,MAAO,MAC3C,OAAsB/0B,EAAK8a,EAAArpB,SAASujC,MAAO,MAC3C,OAAsBh1B,EAAK8a,EAAArpB,SAASwjC,MAAO,MAC3C,OACEj1B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAArpB,SAASujC,MACTla,EAAArpB,SAASqjC,MACb,MAEF,OACE90B,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAArpB,SAASwjC,MACTna,EAAArpB,SAASsjC,MACb,MAEF,QACE,OAAOxsE,EAAO23C,OAAO4a,EAAArpB,SAASqmD,OAAQ9gE,EAAMC,GAE9C,QACE,OAAO1uB,EAAO23C,OAAO4a,EAAArpB,SAASsmD,OAAQ/gE,EAAMC,GAE9C,QAKE,OAJA89D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAGd9zB,EAAO0kE,EAASpb,YAChBoC,EAAan3D,EAAK83C,eAClBk7B,EAAavnE,EAAKihD,aAAa1sD,GACnCyL,EAAKwhD,aAAa+lB,EAAW/pE,MAAOlb,EAAA29D,WAAWiE,SAC3C6iB,EAAa/mE,EAAK2hD,oBAAoBptD,GAG1C,OAFAyL,EAAKwhD,aAAaulB,EAAWvpE,MAAOlb,EAAA29D,WAAWiE,SAC/ClkD,EAAK0hD,cAAc6lB,GACZrvF,EAAOk7C,OACZl7C,EAAOm4C,UAAUk3C,EAAW/pE,MAAOmJ,GACnCzuB,EAAOm4C,UAAU02C,EAAWvpE,MAAOoJ,GACnC1uB,EAAO23C,OAAOF,EACZz3C,EAAOi4C,UAAUo3C,EAAW/pE,MAAOkuD,GACnCxzE,EAAOi4C,UAAU42C,EAAWvpE,MAAOkuD,KAIzC,KAAK9N,EAAe7S,KACpB,KAAK6S,EAAe+pB,MAClB,GACEvB,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,GACxD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZnE,OAAE,EACN,OAAQp7B,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,OAAOgb,EAC3B,QACEgpB,EAAKn1C,EAAU0M,cAAgB02D,EAAe7S,KAC1CN,EAAA3uB,QAAQ8rD,QACRn9B,EAAA3uB,QAAQ+rD,SACZ,MAEF,QACEl4C,EAAKn1C,EAAU0M,cAAgB02D,EAAe7S,KAC1CN,EAAA3uB,QAAQgsD,QACRr9B,EAAA3uB,QAAQisD,SACZ,MAEF,QAKE,OAJArD,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAGlB,OAAO57C,EAAOw3C,MAAMC,EAAIhpB,GAE1B,KAAKi3C,EAAeoqB,SAClB,GACE5B,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,GACxD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZltB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GACnDo7B,OAAE,EACN,OAAQp7B,EAAK5I,MAEX,QAAqBgkC,EAAK8a,EAAArpB,SAAS6mD,YAAa,MAChD,QAAqBt4C,EAAK8a,EAAArpB,SAAS8mD,YAAa,MAChD,QAKE,OAJAxD,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAGlB,OAAO57C,EAAO23C,OAAOF,EAAIhpB,EAAMC,GAEjC,KAAKg3C,EAAeuqB,QAClB,GACE/B,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,GACxD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZppB,OAAI,EACR,OAAQnW,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAO/D,EACP,MAEF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQssD,WAAYzhE,GACxC,MAEF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQusD,WAAY1hE,GACxC,MAEF,QACE+9D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAIlB,OAAOppB,EAET,KAAKkzC,EAAe0qB,YAClB,GACEzC,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAEhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAASxc,YAAc3zD,EACvBmwE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZppB,OAAI,EACR,OAAQnW,EAAK5I,MACX,OACA,OACMgb,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKzN,IAAG,GAC3DsuB,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQysD,eAAgB5hE,GAC5C,MAEF,OACA,OACMA,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAC3DquB,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ0sD,eAAgB7hE,GAC5C,MAEF,OACA,OACMA,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQc,SACbvI,EAAA2H,KAAKxN,IACL6F,EAAA2H,KAAKzN,IAAG,GAGdsuB,EAAOxyB,EAAOw3C,MACZg1C,EAAS/6E,QAAQc,SACbggD,EAAA3uB,QAAQ0sD,eACR/9B,EAAA3uB,QAAQysD,eACZ5hE,GAEF,MAEF,QACMA,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,GAC3D+uB,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ2sD,eAAgB9hE,GAC5C,MAEF,QACMA,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKjO,IAAG,GAC3D8uB,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ4sD,eAAgB/hE,GAC5C,MAEF,QACE+9D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAKlB,OADA4wC,EAASxc,YAAc3zD,EAChBmW,EAET,KAAKkzC,EAAe+qB,KAClB,GACEvC,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,GACxD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAMT,OALA8vE,EAASxc,YAAc3zD,EACvBmwE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZppB,OAAI,EACR,OAAQnW,EAAK5I,MACX,QACE+e,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ8sD,QAASjiE,GACrC,MAEF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQ+sD,QAASliE,GACrC,MAEF,QACE+9D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAIlB,OAAOppB,EAET,KAAKkzC,EAAekrB,MAClB,GACE1C,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,GACxD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAEpD,IADIkY,EAAOmwE,EAASxc,aACXtzD,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,OAENhQ,EAAO47C,cAEZppB,OAAI,EACR,OAAQnW,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAO/D,EACP,MAGF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQitD,SAAUpiE,GACtC,MAEF,QACE+D,EAAOxyB,EAAOw3C,MAAM+a,EAAA3uB,QAAQktD,SAAUriE,GACtC,MAEF,QACE+9D,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAOxyB,EAAO47C,cAIlB,OAAOppB,EAKT,KAAKkzC,EAAentB,KAClB,GACEo1C,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cACZv/B,EAAOwN,EAAe,GAA1B,IACIknE,EACFztB,GAAkBt5D,EAAA2H,KAAKyhD,MACvB/2C,EAAKK,GAAE,IACP4mD,EAAe5mD,GAAE,IACjB4mD,EAAevnB,KAAO1/B,EAAK0/B,KACzBunB,EAAiBjnD,EACjBoS,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAK5B,IADIm/E,GADA1I,GAAcxwC,EAAS3sC,SACI,EAAI8lF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACpE,EAEd,OADAA,EAASxc,YAAc+gB,EAChB/wF,EAAO47C,cAEhB,IAAIs1C,OAAQ,EACRC,EAAe90E,EAAKu2C,SACxB,GAAmB,GAAf01B,GAAkB,CAEpB,IADA4I,EAAWD,EAAwBn5C,EAAS,GAAI00C,IACjC,EAEb,OADAA,EAASxc,YAAc+gB,EAChB/wF,EAAO47C,cAEhB,GAAIs1C,EAAWC,EAMb,OALA3E,EAAS92E,MACP3L,EAAA4L,eAAey7E,6CACft5C,EAAS,GAAG9nC,MAAO,YAAa,IAAKmhF,EAAahzE,YAEpDquE,EAASxc,YAAc+gB,EAChB/wF,EAAO47C,cAEhB,IAAK1xC,EAAAmjB,WAAW6jE,GAMd,OALA1E,EAAS92E,MACP3L,EAAA4L,eAAe07E,0BACfv5C,EAAS,GAAG9nC,MAAO,aAErBw8E,EAASxc,YAAc+gB,EAChB/wF,EAAO47C,mBAGhBs1C,EAAWC,EAGb,OADA3E,EAASxc,YAAc+gB,EAChB/wF,EAAOu4C,KACZl8B,EAAKu2C,SACLv2C,EAAKK,GAAG,GACR+R,EACAsiE,EAAQ58B,eACR68B,EACAE,GAGJ,KAAKxrB,EAAepuB,MAElB,GADAk1C,EAASxc,YAAchmE,EAAA2H,KAAKG,KAE1B67E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cACZv/B,EAAOwN,EAAe,GACtB4E,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAGxB6c,EAAO+9D,EACPD,EAASxX,kBAAkBl9B,EAAS,GAClCwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACTz7B,EACAA,EAAKK,GAAE,GACJ,EACA,GAfT,IAiBI40E,EAAS9E,EAASxc,YAgBtB,GAdE3zD,EAAKK,GAAE,MAEJ40E,EAAO50E,GAAE,IACV40E,EAAOv1C,KAAO1/B,EAAK0/B,QAGrBrtB,EAAO89D,EAAS3O,kBAAkBnvD,EAChC4iE,EAAQj1E,GACR,GAAO,EACPy7B,EAAS,IAEXw5C,EAASj1E,IAEP20E,EAAYl5C,EAAS3sC,QAAU,EAAI8lF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,EAEd,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,cAEZs1C,OAAQ,EACRC,EAAe90E,EAAKu2C,SACxB,GAAuB,GAAnB9a,EAAS3sC,OAAa,CAExB,IADA+lF,EAAWD,EAAwBn5C,EAAS,GAAI00C,IACjC,EAEb,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,cAEhB,GAAIs1C,EAAWC,EAMb,OALA3E,EAAS92E,MACP3L,EAAA4L,eAAey7E,6CACft5C,EAAS,GAAG9nC,MAAO,YAAa,IAAKmhF,EAAahzE,YAEpDquE,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,cAEhB,IAAK1xC,EAAAmjB,WAAW6jE,GAMd,OALA1E,EAAS92E,MACP3L,EAAA4L,eAAe07E,0BACfv5C,EAAS,GAAG9nC,MAAO,aAErBw8E,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,mBAGhBs1C,EAAWC,EAGb,OADA3E,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAOs3C,MAAMj7B,EAAKu2C,SAAUnkC,EAAMC,EAAM4iE,EAAOn9B,eAAgB68B,EAAWE,GAKnF,KAAKxrB,EAAe5sB,YAClB,IAAK0zC,EAAS/6E,QAAQW,WAAU,IAAmB,MACnD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cAEZm1C,GADA10E,EAAOwN,EAAe,IAEnBnN,GAAE,IACP4mD,EAAe5mD,GAAE,IACjB4mD,EAAevnB,KAAO1/B,EAAK0/B,KACzBunB,EAAiBjnD,EACrB,IAAKA,EAAKK,GAAE,GAMV,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAc+gB,EAChB/wF,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAI5B,OADIm/E,EAA+B,GAAnBl5C,EAAS3sC,OAAc8lF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,GACdA,EAASxc,YAAc+gB,EAChB/wF,EAAO47C,gBAEhB4wC,EAASxc,YAAc+gB,EAChB/wF,EAAO84C,YACZz8B,EAAKu2C,SACLnkC,EACAsiE,EAAQ58B,eACR68B,IAGJ,KAAKtrB,EAAe1sB,aAClB,IAAKwzC,EAAS/6E,QAAQW,WAAU,IAAmB,MAEnD,GADAo6E,EAASxc,YAAchmE,EAAA2H,KAAKG,KAE1B67E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cAEhB,KADIv/B,EAAOwN,EAAe,IAChBnN,GAAE,IAAuBL,EAAK0/B,KAAO,EAK7C,OAJAywC,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAGxB6c,EAAO+9D,EACPD,EAASxX,kBACPl9B,EAAS,GACTwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACTz7B,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL40E,EAAS9E,EAASxc,YAgBtB,OAdE3zD,EAAKK,GAAE,MAEJ40E,EAAO50E,GAAE,IACV40E,EAAOv1C,KAAO1/B,EAAK0/B,QAGrBrtB,EAAO89D,EAAS3O,kBAAkBnvD,EAChC4iE,EAAQj1E,GACR,GAAO,EACPy7B,EAAS,IAEXw5C,EAASj1E,IAEP20E,EAA+B,GAAnBl5C,EAAS3sC,OAAc8lF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,GACdA,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,gBAEhB4wC,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAOg5C,aAAa38B,EAAKu2C,SAAUnkC,EAAMC,EAAM4iE,EAAOn9B,eAAgB68B,IAE/E,KAAKtrB,EAAe6rB,WACpB,KAAK7rB,EAAe8rB,WACpB,KAAK9rB,EAAe+rB,WACpB,KAAK/rB,EAAegsB,UACpB,KAAKhsB,EAAeisB,WACpB,KAAKjsB,EAAeksB,YAClB,IAAKpF,EAAS/6E,QAAQW,WAAU,IAAmB,MACnD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cAEhB,KADIv/B,EAAOwN,EAAe,IAChBnN,GAAE,IAAuBL,EAAK0/B,KAAO,EAK7C,OAJAywC,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAGxB6c,EAAO+9D,EACPD,EAASxX,kBAAkBl9B,EAAS,GAClCwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACTz7B,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL40E,EAAS9E,EAASxc,YAgBtB,GAdE3zD,EAAKK,GAAE,MAEJ40E,EAAO50E,GAAE,IACV40E,EAAOv1C,KAAO1/B,EAAK0/B,QAGrBrtB,EAAO89D,EAAS3O,kBAAkBnvD,EAChC4iE,EAAQj1E,GACR,GAAO,EACPy7B,EAAS,IAEXw5C,EAASj1E,IAEP20E,EAA+B,GAAnBl5C,EAAS3sC,OAAc8lF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,EAEd,OADAA,EAASxc,YAAcshB,EAChBtxF,EAAO47C,cAEZnE,OAAE,EACN,OAAQn1C,EAAU0M,cAChB,QAAS9D,QAAO,GAChB,KAAKw6D,EAAe6rB,WAAe95C,EAAK8a,EAAAzf,YAAY++C,IAAM,MAC1D,KAAKnsB,EAAe8rB,WAAe/5C,EAAK8a,EAAAzf,YAAYg/C,IAAM,MAC1D,KAAKpsB,EAAe+rB,WAAeh6C,EAAK8a,EAAAzf,YAAYi/C,IAAM,MAC1D,KAAKrsB,EAAegsB,UAAej6C,EAAK8a,EAAAzf,YAAYk/C,GAAM,MAC1D,KAAKtsB,EAAeisB,WAAel6C,EAAK8a,EAAAzf,YAAYm/C,IAAM,MAC1D,KAAKvsB,EAAeksB,YAAen6C,EAAK8a,EAAAzf,YAAYo/C,KAGtD,OADA1F,EAASxc,YAAcshB,EAChBtxF,EAAOk5C,WACZzB,EAAIp7B,EAAKu2C,SAAUo+B,EAAWviE,EAAMC,EAAM4iE,EAAOn9B,gBAGrD,KAAKuR,EAAetsB,eAClB,IAAKozC,EAAS/6E,QAAQW,WAAU,IAAmB,MACnD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAOxsF,EAAO47C,cAEhB,KADIv/B,EAAOwN,EAAe,IAChBnN,GAAE,IAAuBL,EAAK0/B,KAAO,EAK7C,OAJAywC,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAGxB6c,EAAO+9D,EACPD,EAASxX,kBAAkBl9B,EAAS,GAClCwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACTz7B,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL40E,EAAS9E,EAASxc,YAhBtB,IAwCIghB,EAvBAriE,GAAO69D,EAASxX,kBAAkBl9B,EAAS,GAC7Cw5C,EAAM,GAuBR,OAnBEj1E,EAAKK,GAAE,MAEJ40E,EAAO50E,GAAE,IACV40E,EAAOv1C,KAAO1/B,EAAK0/B,QAGrBrtB,EAAO89D,EAAS3O,kBAAkBnvD,EAChC4iE,EAAQj1E,GACR,GAAO,EACPy7B,EAAS,IAEXnpB,GAAO69D,EAAS3O,kBAAkBlvD,GAChC2iE,EAAQj1E,GACR,GAAO,EACPy7B,EAAS,IAEXw5C,EAASj1E,IAEP20E,EAA+B,GAAnBl5C,EAAS3sC,OAAc8lF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,GACdA,EAASxc,YAAcshB,EAChBtxF,EAAO47C,gBAEhB4wC,EAASxc,YAAcshB,EAChBtxF,EAAOo5C,eACZ/8B,EAAKu2C,SAAUo+B,EAAWviE,EAAMC,EAAMC,GAAM2iE,EAAOn9B,iBAGvD,KAAKuR,EAAelsB,YAClB,IAAKgzC,EAAS/6E,QAAQW,WAAU,IAAmB,MAEnD,GADAo6E,EAASxc,YAAchmE,EAAA2H,KAAKlO,IAE1BkqF,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAEhB,KADIv/B,EAAOwN,EAAe,IAChBnN,GAAE,IAAuBL,EAAK0/B,KAAO,GAK7C,OAJAywC,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAGxB6c,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GAGnDsS,GAAO69D,EAASxX,kBAAkBl9B,EAAS,GAC7C9tC,EAAA2H,KAAKjO,IAAG,GAIV,OADA8oF,EAASxc,YAAchmE,EAAA2H,KAAKlO,IACrBzD,EAAOw5C,YAAY/qB,EAAMC,EAAMC,GAAMtS,EAAK83C,gBAEnD,KAAKuR,EAAe9rB,cAClB,IAAK4yC,EAAS/6E,QAAQW,WAAU,IAAmB,MAEnD,GADAo6E,EAASxc,YAAchmE,EAAA2H,KAAKlO,IAE1B6pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS/6E,QAAQI,UAAS,GAGxB6c,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAC7C9tC,EAAA2H,KAAKlO,IAAG,GAIV,OADA+oF,EAASxc,YAAchmE,EAAA2H,KAAKlO,IACrBzD,EAAO45C,cAAcnrB,EAAMC,GAKpC,KAAKg3C,EAAexqB,OAClB,GACEgzC,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cACZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,GACxD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKyhD,MAEjD,KADI/2C,EAAOmwE,EAASxc,aACV7wD,MAAM,KAKd,OAJAqtE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZltB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GACnDsS,GAAO69D,EAAShS,cAClBgS,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK1N,MAC7CuoF,EAASxc,aAGX,OADAwc,EAASxc,YAAc3zD,EAChBrc,EAAOk7C,OAAOzsB,EAAMC,EAAMC,IAEnC,KAAK+2C,EAAe9pB,YAQlB,OAPI/xB,GACF2iE,EAAS92E,MACP3L,EAAA4L,eAAeosD,sBACf0E,EAAWsnB,mBAAoBzrF,EAAU0M,cAG7Cu+E,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GACpCxsF,EAAO47C,cAKhB,KAAK8pB,EAAeysB,YAElB,OADA3F,EAASxc,YAAchmE,EAAA2H,KAAKlO,IAE1B6pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GACpCxsF,EAAO47C,cACT57C,EAAO63C,KAAK0a,EAAA5f,OAAOy/C,YAE5B,KAAK1sB,EAAe2sB,YAElB,OADA7F,EAASxc,YAAchmE,EAAA2H,KAAKlO,IAE1B6pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GACpCxsF,EAAO47C,cACT57C,EAAO63C,KAAK0a,EAAA5f,OAAO2/C,WAAY,KAAM,CAC1C9F,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,KAGpD,KAAKiiE,EAAe5pB,YAElB,GADA0wC,EAASxc,YAAchmE,EAAA2H,KAAKG,KAE1Bw7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAK4wC,EAAS/6E,QAAQW,WAAU,GAAuB,CACrD,IAAI6T,GAAWumE,EAASv9E,SAASoM,gBAAgB/Y,EAAW,MAE5D,OADAkqF,EAASxc,YAAchmE,EAAA2H,KAAKG,KACvBmU,GACEumE,EAAS9H,kBAAkBz+D,GAAU6xB,EAAU2uB,GADhCzmE,EAAO47C,cAG/B,IAAI/pC,GAAY26E,EAAS/6E,QAAQI,UAC7B4c,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GACxD6c,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GACxD8c,GAAO69D,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GAE5D,OADA26E,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO87C,YAAYrtB,EAAMC,EAAMC,IAExC,KAAK+2C,EAAezpB,YAElB,GADAuwC,EAASxc,YAAchmE,EAAA2H,KAAKG,KAE1Bw7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAK4wC,EAAS/6E,QAAQW,WAAU,GAAuB,CACjD6T,GAAWumE,EAASv9E,SAASoM,gBAAgB/Y,EAAW,MAE5D,OADAkqF,EAASxc,YAAchmE,EAAA2H,KAAKG,KACvBmU,GACEumE,EAAS9H,kBAAkBz+D,GAAU6xB,EAAU2uB,GADhCzmE,EAAO47C,cAG3B/pC,GAAY26E,EAAS/6E,QAAQI,UAC7B4c,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GACxD6c,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK/N,GAAE,GACtD+qB,GAAO69D,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GAE5D,OADA26E,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAOi8C,YAAYxtB,EAAMC,EAAMC,IAKxC,KAAK+2C,EAAezvB,WAClB,GACE03C,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IAAI1oB,GAASrJ,EAAe,GAExB8kD,IADAlgD,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI5kB,IACpCs5D,EAASxc,aAExB,OADAwc,EAASxc,YAAc98C,GACnBy7C,GAAS5yB,MAAQ7oB,GAAO6oB,MAC1BywC,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,OAENhQ,EAAO47C,eAETntB,EAET,KAAKi3C,EAAex6D,OAClB,GACEgjF,EAAkBrkE,EAAe48C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAM9C,OAJI3iE,IACF3e,OAAO2e,EAAc1e,QACrBqhF,EAASxc,YAAcnmD,EAAc,GAAGkpC,iBAEnC/yD,EAAO47C,cAEZntB,EAAO5E,EACP2iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAI,GAC1D2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK1N,KAAI,GACjDoY,EAAOmwE,EAASxc,YAIpB,GAHAwc,EAASxc,YAAc3zD,EAAK02C,gBAGxBy5B,EAAS/6E,QAAQiB,SACnB,OAAI4wD,GAAkBt5D,EAAA2H,KAAKG,MACzB06E,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO86C,OAETrsB,EAIT,IAAIhmB,GAAQ8zE,EAAaiQ,EAA6B,GAAnB10C,EAAS3sC,OAAc2sC,EAAS,GAAK,KAAM2uB,GAC9E+lB,EAASxc,YAAc3zD,EAAK02C,gBACxBvgC,OAAI,EACR,GAAI8wC,GAAkBt5D,EAAA2H,KAAKG,KAEzB,OADA06E,EAASxc,YAAchmE,EAAA2H,KAAKG,KACpBuK,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,QACE+e,EAAOxyB,EAAO46C,GACZ56C,EAAOw3C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQ/8C,GAC7BhmB,IAEF,MAEF,OACA,OACE+pB,EAAOxyB,EAAO46C,GACZ56C,EAAOw3C,MAAM+a,EAAA3uB,QAAQ6nC,OAAQh9C,GAC7BhmB,IAEF,MAEF,OACA,OACE+pB,EAAOxyB,EAAO46C,GACZ56C,EAAOw3C,MACLg1C,EAAS/6E,QAAQc,SACbggD,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZ/8C,GAEFhmB,IAEF,MAGF,QACE+pB,EAAOxyB,EAAO46C,GACZ56C,EAAO23C,OAAO4a,EAAArpB,SAASijC,MACrB19C,EACAzuB,EAAOkE,IAAI,IAEbuE,IAEF,MAEF,QACE+pB,EAAOxyB,EAAO46C,GACZ56C,EAAO23C,OAAO4a,EAAArpB,SAASkjC,MACrB39C,EACAzuB,EAAOmE,IAAI,IAEbsE,IAEF,MAEF,QACE+jF,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAO/pB,QAMX,OADA+jF,EAASxc,YAAc3zD,EAAK02C,gBACpBy5B,EAASxc,YAAYv8D,MAC3B,OACA,OACA,OACA,OACA,OACA,OACA,QACE,IACImoE,IADA9zD,EAAO0kE,EAASpb,aACC3H,oBAAoBptD,GACzCyL,EAAKwhD,aAAasS,GAAUt2D,MAAOlb,EAAA29D,WAAWiE,SAC9Cx5C,EAAOxyB,EAAO46C,GACZ56C,EAAOm4C,UAAUyjC,GAAUt2D,MAAOmJ,GAClCzuB,EAAOi4C,UAAU2jC,GAAUt2D,MAAOitC,EAAAjyB,WAAW75B,KAC7CgC,IAEF,MAEF,OACA,OACMmzE,GAAY4Q,EAASpb,YAAY3H,oBAAoBz/D,EAAA2H,KAAKjO,KAC9D8uB,EAAOxyB,EAAO46C,GACZ56C,EAAOw3C,MAAM+a,EAAA3uB,QAAQ6nC,OACnBzrE,EAAOm4C,UAAUyjC,GAAUt2D,MAAOmJ,IAEpChmB,GACAzI,EAAOi4C,UAAU2jC,GAAUt2D,MAAOitC,EAAAjyB,WAAW55B,MAE/C,MAEF,OACA,OACMk1E,GAAY4Q,EAASpb,YAAY3H,oBAAoB+iB,EAAS/6E,QAAQI,WAC1E2gB,EAAOxyB,EAAO46C,GACZ56C,EAAOw3C,MACLg1C,EAAS/6E,QAAQc,SACbggD,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZxrE,EAAOm4C,UAAUyjC,GAAUt2D,MAAOmJ,IAEpChmB,GACAzI,EAAOi4C,UAAU2jC,GAAUt2D,MAAOknE,EAAS/6E,QAAQgiE,iBAErD,MAEF,QACMmI,GAAY4Q,EAASpb,YAAY3H,oBAAoBz/D,EAAA2H,KAAKzN,KAC9DsuB,EAAOxyB,EAAO46C,GACZ56C,EAAO23C,OAAO4a,EAAArpB,SAASijC,MACrBnsE,EAAOm4C,UAAUyjC,GAAUt2D,MAAOmJ,GAClCzuB,EAAOkE,IAAI,IAEbuE,GACAzI,EAAOi4C,UAAU2jC,GAAUt2D,MAAOitC,EAAAjyB,WAAWp5B,MAE/C,MAEF,QACM00E,GAAY4Q,EAASpb,YAAY3H,oBAAoBz/D,EAAA2H,KAAKxN,KAC9DquB,EAAOxyB,EAAO46C,GACZ56C,EAAO23C,OAAO4a,EAAArpB,SAASkjC,MACrBpsE,EAAOm4C,UAAUyjC,GAAUt2D,MAAOmJ,GAClCzuB,EAAOmE,IAAI,IAEbsE,GACAzI,EAAOi4C,UAAU2jC,GAAUt2D,MAAOitC,EAAAjyB,WAAWn5B,MAE/C,MAEF,QACEqlF,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbv7D,EAAO/pB,GAKb,OAAO+pB,EAET,KAAKkzC,EAAex6C,UAClB,GACEoiE,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAChB,IACI22C,IADAzqE,EAAO0kE,EAASpb,aACQ10D,GAAE,OAC9BoL,EAAK/Y,IAAG,OAEJyjB,EAAOg6D,EAASxX,kBAAkBl9B,EAAS,GAAIwrB,GAEnD,OADKivB,IAAkBzqE,EAAKzE,MAAK,OAC1BmP,EAET,KAAKkzC,EAAe8sB,YAAa9F,GAAY,EAC7C,KAAKhnB,EAAehqB,cAClB,GACEwyC,EAAkBrkE,EAAe48C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAGr0C,IAAIqhD,UAAW2hB,EAAY+lB,GAC1D,OAAOxsF,EAAO47C,cAChB,IAAIvqB,GAAaxH,EAAgBA,EAAc,GAAKy5C,EAEhDmvB,IADAhkE,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK7N,KACzC0oF,EAASxc,aACxB,KACEyiB,IAAYzoF,EAAA2H,KAAK7N,KACJ,GAAb2uF,GAASh/E,MAAwBg/E,GAAS3/B,oBAM1C,OAJA05B,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACfm5B,EAAS,GAAG9nC,OAEPhQ,EAAO47C,cAOhB,IALA,IAAI0sC,GAAcxwC,EAAS3sC,OAAS,EAChCunF,GAAe,IAAIprF,MAAqBghF,IACxC3E,GAAmBtyD,GAAW8iC,eAC9BzsC,GAAiB,IAAIpgB,MAAYghF,IACjCqK,GAAmB,IAAIrrF,MAAkBghF,IACpC5nF,GAAI,EAAGA,GAAI4nF,KAAe5nF,GAAG,CACpCgyF,GAAahyF,IAAK8rF,EAASxX,kBAAkBl9B,EAAS,EAAIp3C,IAAIsJ,EAAA2H,KAAKlO,KACnE,IAAImvF,GAAcpG,EAASxc,YAC3BtoD,GAAehnB,IAAKkyF,GACpBD,GAAiBjyF,IAAKkyF,GAAYz+B,eAEpC,IAAInjC,GAAWhnB,EAAA8Z,UAAU4xC,oBAAoBhuC,GAAgB2J,IACzD2sB,GAAUh+C,EAAOy2C,2BAA2BktC,GAAkBgP,IAGlE,GAFK30C,KAASA,GAAUh+C,EAAOk2C,gBAAgBllB,GAAU2yD,GAAkBgP,KAC3EnG,EAASxc,YAAc3+C,GACnBq7D,EAAW,CAEb,GAAIn6B,EAAApL,gBAAgB14B,EAAOzuB,EAAO0iD,qBAAqBj0B,KAAU8jC,EAAAhyB,aAAa0kB,MAAO,CACnF/5C,OAAOqnD,EAAAnL,kBAAkB34B,IAAS8jC,EAAAjyB,WAAW75B,KAC7C,IAAI6e,GAAQitC,EAAAlL,iBAAiB54B,GACzB0hD,GAAgBqc,EAASrc,cAC7B,GAAI7qD,IAAS,GAAKA,GAAQ6qD,GAAchlE,OACtC,OAAOnL,EAAOa,KAAKsvE,GAAc7qD,IAAQotE,GAAc/O,IAO3D,OAJA6I,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACfm5B,EAAS,GAAG9nC,OAEPhQ,EAAO47C,cAIhB,OAAO57C,EAAO07C,cAAcjtB,EAAMikE,GAAc1hE,IAElD,KAAK00C,EAAemtB,YAClB,GACElF,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvD,OAAOxsF,EAAO47C,cAChB,IAAInsC,GAAgBoa,EAAe,GAAG0C,eACtC,OAAK9c,IAOL+8E,EAASxc,YAAcvgE,GAAc4M,KAC9BmwE,EAAS3B,mBAAmBp7E,GAAeqoC,EAAQ,EAAoB2uB,KAP5E+lB,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,eAQlB,KAAK8pB,EAAe53C,MAMlB,OALAw/D,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CkqF,EAAS92E,MACP3L,EAAA4L,eAAem9E,eACfrsB,EAAWz2D,OAAQ8nC,EAAS3sC,OAAS2sC,EAAS,GAAK2uB,GAAYz2D,MAAMmO,YAEhEne,EAAO47C,cAEhB,KAAK8pB,EAAe73C,QAMlB,OALAy/D,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CkqF,EAAS9tE,QACP3U,EAAA4L,eAAem9E,eACfrsB,EAAWz2D,OAAQ8nC,EAAS3sC,OAAS2sC,EAAS,GAAK2uB,GAAYz2D,MAAMmO,YAEhEne,EAAO86C,MAEhB,KAAK4qB,EAAe93C,KAMlB,OALA0/D,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CkqF,EAAS58D,KACP7lB,EAAA4L,eAAem9E,eACfrsB,EAAWz2D,OAAQ8nC,EAAS3sC,OAAS2sC,EAAS,GAAK2uB,GAAYz2D,MAAMmO,YAEhEne,EAAO86C,MAKhB,KAAK4qB,EAAeniE,GAClB,OACE+pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAKpO,GACrBvD,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKpO,GAAE,GAExD,KAAKmiE,EAAeliE,IAClB,OACE8pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAKnO,IACrBxD,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKnO,IAAG,GAEzD,KAAKkiE,EAAejiE,IAClB,OACE6pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAKlO,IACrBzD,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,GAEzD,KAAKiiE,EAAehiE,IAClB,OACE4pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAKjO,IACrB1D,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKjO,IAAG,GAEzD,KAAKgiE,EAAe/hE,MAClB,IAAIiO,GAAY46E,EAAS/6E,QAAQG,UACjC,OACE07E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcp+D,GAChB5R,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIlmC,GAAS,GAE1D,KAAK8zD,EAAe9hE,GAClB,OACE0pF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAK/N,GACrB5D,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK/N,GAAE,GAExD,KAAK8hE,EAAe7hE,IAClB,OACEypF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAK9N,IACrB7D,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK9N,IAAG,GAEzD,KAAK6hE,EAAe5hE,IAClB,OACEwpF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAK7N,IACrB9D,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK7N,IAAG,GAEzD,KAAK4hE,EAAe3hE,IAClB,OACEupF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAK5N,IACrB/D,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK5N,IAAG,GAEzD,KAAK2hE,EAAe1hE,MACd6N,GAAY26E,EAAS/6E,QAAQI,UACjC,OACEy7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcn+D,GAChB7R,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GAE1D,KAAK6zD,EAAezhE,KAClB,OACEqpF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACrBjE,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK1N,KAAI,GAE1D,KAAKyhE,EAAexhE,IAClB,OACEopF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAKzN,IACrBlE,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKzN,IAAG,GAEzD,KAAKwhE,EAAevhE,IAClB,OACEmpF,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAchmE,EAAA2H,KAAKxN,IACrBnE,EAAO47C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKxN,IAAG,GAKzD,KAAKuhE,EAAethE,KACpB,KAAKshE,EAAerhE,MAClB,IAAKmoF,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,GAAI2uB,EAAY+lB,GAG5C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB,IAAIvE,GAAQ,IAAInvC,WAAW,IAC3B,IAASxH,GAAI,EAAGA,GAAI,KAAMA,GAAG,CAE3B,GADIiB,GAAQm2C,EAASp3C,IACV,CACL8xB,EAAOg6D,EAAS9pC,qBAAqB/gD,GAAOqI,EAAA2H,KAAKpO,GAAE,GACvD,GAAIgvD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfpxF,GAAMqO,OAERw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAW75B,KAC7CyD,EAAAwhB,QAAQ6mC,EAAAlL,iBAAiB70B,GAAO6kB,GAAO32C,KAI3C,OADA8rF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOoE,KAAKizC,IAErB,KAAKquB,EAAenhE,MAClB,IAAKioF,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIvE,GAAQ,IAAInvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQm2C,EAASp3C,IACV,CACL8xB,EAAOg6D,EAAS9pC,qBAAqB/gD,GAAOqI,EAAA2H,KAAKnO,IAAG,GACxD,GAAI+uD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfpxF,GAAMqO,OAERw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAW75B,KAC7CyD,EAAAyhB,SAAS4mC,EAAAlL,iBAAiB70B,GAAO6kB,GAAO32C,IAAK,IAIjD,OADA8rF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOoE,KAAKizC,IAErB,KAAKquB,EAAejhE,MAClB,IAAK+nF,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIvE,GAAQ,IAAInvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQm2C,EAASp3C,IACV,CACL8xB,EAAOg6D,EAAS9pC,qBAAqB/gD,GAAOqI,EAAA2H,KAAKlO,IAAG,GACxD,GAAI8uD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfpxF,GAAMqO,OAERw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAW75B,KAC7CyD,EAAAyF,SAAS4iD,EAAAlL,iBAAiB70B,GAAO6kB,GAAO32C,IAAK,IAIjD,OADA8rF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOoE,KAAKizC,IAErB,KAAKquB,EAAe/gE,MAClB,IAAK6nF,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIvE,GAAQ,IAAInvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQm2C,EAASp3C,IACV,CACL8xB,EAAOg6D,EAAS9pC,qBAAqB/gD,GAAOqI,EAAA2H,KAAKjO,IAAG,GACxD,GAAI6uD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfpxF,GAAMqO,OAERw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAW55B,KAC7C,IAAIssF,GAAMtyF,IAAK,EACfwJ,EAAAyF,SAAS4iD,EAAAjL,oBAAoB90B,GAAO6kB,GAAO27C,IAC3C9oF,EAAAyF,SAAS4iD,EAAAhL,qBAAqB/0B,GAAO6kB,GAAO27C,GAAM,IAItD,OADAxG,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOoE,KAAKizC,IAErB,KAAKquB,EAAe7gE,MAClB,IAAK2nF,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIvE,GAAQ,IAAInvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQm2C,EAASp3C,IACV,CACL8xB,EAAOg6D,EAAS9pC,qBAAqB/gD,GAAOqI,EAAA2H,KAAKzN,IAAG,GACxD,GAAIquD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfpxF,GAAMqO,OAERw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAWp5B,KAC7CgD,EAAA0hB,SAAS2mC,EAAA/K,iBAAiBh1B,GAAO6kB,GAAO32C,IAAK,IAIjD,OADA8rF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOoE,KAAKizC,IAErB,KAAKquB,EAAe5gE,MAClB,IAAK0nF,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIvE,GAAQ,IAAInvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAC1B,IAAIiB,GACJ,GADIA,GAAQm2C,EAASp3C,IACV,CACL8xB,EAAOg6D,EAAS9pC,qBAAqB/gD,GAAOqI,EAAA2H,KAAKxN,IAAG,GACxD,GAAIouD,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfpxF,GAAMqO,OAERw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAWn5B,KAC7C+C,EAAA2hB,SAAS0mC,EAAA9K,iBAAiBj1B,GAAO6kB,GAAO32C,IAAK,IAIjD,OADA8rF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOoE,KAAKizC,IAErB,KAAKquB,EAAeutB,WAClB,IAAKzG,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZnE,OAAE,EACN,OAAQp7B,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQsvD,cAAe,MACjD,OACA,OAAqBz7C,EAAK8a,EAAA3uB,QAAQuvD,cAAe,MACjD,OACA,OAAqB17C,EAAK8a,EAAA3uB,QAAQwvD,cAAe,MACjD,OACA,OAAqB37C,EAAK8a,EAAA3uB,QAAQyvD,cAAe,MACjD,OACA,OACE57C,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQyvD,cACR9gC,EAAA3uB,QAAQwvD,cACZ,MAEF,QAAqB37C,EAAK8a,EAAA3uB,QAAQ0vD,cAAe,MACjD,QAAqB77C,EAAK8a,EAAA3uB,QAAQ2vD,cAAe,MACjD,QAME,OALA/G,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGdntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GAEvD,OADAmwE,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOw3C,MAAMC,EAAIhpB,GAE1B,KAAKi3C,EAAe8tB,kBAClB,IAAKhH,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAOxsF,EAAO47C,cAEhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAc3zD,EAChBrc,EAAO47C,cAEZnE,OAAE,EACN,OAAQp7B,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAAlf,cAAcogD,qBAAsB,MAC9D,OAAqBh8C,EAAK8a,EAAAlf,cAAcqgD,qBAAsB,MAC9D,OAAqBj8C,EAAK8a,EAAAlf,cAAcsgD,qBAAsB,MAC9D,OAAqBl8C,EAAK8a,EAAAlf,cAAcugD,qBAAsB,MAC9D,OACA,OAAqBn8C,EAAK8a,EAAAlf,cAAcwgD,oBAAqB,MAC7D,OACA,OAAqBp8C,EAAK8a,EAAAlf,cAAcygD,oBAAqB,MAC7D,OACA,OACEr8C,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAAlf,cAAcygD,oBACdvhC,EAAAlf,cAAcwgD,oBAClB,MAEF,QAAqBp8C,EAAK8a,EAAAlf,cAAc0gD,oBAAqB,MAC7D,QAAqBt8C,EAAK8a,EAAAlf,cAAc2gD,oBAAqB,MAC7D,QAME,OALAxH,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAc3zD,EAChBrc,EAAO47C,cAGdntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAAS9pC,qBAAqB5K,EAAS,GAAI9tC,EAAA2H,KAAK/N,GAAE,GAE7D,GADA4oF,EAASxc,YAAc3zD,EACnBk2C,EAAApL,gBAAgBz4B,IAAS6jC,EAAAhyB,aAAa0kB,MAKxC,OAJAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfj7C,EAAS,GAAG9nC,OAEPhQ,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB14B,IAAS6jC,EAAAjyB,WAAW75B,KAC7C,IAAIwtF,GAAU,GAAK53E,EAAKu2C,SAAY,EAEpC,OADIvW,GAAMkW,EAAAlL,iBAAiB34B,IACjB,GAAK2tB,GAAM43C,IACnBzH,EAAS92E,MACP3L,EAAA4L,eAAey7E,6CACft5C,EAAS,GAAG9nC,MAAO,aAAc,IAAKikF,GAAO91E,YAExCne,EAAO47C,eAET57C,EAAOm8C,aAAa1E,EAAIhpB,EAAM4tB,IAEvC,KAAKqpB,EAAewuB,kBAClB,IAAK1H,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZnE,OAAE,EACN,OAAQp7B,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAAze,cAAcqgD,oBAAqB,MAC7D,OACA,OAAqB18C,EAAK8a,EAAAze,cAAcsgD,oBAAqB,MAC7D,OACA,OAAqB38C,EAAK8a,EAAAze,cAAcugD,oBAAqB,MAC7D,OACA,OAAqB58C,EAAK8a,EAAAze,cAAcwgD,oBAAqB,MAC7D,OACA,OACE78C,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAAze,cAAcwgD,oBACd/hC,EAAAze,cAAcugD,oBAClB,MAEF,QAAqB58C,EAAK8a,EAAAze,cAAcygD,oBAAqB,MAC7D,QAAqB98C,EAAK8a,EAAAze,cAAc0gD,oBAAqB,MAC7D,QAME,OALAhI,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGdntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAAS9pC,qBAAqB5K,EAAS,GAAI9tC,EAAA2H,KAAK/N,GAAE,GAC7D,GAAI2uD,EAAApL,gBAAgBz4B,IAAS6jC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfj7C,EAAS,GAAG9nC,OAEdw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB1wC,OAAOqnD,EAAAnL,kBAAkB14B,IAAS6jC,EAAAjyB,WAAW75B,KACzCwtF,GAAU,GAAK53E,EAAKu2C,SAAY,EAEpC,IADIvW,GAAMkW,EAAAlL,iBAAiB34B,IACjB,GAAK2tB,GAAM43C,GAKnB,OAJAzH,EAAS92E,MACP3L,EAAA4L,eAAey7E,6CACft5C,EAAS,GAAG9nC,MAAO,aAAc,IAAKikF,GAAO91E,YAExCne,EAAO47C,cAEZjtB,GAAO69D,EAASxX,kBAAkBl9B,EAAS,GAAIz7B,EAAI,GAEvD,OADAmwE,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOu8C,aAAa9E,EAAIhpB,EAAM4tB,GAAK1tB,IAE5C,KAAK+2C,EAAe+uB,aAClB,IAAKjI,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAG7C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB,IAAI84C,GAAYr4E,EAAKu2C,SACjB+hC,GAAY,GAAKD,GAErB,GADAxpF,OAAOyhF,UAAUgI,KAAczqF,EAAAmjB,WAAWsnE,KAExCpH,EAAkBz1C,EAAU,EAAI68C,GAAWluB,EAAY+lB,GAGvD,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB,OAAQv/B,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QAAmB,MACnB,QAME,OALA+4E,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGdntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAD5D,IAEIw4C,GAAO,IAAI10C,WAAW,IAE1B,IADI+rF,IAAUU,IAAa,GAAK,EACvBj0F,GAAI,EAAGA,GAAIi0F,KAAaj0F,GAAG,CAClC,IAWI27C,GAXAvlB,GAAUghB,EAAS,EAAIp3C,IACvBk0F,GAAOpI,EAAS9pC,qBAAqB5rB,GAAS9sB,EAAA2H,KAAK/N,GAAE,GACzD,GAAI2uD,EAAApL,gBAAgBytC,KAASriC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACfj8D,GAAQ9mB,OAEVw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAIhB,GAFA1wC,OAAOqnD,EAAAnL,kBAAkBwtC,KAASriC,EAAAjyB,WAAW75B,MACzC41C,GAAMkW,EAAAlL,iBAAiButC,KACjB,GAAKv4C,GAAM43C,GAMnB,OALAzH,EAAS92E,MACP3L,EAAA4L,eAAey7E,6CACft6D,GAAQ9mB,MAAO,aAAc,IAAKikF,GAAO91E,YAE3CquE,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEhB,OAAQ84C,IACN,KAAK,EACHxqF,EAAAwhB,QAAQ2wB,GAAKO,GAAMl8C,IACnB,MAEF,KAAK,EACH,IAAIm0F,GAAOn0F,IAAK,EACZo0F,GAAOz4C,IAAO,EAClBnyC,EAAAwhB,QAAQopE,GAAUl4C,GAAMi4C,IACxB3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOn0F,IAAK,EACZo0F,GAAOz4C,IAAO,EAClBnyC,EAAAwhB,QAAQopE,GAAUl4C,GAAMi4C,IACxB3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOn0F,IAAK,EACZo0F,GAAOz4C,IAAO,EAClBnyC,EAAAwhB,QAAQopE,GAAUl4C,GAAMi4C,IACxB3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B3qF,EAAAwhB,QAAQopE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B,MAEF,QAAS3pF,QAAO,IAIpB,OADAshF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOy8C,aAAahuB,EAAMC,EAAMkuB,IAEzC,KAAK8oB,EAAeqvB,SACpB,KAAKrvB,EAAesvB,SACpB,KAAKtvB,EAAeuvB,SACpB,KAAKvvB,EAAewvB,SACpB,KAAKxvB,EAAeyvB,kBACpB,KAAKzvB,EAAe0vB,kBACpB,KAAK1vB,EAAe2vB,SACpB,KAAK3vB,EAAe4vB,SACpB,KAAK5vB,EAAe6vB,QACpB,KAAK7vB,EAAe8vB,QACpB,KAAK9vB,EAAe+vB,QACpB,KAAK/vB,EAAegwB,QACpB,KAAKhwB,EAAeiwB,QACpB,KAAKjwB,EAAekwB,QAClB,IAAKpJ,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZnE,GAAgB,EACpB,OAAQn1C,EAAU0M,cAChB,KAAK02D,EAAeqvB,SAClB,OAAQ14E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAAS2sD,YAAa,MAChD,OACA,OAAqBp+C,EAAK8a,EAAArpB,SAAS4sD,YAAa,MAChD,OACA,OAAqBr+C,EAAK8a,EAAArpB,SAAS6sD,YAAa,MAChD,OACA,OAAqBt+C,EAAK8a,EAAArpB,SAAS8sD,YAAa,MAChD,OACA,OACEv+C,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAArpB,SAAS8sD,YACTzjC,EAAArpB,SAAS6sD,YACb,MAEF,QAAqBt+C,EAAK8a,EAAArpB,SAAS+sD,YAAa,MAChD,QAAqBx+C,EAAK8a,EAAArpB,SAASgtD,YAErC,MAEF,KAAKxwB,EAAesvB,SAClB,OAAQ34E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAASitD,YAAa,MAChD,OACA,OAAqB1+C,EAAK8a,EAAArpB,SAASktD,YAAa,MAChD,OACA,OAAqB3+C,EAAK8a,EAAArpB,SAASmtD,YAAa,MAChD,OACA,OAAqB5+C,EAAK8a,EAAArpB,SAASotD,YAAa,MAChD,OACA,OACE7+C,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAArpB,SAASotD,YACT/jC,EAAArpB,SAASmtD,YACb,MAEF,QAAqB5+C,EAAK8a,EAAArpB,SAASqtD,YAAa,MAChD,QAAqB9+C,EAAK8a,EAAArpB,SAASstD,YAErC,MAEF,KAAK9wB,EAAeuvB,SAClB,OAAQ54E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAASutD,YAAa,MAChD,OACA,OAAqBh/C,EAAK8a,EAAArpB,SAASwtD,YAAa,MAChD,OACA,OAAqBj/C,EAAK8a,EAAArpB,SAASytD,YAAa,MAChD,QAAqBl/C,EAAK8a,EAAArpB,SAAS0tD,YAAa,MAChD,QAAqBn/C,EAAK8a,EAAArpB,SAAS2tD,YAAa,MAChD,OACA,OACOrK,EAAS/6E,QAAQc,WAAUklC,EAAK8a,EAAArpB,SAASytD,aAIlD,MAEF,KAAKjxB,EAAewvB,SAClB,OAAQ74E,EAAK5I,MACX,QAAqBgkC,EAAK8a,EAAArpB,SAAS4tD,YAAa,MAChD,QAAqBr/C,EAAK8a,EAAArpB,SAAS6tD,YAErC,MAEF,KAAKrxB,EAAeyvB,kBAClB,OAAQ94E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAArpB,SAAS8tD,gBAAiB,MACpD,OAAqBv/C,EAAK8a,EAAArpB,SAAS+tD,gBAAiB,MACpD,OAAqBx/C,EAAK8a,EAAArpB,SAASguD,gBAAiB,MACpD,OAAqBz/C,EAAK8a,EAAArpB,SAASiuD,gBAErC,MAEF,KAAKzxB,EAAe0vB,kBAClB,OAAQ/4E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAArpB,SAASkuD,gBAAiB,MACpD,OAAqB3/C,EAAK8a,EAAArpB,SAASmuD,gBAAiB,MACpD,OAAqB5/C,EAAK8a,EAAArpB,SAASouD,gBAAiB,MACpD,OAAqB7/C,EAAK8a,EAAArpB,SAASquD,gBAErC,MAEF,KAAK7xB,EAAe2vB,SAClB,OAAQh5E,EAAK5I,MACX,QAAqBgkC,EAAK8a,EAAArpB,SAASsuD,YAAa,MAChD,QAAqB//C,EAAK8a,EAAArpB,SAASuuD,YAErC,MAEF,KAAK/xB,EAAe4vB,SAClB,OAAQj5E,EAAK5I,MACX,QAAqBgkC,EAAK8a,EAAArpB,SAASwuD,YAAa,MAChD,QAAqBjgD,EAAK8a,EAAArpB,SAASyuD,YAErC,MAEF,KAAKjyB,EAAe6vB,QAClB,OAAQl5E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAASm3C,WAAY,MAC/C,OACA,OAAqB5oC,EAAK8a,EAAArpB,SAAS0uD,WAAY,MAC/C,OACA,OAAqBngD,EAAK8a,EAAArpB,SAAS2uD,WAAY,MAC/C,QAAqBpgD,EAAK8a,EAAArpB,SAAS4uD,WAAY,MAC/C,QAAqBrgD,EAAK8a,EAAArpB,SAAS6uD,WAAY,MAC/C,OACA,OACOvL,EAAS/6E,QAAQc,WAAUklC,EAAK8a,EAAArpB,SAAS2uD,YAIlD,MAEF,KAAKnyB,EAAe8vB,QAClB,OAAQn5E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAArpB,SAASq3C,WAAY,MAC/C,OACA,OAAqB9oC,EAAK8a,EAAArpB,SAAS8uD,WAAY,MAC/C,OACA,OAAqBvgD,EAAK8a,EAAArpB,SAAS+uD,WAAY,MAC/C,QAAqBxgD,EAAK8a,EAAArpB,SAASgvD,WAAY,MAC/C,QAAqBzgD,EAAK8a,EAAArpB,SAASivD,WAAY,MAC/C,OACA,OACO3L,EAAS/6E,QAAQc,WAAUklC,EAAK8a,EAAArpB,SAAS+uD,YAIlD,MAEF,KAAKvyB,EAAe+vB,QAClB,OAAQp5E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAArpB,SAASkvD,YAAa,MAChD,OAAqB3gD,EAAK8a,EAAArpB,SAASmvD,YAAa,MAChD,OAAqB5gD,EAAK8a,EAAArpB,SAASovD,YAAa,MAChD,OAAqB7gD,EAAK8a,EAAArpB,SAASqvD,YAAa,MAChD,OAAqB9gD,EAAK8a,EAAArpB,SAASsvD,YAAa,MAChD,OAAqB/gD,EAAK8a,EAAArpB,SAASuvD,YAAa,MAChD,QAAqBhhD,EAAK8a,EAAArpB,SAASwvD,WAAY,MAC/C,QAAqBjhD,EAAK8a,EAAArpB,SAASyvD,WAAY,MAC/C,OACA,OACOnM,EAAS/6E,QAAQc,WACpBklC,EAAc,GAATp7B,EAAK5I,KACN8+C,EAAArpB,SAASsvD,YACTjmC,EAAArpB,SAASuvD,aAKnB,MAEF,KAAK/yB,EAAegwB,QAClB,OAAQr5E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAArpB,SAAS0vD,YAAa,MAChD,OAAqBnhD,EAAK8a,EAAArpB,SAAS2vD,YAAa,MAChD,OAAqBphD,EAAK8a,EAAArpB,SAAS4vD,YAAa,MAChD,OAAqBrhD,EAAK8a,EAAArpB,SAAS6vD,YAAa,MAChD,OAAqBthD,EAAK8a,EAAArpB,SAAS8vD,YAAa,MAChD,OAAqBvhD,EAAK8a,EAAArpB,SAAS+vD,YAAa,MAChD,QAAqBxhD,EAAK8a,EAAArpB,SAASgwD,WAAY,MAC/C,QAAqBzhD,EAAK8a,EAAArpB,SAASiwD,WAAY,MAC/C,OACA,OACO3M,EAAS/6E,QAAQc,WACpBklC,EAAc,GAATp7B,EAAK5I,KACN8+C,EAAArpB,SAAS8vD,YACTzmC,EAAArpB,SAAS+vD,aAKnB,MAEF,KAAKvzB,EAAeiwB,QAClB,OAAQt5E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAArpB,SAASkwD,YAAa,MAChD,OAAqB3hD,EAAK8a,EAAArpB,SAASmwD,YAAa,MAChD,OAAqB5hD,EAAK8a,EAAArpB,SAASowD,YAAa,MAChD,OAAqB7hD,EAAK8a,EAAArpB,SAASqwD,YAAa,MAChD,OAAqB9hD,EAAK8a,EAAArpB,SAASswD,YAAa,MAChD,OAAqB/hD,EAAK8a,EAAArpB,SAASuwD,YAAa,MAChD,QAAqBhiD,EAAK8a,EAAArpB,SAASwwD,WAAY,MAC/C,QAAqBjiD,EAAK8a,EAAArpB,SAASywD,WAAY,MAC/C,OACA,OACOnN,EAAS/6E,QAAQc,WACpBklC,EAAc,GAATp7B,EAAK5I,KACN8+C,EAAArpB,SAASswD,YACTjnC,EAAArpB,SAASuwD,aAKnB,MAEF,KAAK/zB,EAAekwB,QAClB,OAAQv5E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAArpB,SAAS0wD,YAAa,MAChD,OAAqBniD,EAAK8a,EAAArpB,SAAS2wD,YAAa,MAChD,OAAqBpiD,EAAK8a,EAAArpB,SAAS4wD,YAAa,MAChD,OAAqBriD,EAAK8a,EAAArpB,SAAS6wD,YAAa,MAChD,OAAqBtiD,EAAK8a,EAAArpB,SAAS8wD,YAAa,MAChD,OAAqBviD,EAAK8a,EAAArpB,SAAS+wD,YAAa,MAChD,QAAqBxiD,EAAK8a,EAAArpB,SAASgxD,WAAY,MAC/C,QAAqBziD,EAAK8a,EAAArpB,SAASixD,WAAY,MAC/C,OACA,OACO3N,EAAS/6E,QAAQc,WACpBklC,EAAc,GAATp7B,EAAK5I,KACN8+C,EAAArpB,SAAS8wD,YACTznC,EAAArpB,SAAS+wD,cAQvB,IAAW,GAAPxiD,EAMF,OALA+0C,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAE5D,OADAooF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO23C,OAAOF,EAAIhpB,EAAMC,GAEjC,KAAKg3C,EAAe00B,SACpB,KAAK10B,EAAe20B,SACpB,KAAK30B,EAAe40B,UACpB,KAAK50B,EAAe60B,aACpB,KAAK70B,EAAe80B,WAClB,IAAKhO,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,OAEbw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZnE,GAAe,EACnB,OAAQn1C,EAAU0M,cAChB,KAAK02D,EAAe00B,SAClB,OAAQ/9E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQ62D,YAAa,MAC/C,OACA,OAAqBhjD,EAAK8a,EAAA3uB,QAAQ82D,YAAa,MAC/C,OACA,OAAqBjjD,EAAK8a,EAAA3uB,QAAQ+2D,YAAa,MAC/C,OACA,OAAqBljD,EAAK8a,EAAA3uB,QAAQg3D,YAAa,MAC/C,OACA,OACEnjD,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQg3D,YACRroC,EAAA3uB,QAAQ+2D,YACZ,MAEF,QAAqBljD,EAAK8a,EAAA3uB,QAAQi3D,YAAa,MAC/C,QAAqBpjD,EAAK8a,EAAA3uB,QAAQk3D,YAEpC,MAEF,KAAKp1B,EAAe20B,SAClB,OAAQh+E,EAAK5I,MACX,QAAqBgkC,EAAK8a,EAAA3uB,QAAQm3D,YAAa,MAC/C,QAAqBtjD,EAAK8a,EAAA3uB,QAAQo3D,YAEpC,MAEF,KAAKt1B,EAAe40B,UAClB,OAAQj+E,EAAK5I,MACX,QAAqBgkC,EAAK8a,EAAA3uB,QAAQq3D,aAAc,MAChD,QAAqBxjD,EAAK8a,EAAA3uB,QAAQs3D,aAEpC,MAEF,KAAKx1B,EAAe60B,aAClB,OAAQl+E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAA3uB,QAAQu3D,2BAA4B,MAC9D,OAAqB1jD,EAAK8a,EAAA3uB,QAAQw3D,2BAA4B,MAC9D,OAAqB3jD,EAAK8a,EAAA3uB,QAAQy3D,2BAA4B,MAC9D,OAAqB5jD,EAAK8a,EAAA3uB,QAAQ03D,2BAEpC,MAEF,KAAK51B,EAAe80B,WAClB,OAAQn+E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAA3uB,QAAQ23D,4BAA6B,MAC/D,OAAqB9jD,EAAK8a,EAAA3uB,QAAQ43D,4BAA6B,MAC/D,OAAqB/jD,EAAK8a,EAAA3uB,QAAQ63D,4BAA6B,MAC/D,OAAqBhkD,EAAK8a,EAAA3uB,QAAQ83D,6BAKxC,IAAW,GAAPjkD,EAMF,OALA+0C,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAE5D,OADAooF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOw3C,MAAMC,EAAIhpB,GAE1B,KAAKi3C,EAAei2B,SACpB,KAAKj2B,EAAek2B,SAClB,IAAKpP,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAMT,OALA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZnE,GAAmB,EACvB,OAAQn1C,EAAU0M,cAChB,KAAK02D,EAAei2B,SAClB,OAAQt/E,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAAle,YAAYwnD,YAAa,MACnD,OACA,OAAqBpkD,EAAK8a,EAAAle,YAAYynD,YAAa,MACnD,OACA,OAAqBrkD,EAAK8a,EAAAle,YAAY0nD,YAAa,MACnD,OACA,OAAqBtkD,EAAK8a,EAAAle,YAAY2nD,YAAa,MACnD,OACA,OACEvkD,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAAle,YAAY2nD,YACZzpC,EAAAle,YAAY0nD,YAIpB,MAEF,KAAKr2B,EAAek2B,SAClB,OAAQv/E,EAAK5I,MACX,OAAqBgkC,EAAK8a,EAAAle,YAAY4nD,aAAc,MACpD,OAAqBxkD,EAAK8a,EAAAle,YAAY6nD,aAAc,MACpD,OAAqBzkD,EAAK8a,EAAAle,YAAY8nD,aAAc,MACpD,OAAqB1kD,EAAK8a,EAAAle,YAAY+nD,aAAc,MACpD,OAAqB3kD,EAAK8a,EAAAle,YAAYgoD,aAAc,MACpD,OAAqB5kD,EAAK8a,EAAAle,YAAYioD,aAAc,MACpD,OAAqB7kD,EAAK8a,EAAAle,YAAYkoD,aAAc,MACpD,OAAqB9kD,EAAK8a,EAAAle,YAAYmoD,aAAc,MACpD,OACE/kD,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAAle,YAAYkoD,aACZhqC,EAAAle,YAAYgoD,aAChB,MAEF,OACE5kD,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAAle,YAAYmoD,aACZjqC,EAAAle,YAAYioD,cAOxB,IAAW,GAAP7kD,EAMF,OALA+0C,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,OAEbw8E,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKlO,IAAG,GAE3D,OADA+oF,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAOi9C,WAAWxF,EAAIhpB,EAAMC,GAErC,KAAKg3C,EAAe+2B,SACpB,KAAK/2B,EAAeg3B,QACpB,KAAKh3B,EAAei3B,SAClB,IAAKnQ,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZnE,GAAgB,EACpB,OAAQn1C,EAAU0M,cAChB,QAAS9D,QAAO,GAChB,KAAKw6D,EAAe+2B,SAAYhlD,EAAK8a,EAAArpB,SAAS0zD,UAAW,MACzD,KAAKl3B,EAAeg3B,QAAYjlD,EAAK8a,EAAArpB,SAAS2zD,SAAU,MACxD,KAAKn3B,EAAei3B,SAAYllD,EAAK8a,EAAArpB,SAAS4zD,UAE5CruE,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAC5D,OAAOpE,EAAO23C,OAAOF,EAAIhpB,EAAMC,GAEjC,KAAKg3C,EAAeq3B,SAClB,IAAKvQ,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAC5D,OAAOpE,EAAOw3C,MAAM+a,EAAA3uB,QAAQo5D,UAAWvuE,GAEzC,KAAKi3C,EAAeu3B,eAClB,IAAKzQ,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEk7E,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKvN,KACrBpE,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDsqB,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GACxDuqB,GAAO69D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAC5D,OAAOpE,EAAO88C,eAAeruB,EAAMC,EAAMC,IAE3C,KAAK+2C,EAAew3B,cACpB,KAAKx3B,EAAey3B,cAClB,IAAK3Q,EAAS/6E,QAAQW,WAAU,GAAgB,MAChD,GACEu7E,EAAkB9jE,EAAe48C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACrBjE,EAAO47C,cAGhB,IADIv/B,EAAOwN,EAAe,IACjBnN,GAAE,KAKT,OAJA8vE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEN/tF,EAAO47C,cAEZnE,GAAe,EACnB,OAAQn1C,EAAU0M,cAChB,QAAS9D,QAAO,GAChB,KAAKw6D,EAAew3B,cAClB,OAAQ7gF,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQ08C,gBAAiB,MACnD,OACA,OAAqB7oC,EAAK8a,EAAA3uB,QAAQw5D,gBAAiB,MACnD,OACA,OAAqB3lD,EAAK8a,EAAA3uB,QAAQy5D,gBAAiB,MACnD,OACA,OAAqB5lD,EAAK8a,EAAA3uB,QAAQ05D,gBAAiB,MACnD,OACA,OACE7lD,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQ05D,gBACR/qC,EAAA3uB,QAAQy5D,gBAIhB,MAEF,KAAK33B,EAAey3B,cAClB,OAAQ9gF,EAAK5I,MACX,OACA,OAAqBgkC,EAAK8a,EAAA3uB,QAAQw8C,gBAAiB,MACnD,OACA,OAAqB3oC,EAAK8a,EAAA3uB,QAAQ25D,gBAAiB,MACnD,OACA,OAAqB9lD,EAAK8a,EAAA3uB,QAAQ45D,gBAAiB,MACnD,OACA,OAAqB/lD,EAAK8a,EAAA3uB,QAAQ65D,gBAAiB,MACnD,OACA,OACEhmD,EAAK+0C,EAAS/6E,QAAQc,SAClBggD,EAAA3uB,QAAQ65D,gBACRlrC,EAAA3uB,QAAQ45D,iBAOpB,IAAW,GAAP/lD,EAMF,OALA+0C,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWsnB,oBAEbvB,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACrBjE,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKvN,KAAI,GAE5D,OADAooF,EAASxc,YAAchmE,EAAA2H,KAAK1N,KACrBjE,EAAOw3C,MAAMC,EAAIhpB,GAK1B,KAAKi3C,EAAeg4B,KAClB,IAGInxE,GAHAlQ,EAAOuwE,EAAqBJ,EAAU3iE,EAAeiuB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAchmE,EAAA2H,KAAK7N,IACvBuY,IACDkQ,GAAiBlQ,EAAKkQ,iBACHA,GAAe/T,aAAa85C,EAAA5kD,eAAekL,YAChE4zE,EAAS92E,MACP3L,EAAA4L,eAAegJ,wBACf8nD,EAAWz2D,OAENhQ,EAAO47C,eAET57C,EAAOyD,IAAI8oB,GAAe3c,IATf5P,EAAO47C,cAW3B,KAAK8pB,EAAei4B,cAClB,GACErQ,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK7N,IAAG,GAG3D,OAFA0oF,EAASlc,iBAAe,EACxBkc,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAOa,KAAK6kE,EAAei4B,cAAe,CAAElvE,GAAQ8jC,EAAAjyB,WAAWsY,MAExE,KAAK8sB,EAAek4B,cAClB,GACEtQ,EAAgBzjE,EAAe48C,EAAYnkE,GAC3CirF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAO47C,cAEZntB,EAAO+9D,EAASxX,kBAAkBl9B,EAAS,GAAI00C,EAAS/6E,QAAQI,UAAS,GACzE6c,EAAO89D,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAK7N,IAAG,GAG3D,OAFA0oF,EAASlc,iBAAe,EACxBkc,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAOa,KAAK6kE,EAAek4B,cAAe,CAAEnvE,EAAMC,GAAQ6jC,EAAAjyB,WAAWsY,MAO9E,OADIpmB,EAmBR,SACEg6D,EACAlqF,EACAw1C,EACA2uB,GAGA,OAAQnkE,EAAU0M,cAOhB,KAAK02D,EAAem4B,QAAS,OAAOC,EAASp4B,EAAerS,IAAKm5B,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACzG,KAAKf,EAAeq4B,QAAS,OAAOD,EAASp4B,EAAerS,IAAKm5B,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACzG,KAAKf,EAAes4B,QAAS,OAAOF,EAASp4B,EAAemoB,IAAKrB,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACzG,KAAKf,EAAeu4B,QAAS,OAAOH,EAASp4B,EAAemoB,IAAKrB,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACzG,KAAKf,EAAew4B,WAAY,OAAOJ,EAASp4B,EAAeuoB,OAAQzB,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/G,KAAKf,EAAey4B,WAAY,OAAOL,EAASp4B,EAAeuoB,OAAQzB,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAe04B,SAAU,OAAON,EAASp4B,EAAe4oB,KAAM9B,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3G,KAAKf,EAAe24B,SAAU,OAAOP,EAASp4B,EAAe4oB,KAAM9B,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC3G,KAAKf,EAAe44B,SAAU,OAAOR,EAASp4B,EAAe+oB,KAAMjC,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3G,KAAKf,EAAe64B,SAAU,OAAOT,EAASp4B,EAAe+oB,KAAMjC,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC3G,KAAKf,EAAe84B,QAAS,OAAOV,EAASp4B,EAAekpB,IAAKpC,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GACzG,KAAKf,EAAe+4B,QAAS,OAAOX,EAASp4B,EAAekpB,IAAKpC,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GACzG,KAAKf,EAAeg5B,QAAS,OAAOZ,EAASp4B,EAAe2F,IAAKmhB,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GACzG,KAAKf,EAAei5B,QAAS,OAAOb,EAASp4B,EAAe2F,IAAKmhB,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GACzG,KAAKf,EAAek5B,QAAS,OAAOd,EAASp4B,EAAe4pB,IAAK9C,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GACzG,KAAKf,EAAem5B,QAAS,OAAOf,EAASp4B,EAAe4pB,IAAK9C,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GACzG,KAAKf,EAAeo5B,SAAU,OAAOhB,EAASp4B,EAAe7S,KAAM25B,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC3G,KAAKf,EAAeq5B,SAAU,OAAOjB,EAASp4B,EAAe7S,KAAM25B,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAC3G,KAAKf,EAAes5B,UAAW,OAAOlB,EAASp4B,EAAe+pB,MAAOjD,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC7G,KAAKf,EAAeu5B,UAAW,OAAOnB,EAASp4B,EAAe+pB,MAAOjD,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAC7G,KAAKf,EAAew5B,aAAc,OAAOpB,EAASp4B,EAAeoqB,SAAUtD,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GACnH,KAAKf,EAAey5B,aAAc,OAAOrB,EAASp4B,EAAeoqB,SAAUtD,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GACnH,KAAKf,EAAe05B,YAAa,OAAOtB,EAASp4B,EAAeuqB,QAASzD,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GACjH,KAAKf,EAAe25B,YAAa,OAAOvB,EAASp4B,EAAeuqB,QAASzD,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GACjH,KAAKf,EAAe45B,oBAAqB,OAAOxB,EAASp4B,EAAe0qB,YAAa5D,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC7H,KAAKf,EAAe65B,oBAAqB,OAAOzB,EAASp4B,EAAe0qB,YAAa5D,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAC7H,KAAKf,EAAe85B,oBAAqB,OAAO1B,EAASp4B,EAAe0qB,YAAa5D,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAe+5B,oBAAqB,OAAO3B,EAASp4B,EAAe0qB,YAAa5D,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAeg6B,SAAU,OAAO5B,EAASp4B,EAAe+qB,KAAMjE,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC3G,KAAKf,EAAei6B,SAAU,OAAO7B,EAASp4B,EAAe+qB,KAAMjE,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAC3G,KAAKf,EAAek6B,UAAW,OAAO9B,EAASp4B,EAAekrB,MAAOpE,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC7G,KAAKf,EAAem6B,UAAW,OAAO/B,EAASp4B,EAAekrB,MAAOpE,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAC7G,KAAKf,EAAeo6B,YAAa,OAAOhC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7G,KAAKf,EAAeq6B,YAAa,OAAOjC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7G,KAAKf,EAAes6B,aAAc,OAAOlC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/G,KAAKf,EAAeu6B,aAAc,OAAOnC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/G,KAAKf,EAAew6B,SAAU,OAAOpC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3G,KAAKf,EAAey6B,YAAa,OAAOrC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7G,KAAKf,EAAe06B,YAAa,OAAOtC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7G,KAAKf,EAAe26B,aAAc,OAAOvC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAe46B,aAAc,OAAOxC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAe66B,aAAc,OAAOzC,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAe86B,aAAc,OAAO1C,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAe+6B,SAAU,OAAO3C,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC3G,KAAKf,EAAeg7B,SAAU,OAAO5C,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC3G,KAAKf,EAAei7B,SAAU,OAAO7C,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAC3G,KAAKf,EAAek7B,WAAY,OAAO9C,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7G,KAAKf,EAAem7B,YAAa,OAAO/C,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/G,KAAKf,EAAeo7B,UAAW,OAAOhD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7G,KAAKf,EAAeq7B,WAAY,OAAOjD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7G,KAAKf,EAAes7B,YAAa,OAAOlD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAeu7B,YAAa,OAAOnD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/G,KAAKf,EAAew7B,UAAW,OAAOpD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7G,KAAKf,EAAey7B,UAAW,OAAOrD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAC7G,KAAKf,EAAe07B,UAAW,OAAOtD,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAE/G,GAAI+lB,EAAS/6E,QAAQW,WAAU,IAC7B,OAAQ9P,EAAU0M,cAEhB,KAAK02D,EAAe27B,mBAAoB,OAAOvD,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAe47B,oBAAqB,OAAOxD,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAe67B,gBAAiB,OAAOzD,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACzH,KAAKf,EAAe87B,mBAAoB,OAAO1D,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC3H,KAAKf,EAAe+7B,oBAAqB,OAAO3D,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAeg8B,oBAAqB,OAAO5D,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAei8B,gBAAiB,OAAO7D,EAASp4B,EAAe5sB,YAAa0zC,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAEzH,KAAKf,EAAek8B,kBAAmB,OAAO9D,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAem8B,mBAAoB,OAAO/D,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAeo8B,iBAAkB,OAAOhE,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAeq8B,kBAAmB,OAAOjE,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC3H,KAAKf,EAAes8B,mBAAoB,OAAOlE,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAeu8B,mBAAoB,OAAOnE,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAew8B,iBAAkB,OAAOpE,EAASp4B,EAAe1sB,aAAcwzC,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAE3H,KAAKf,EAAey8B,sBAAuB,OAAOrE,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAe08B,uBAAwB,OAAOtE,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/H,KAAKf,EAAe28B,mBAAoB,OAAOvE,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAe48B,sBAAuB,OAAOxE,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAe68B,uBAAwB,OAAOzE,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAe88B,uBAAwB,OAAO1E,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAe+8B,mBAAoB,OAAO3E,EAASp4B,EAAe6rB,WAAY/E,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAE3H,KAAKf,EAAeg9B,sBAAuB,OAAO5E,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAei9B,uBAAwB,OAAO7E,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/H,KAAKf,EAAek9B,mBAAoB,OAAO9E,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAem9B,sBAAuB,OAAO/E,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAeo9B,uBAAwB,OAAOhF,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAeq9B,uBAAwB,OAAOjF,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAes9B,mBAAoB,OAAOlF,EAASp4B,EAAe8rB,WAAYhF,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAE3H,KAAKf,EAAeu9B,sBAAuB,OAAOnF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAew9B,uBAAwB,OAAOpF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/H,KAAKf,EAAey9B,mBAAoB,OAAOrF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAe09B,sBAAuB,OAAOtF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAe29B,uBAAwB,OAAOvF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAe49B,uBAAwB,OAAOxF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAe69B,mBAAoB,OAAOzF,EAASp4B,EAAe+rB,WAAYjF,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAE3H,KAAKf,EAAe89B,qBAAsB,OAAO1F,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAe+9B,sBAAuB,OAAO3F,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAeg+B,kBAAmB,OAAO5F,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACzH,KAAKf,EAAei+B,qBAAsB,OAAO7F,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC3H,KAAKf,EAAek+B,sBAAuB,OAAO9F,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAem+B,sBAAuB,OAAO/F,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAeo+B,kBAAmB,OAAOhG,EAASp4B,EAAegsB,UAAWlF,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAEzH,KAAKf,EAAeq+B,sBAAuB,OAAOjG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAes+B,uBAAwB,OAAOlG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/H,KAAKf,EAAeu+B,mBAAoB,OAAOnG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC3H,KAAKf,EAAew+B,sBAAuB,OAAOpG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC7H,KAAKf,EAAey+B,uBAAwB,OAAOrG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAe0+B,uBAAwB,OAAOtG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAe2+B,mBAAoB,OAAOvG,EAASp4B,EAAeisB,WAAYnF,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAE3H,KAAKf,EAAe4+B,uBAAwB,OAAOxG,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC/H,KAAKf,EAAe6+B,wBAAyB,OAAOzG,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACjI,KAAKf,EAAe8+B,oBAAqB,OAAO1G,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC7H,KAAKf,EAAe++B,uBAAwB,OAAO3G,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAC/H,KAAKf,EAAeg/B,wBAAyB,OAAO5G,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACjI,KAAKf,EAAei/B,wBAAyB,OAAO7G,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACjI,KAAKf,EAAek/B,oBAAqB,OAAO9G,EAASp4B,EAAeksB,YAAapF,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAE7H,KAAKf,EAAem/B,0BAA2B,OAAO/G,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACrI,KAAKf,EAAeo/B,2BAA4B,OAAOhH,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACvI,KAAKf,EAAeq/B,uBAAwB,OAAOjH,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACnI,KAAKf,EAAes/B,0BAA2B,OAAOlH,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACrI,KAAKf,EAAeu/B,2BAA4B,OAAOnH,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACvI,KAAKf,EAAew/B,2BAA4B,OAAOpH,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GACvI,KAAKf,EAAey/B,uBAAwB,OAAOrH,EAASp4B,EAAetsB,eAAgBozC,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAEnI,KAAKf,EAAe0/B,SAAU,OAAOtH,EAASp4B,EAAelsB,YAAagzC,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAClH,KAAKf,EAAe2/B,SAAU,OAAOvH,EAASp4B,EAAelsB,YAAagzC,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAGtH,GAAI+lB,EAAS/6E,QAAQW,WAAU,GAC7B,OAAQ9P,EAAU0M,cAEhB,KAAK02D,EAAe4/B,UAAW,OAAOxH,EAASp4B,EAAentB,KAAMi0C,EAAUxiF,EAAA2H,KAAKvN,KAAM0zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC9G,KAAKf,EAAe6/B,WAAY,OAAOzH,EAASp4B,EAAepuB,MAAOk1C,EAAUxiF,EAAA2H,KAAKvN,KAAM0zC,EAAU9tC,EAAA2H,KAAKG,KAAM20D,GAEhH,KAAKf,EAAe8/B,YAAa,OAAO1H,EAASp4B,EAAeutB,WAAYzG,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACpH,KAAKf,EAAe+/B,qBAAsB,OAAO3H,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKpO,GAAIkjE,GAClI,KAAKf,EAAeggC,qBAAsB,OAAO5H,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAK/N,GAAI6iE,GAClI,KAAKf,EAAeigC,mBAAoB,OAAO7H,EAASp4B,EAAewuB,kBAAmB1H,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAClI,KAAKf,EAAekgC,UAAW,OAAO9H,EAASp4B,EAAeqvB,SAAUvI,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAemgC,UAAW,OAAO/H,EAASp4B,EAAesvB,SAAUxI,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAeogC,UAAW,OAAOhI,EAASp4B,EAAeuvB,SAAUzI,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAeqgC,UAAW,OAAOjI,EAASp4B,EAAe00B,SAAU5N,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAesgC,qBAAsB,OAAOlI,EAASp4B,EAAeyvB,kBAAmB3I,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACpI,KAAKf,EAAeugC,qBAAsB,OAAOnI,EAASp4B,EAAeyvB,kBAAmB3I,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACpI,KAAKf,EAAewgC,qBAAsB,OAAOpI,EAASp4B,EAAe0vB,kBAAmB5I,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACpI,KAAKf,EAAeygC,qBAAsB,OAAOrI,EAASp4B,EAAe0vB,kBAAmB5I,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACpI,KAAKf,EAAe0gC,UAAW,OAAOtI,EAASp4B,EAAei2B,SAAUnP,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAe2gC,YAAa,OAAOvI,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAClH,KAAKf,EAAe4gC,YAAa,OAAOxI,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAClH,KAAKf,EAAe6gC,eAAgB,OAAOzI,EAASp4B,EAAew3B,cAAe1Q,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACzH,KAAKf,EAAe8gC,eAAgB,OAAO1I,EAASp4B,EAAey3B,cAAe3Q,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GACzH,KAAKf,EAAe+gC,SAAU,OAAO3I,EAASp4B,EAAe6vB,QAAS/I,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC9G,KAAKf,EAAeghC,SAAU,OAAO5I,EAASp4B,EAAe8vB,QAAShJ,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC9G,KAAKf,EAAeihC,WAAY,OAAO7I,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAekhC,WAAY,OAAO9I,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAemhC,WAAY,OAAO/I,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAeohC,WAAY,OAAOhJ,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAeqhC,WAAY,OAAOjJ,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAeshC,WAAY,OAAOlJ,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAeuhC,WAAY,OAAOnJ,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAChH,KAAKf,EAAewhC,WAAY,OAAOpJ,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAK/N,GAAIk0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAEhH,KAAKf,EAAeyhC,YAAa,OAAOrJ,EAASp4B,EAAeutB,WAAYzG,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrH,KAAKf,EAAe0hC,qBAAsB,OAAOtJ,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKnO,IAAKijE,GACpI,KAAKf,EAAe2hC,qBAAsB,OAAOvJ,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAK9N,IAAK4iE,GACpI,KAAKf,EAAe4hC,mBAAoB,OAAOxJ,EAASp4B,EAAewuB,kBAAmB1H,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnI,KAAKf,EAAe6hC,UAAW,OAAOzJ,EAASp4B,EAAeqvB,SAAUvI,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe8hC,UAAW,OAAO1J,EAASp4B,EAAesvB,SAAUxI,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe+hC,UAAW,OAAO3J,EAASp4B,EAAeuvB,SAAUzI,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAegiC,UAAW,OAAO5J,EAASp4B,EAAe00B,SAAU5N,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeiiC,qBAAsB,OAAO7J,EAASp4B,EAAeyvB,kBAAmB3I,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrI,KAAKf,EAAekiC,qBAAsB,OAAO9J,EAASp4B,EAAeyvB,kBAAmB3I,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrI,KAAKf,EAAemiC,qBAAsB,OAAO/J,EAASp4B,EAAe0vB,kBAAmB5I,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrI,KAAKf,EAAeoiC,qBAAsB,OAAOhK,EAASp4B,EAAe0vB,kBAAmB5I,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrI,KAAKf,EAAeqiC,UAAW,OAAOjK,EAASp4B,EAAei2B,SAAUnP,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAesiC,YAAa,OAAOlK,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAeuiC,YAAa,OAAOnK,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAewiC,eAAgB,OAAOpK,EAASp4B,EAAew3B,cAAe1Q,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC1H,KAAKf,EAAeyiC,eAAgB,OAAOrK,EAASp4B,EAAey3B,cAAe3Q,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC1H,KAAKf,EAAe0iC,SAAU,OAAOtK,EAASp4B,EAAe6vB,QAAS/I,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe2iC,SAAU,OAAOvK,EAASp4B,EAAe8vB,QAAShJ,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe4iC,WAAY,OAAOxK,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe6iC,WAAY,OAAOzK,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe8iC,WAAY,OAAO1K,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe+iC,WAAY,OAAO3K,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAegjC,WAAY,OAAO5K,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeijC,WAAY,OAAO7K,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAekjC,WAAY,OAAO9K,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAKnO,IAAKs0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAemjC,WAAY,OAAO/K,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAK9N,IAAKi0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAEjH,KAAKf,EAAeojC,YAAa,OAAOhL,EAASp4B,EAAeutB,WAAYzG,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrH,KAAKf,EAAeqjC,mBAAoB,OAAOjL,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAClI,KAAKf,EAAesjC,mBAAoB,OAAOlL,EAASp4B,EAAewuB,kBAAmB1H,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnI,KAAKf,EAAeujC,UAAW,OAAOnL,EAASp4B,EAAeqvB,SAAUvI,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAewjC,UAAW,OAAOpL,EAASp4B,EAAesvB,SAAUxI,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeyjC,UAAW,OAAOrL,EAASp4B,EAAeuvB,SAAUzI,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe0jC,UAAW,OAAOtL,EAASp4B,EAAe00B,SAAU5N,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe2jC,UAAW,OAAOvL,EAASp4B,EAAei2B,SAAUnP,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe4jC,YAAa,OAAOxL,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAe6jC,YAAa,OAAOzL,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAe8jC,eAAgB,OAAO1L,EAASp4B,EAAew3B,cAAe1Q,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC1H,KAAKf,EAAe+jC,eAAgB,OAAO3L,EAASp4B,EAAey3B,cAAe3Q,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC1H,KAAKf,EAAegkC,SAAU,OAAO5L,EAASp4B,EAAe6vB,QAAS/I,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAeikC,SAAU,OAAO7L,EAASp4B,EAAe8vB,QAAShJ,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAekkC,WAAY,OAAO9L,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAemkC,WAAY,OAAO/L,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeokC,WAAY,OAAOhM,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeqkC,WAAY,OAAOjM,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeskC,WAAY,OAAOlM,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeukC,WAAY,OAAOnM,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAewkC,WAAY,OAAOpM,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeykC,WAAY,OAAOrM,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe0kC,wBAAyB,OAAOtM,EAASp4B,EAAe80B,WAAYhO,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjI,KAAKf,EAAe2kC,wBAAyB,OAAOvM,EAASp4B,EAAe80B,WAAYhO,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAEjI,KAAKf,EAAe4kC,YAAa,OAAOxM,EAASp4B,EAAeutB,WAAYzG,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrH,KAAKf,EAAe6kC,mBAAoB,OAAOzM,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKjO,IAAK+iE,GAClI,KAAKf,EAAe8kC,mBAAoB,OAAO1M,EAASp4B,EAAewuB,kBAAmB1H,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnI,KAAKf,EAAe+kC,UAAW,OAAO3M,EAASp4B,EAAeqvB,SAAUvI,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeglC,UAAW,OAAO5M,EAASp4B,EAAesvB,SAAUxI,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeilC,UAAW,OAAO7M,EAASp4B,EAAe00B,SAAU5N,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeklC,UAAW,OAAO9M,EAASp4B,EAAei2B,SAAUnP,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAemlC,YAAa,OAAO/M,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAeolC,YAAa,OAAOhN,EAASp4B,EAAek2B,SAAUpP,EAAUxiF,EAAA2H,KAAK5N,IAAK+zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAeqlC,eAAgB,OAAOjN,EAASp4B,EAAew3B,cAAe1Q,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC1H,KAAKf,EAAeslC,eAAgB,OAAOlN,EAASp4B,EAAey3B,cAAe3Q,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKlO,IAAKgjE,GAC1H,KAAKf,EAAeulC,wBAAyB,OAAOnN,EAASp4B,EAAe80B,WAAYhO,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjI,KAAKf,EAAewlC,wBAAyB,OAAOpN,EAASp4B,EAAe80B,WAAYhO,EAAUxiF,EAAA2H,KAAK5N,IAAK+zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAEjI,KAAKf,EAAeylC,YAAa,OAAOrN,EAASp4B,EAAeutB,WAAYzG,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrH,KAAKf,EAAe0lC,mBAAoB,OAAOtN,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKzN,IAAKuiE,GAClI,KAAKf,EAAe2lC,mBAAoB,OAAOvN,EAASp4B,EAAewuB,kBAAmB1H,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnI,KAAKf,EAAe4lC,UAAW,OAAOxN,EAASp4B,EAAeqvB,SAAUvI,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe6lC,UAAW,OAAOzN,EAASp4B,EAAesvB,SAAUxI,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe8lC,UAAW,OAAO1N,EAASp4B,EAAeuvB,SAAUzI,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAe+lC,UAAW,OAAO3N,EAASp4B,EAAewvB,SAAU1I,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAegmC,UAAW,OAAO5N,EAASp4B,EAAe00B,SAAU5N,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeimC,UAAW,OAAO7N,EAASp4B,EAAe2vB,SAAU7I,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAekmC,UAAW,OAAO9N,EAASp4B,EAAe4vB,SAAU9I,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAemmC,UAAW,OAAO/N,EAASp4B,EAAe20B,SAAU7N,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeomC,WAAY,OAAOhO,EAASp4B,EAAe40B,UAAW9N,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAeqmC,SAAU,OAAOjO,EAASp4B,EAAe6vB,QAAS/I,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAesmC,SAAU,OAAOlO,EAASp4B,EAAe8vB,QAAShJ,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAeumC,SAAU,OAAOnO,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAewmC,SAAU,OAAOpO,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAeymC,SAAU,OAAOrO,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe0mC,SAAU,OAAOtO,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAKzN,IAAK4zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe2mC,sBAAuB,OAAOvO,EAASp4B,EAAe60B,aAAc/N,EAAUxiF,EAAA2H,KAAKlO,IAAKq0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjI,KAAKf,EAAe4mC,sBAAuB,OAAOxO,EAASp4B,EAAe60B,aAAc/N,EAAUxiF,EAAA2H,KAAK7N,IAAKg0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAEjI,KAAKf,EAAe6mC,YAAa,OAAOzO,EAASp4B,EAAeutB,WAAYzG,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACrH,KAAKf,EAAe8mC,mBAAoB,OAAO1O,EAASp4B,EAAe8tB,kBAAmBhH,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKxN,IAAKsiE,GAClI,KAAKf,EAAe+mC,mBAAoB,OAAO3O,EAASp4B,EAAewuB,kBAAmB1H,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnI,KAAKf,EAAegnC,UAAW,OAAO5O,EAASp4B,EAAeqvB,SAAUvI,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeinC,UAAW,OAAO7O,EAASp4B,EAAesvB,SAAUxI,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeknC,UAAW,OAAO9O,EAASp4B,EAAeuvB,SAAUzI,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAemnC,UAAW,OAAO/O,EAASp4B,EAAewvB,SAAU1I,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeonC,UAAW,OAAOhP,EAASp4B,EAAe00B,SAAU5N,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeqnC,UAAW,OAAOjP,EAASp4B,EAAe2vB,SAAU7I,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAesnC,UAAW,OAAOlP,EAASp4B,EAAe4vB,SAAU9I,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAeunC,UAAW,OAAOnP,EAASp4B,EAAe20B,SAAU7N,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjH,KAAKf,EAAewnC,WAAY,OAAOpP,EAASp4B,EAAe40B,UAAW9N,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACnH,KAAKf,EAAeynC,SAAU,OAAOrP,EAASp4B,EAAe6vB,QAAS/I,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe0nC,SAAU,OAAOtP,EAASp4B,EAAe8vB,QAAShJ,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe2nC,SAAU,OAAOvP,EAASp4B,EAAe+vB,QAASjJ,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe4nC,SAAU,OAAOxP,EAASp4B,EAAegwB,QAASlJ,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe6nC,SAAU,OAAOzP,EAASp4B,EAAeiwB,QAASnJ,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe8nC,SAAU,OAAO1P,EAASp4B,EAAekwB,QAASpJ,EAAUxiF,EAAA2H,KAAKxN,IAAK2zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAC/G,KAAKf,EAAe+nC,sBAAuB,OAAO3P,EAASp4B,EAAe60B,aAAc/N,EAAUxiF,EAAA2H,KAAKjO,IAAKo0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GACjI,KAAKf,EAAegoC,sBAAuB,OAAO5P,EAASp4B,EAAe60B,aAAc/N,EAAUxiF,EAAA2H,KAAK5N,IAAK+zC,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAEjI,KAAKf,EAAeioC,cAAe,OAAO7P,EAASp4B,EAAe+uB,aAAcjI,EAAUxiF,EAAA2H,KAAKpO,GAAIu0C,EAAU9tC,EAAA2H,KAAKvN,KAAMqiE,GAI5H,OAAO,EA3TMmnC,CAAYphB,EAAUlqF,EAAWw1C,EAAU2uB,KAEhD58C,GACF2iE,EAAS92E,MACP3L,EAAA4L,eAAeosD,sBACf0E,EAAWsnB,mBAAoBzrF,EAAU0M,cAGtCwjB,IAGXg6D,EAAS92E,MACP3L,EAAA4L,eAAe6sD,mBACfiE,EAAWxzC,WAAWjjB,MAAO1N,EAAU0M,cAElChP,EAAO47C,eAgThB,SAASkiD,EACP78F,EACAurF,EACA9pB,EACA5qB,EACAwrB,EACAmD,GAEAv7D,OAAOshF,EAASvpE,QAAQ/U,eAAeqD,IAAItQ,IAC3C,IAAIqB,EAAYkqF,EAASvpE,QAAQ/U,eAAe3M,IAAIN,GAEpD,OADAiK,OAAO5I,EAAUmR,MAAQ6+C,EAAA7kD,YAAY2N,oBAC9BmqE,EACLiH,EACmBlqF,EACnB,CAAEogE,GACF5qB,EACAwrB,EACAmD,GACY,GAKhB,SAAgB8V,EACdiQ,EACAj+D,EACAk4C,GAEA,IAAIxjD,EAAUupE,EAASvpE,QACnBjjB,EAASwsF,EAASxsF,OAElBoX,EAAiBo1E,EAASvpE,QAAQ7L,eACtC,IAAKA,EAAgB,OAAOpX,EAAO47C,cAEnC,IAGIiyD,EAHAh0F,EAAgBoJ,EAAQpJ,cAC5B,IAAMA,IAAiB2yE,EAAStW,gBAAgBr8D,GAAiB,OAAO7Z,EAAO47C,cAQ7EiyD,EALc,OAAZt/E,EAKWi+D,EAASxX,kBAAkBzmD,EAASnX,EAAeiF,KAAM,IAEzDjF,EAAeiF,KAAK+3C,aAAap0D,GAGhD,IAAI8tG,EAActhB,EAAS9U,mBAAmBjR,EAAWz2D,MAAMoD,OAAOwQ,gBAGtE,OADA4oE,EAASxc,YAAchmE,EAAA2H,KAAKG,KACrB9R,EAAOm6C,MAAM,KAAM,CACxBn6C,EAAOa,KACLgZ,EAAc7K,aAAc,CAC1B6+F,EACAC,EACA9tG,EAAOyD,IAAIgjE,EAAWz2D,MAAMyY,MAC5BzoB,EAAOyD,IAAIgjE,EAAWz2D,MAAM0Y,SAE9B6pC,EAAAjyB,WAAWsY,MAEb54C,EAAO47C,gBA6KX,SAASmyD,EAAmB1xF,GAC1B,IAAIvM,EAAQ,IAA+B,GAAKuM,EAAK+tE,WAKrD,OAJI/tE,EAAKK,GAAE,KAAoB5M,GAAK,MAChCuM,EAAKK,GAAE,KAAmB5M,GAAK,MAC/BuM,EAAKK,GAAE,OAAsB5M,GAAK,MAClCuM,EAAKi3D,YAAWxjE,GAAK,MAClBA,EAAK,GA2Dd,SAAS88E,EACPJ,EACA3iE,EACAiuB,EACA2uB,GAEA,GAAuB,GAAnB3uB,EAAS3sC,OACX,OAAK0e,GAAyC,GAAxBA,EAAc1e,OAO7B0e,EAAc,IANnB2iE,EAAS92E,MACP3L,EAAA4L,eAAe8sD,oCACfgE,EAAWsnB,mBAAoB,IAAKlkE,EAAgBA,EAAc1e,OAAOgT,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnB25B,EAAS3sC,OAAa,CACxB,GAAsB,OAAlB0e,GAA0BA,EAAc1e,OAAQ,CAClD,GAAI0e,EAAc1e,OAAS,EAKzB,OAJAqhF,EAAS92E,MACP3L,EAAA4L,eAAe8sD,oCACfgE,EAAWsnB,mBAAoB,IAAKlkE,EAAc1e,OAAOgT,SAAS,KAE7D,KAETquE,EAASxX,kBAAkBl9B,EAAS,GAAIjuB,EAAc,GAAE,QAExD2iE,EAASxX,kBAAkBl9B,EAAS,GAAI9tC,EAAA2H,KAAKyhD,MAE/C,OAAOo5B,EAASxc,YAYlB,OAVInmD,GAAiBA,EAAc1e,OAAS,GAC1CqhF,EAAS92E,MACP3L,EAAA4L,eAAe8sD,oCACfgE,EAAWsnB,mBAAoB,IAAKlkE,EAAc1e,OAAOgT,SAAS,KAGtEquE,EAAS92E,MACP3L,EAAA4L,eAAeuL,+BACfulD,EAAWunC,eAAgB,IAAKl2D,EAAS3sC,OAAOgT,SAAS,KAEpD,KAIT,SAAS8yE,EAAwBh+D,EAAwBu5D,GACvD,IAAIh6D,EACA7wB,EA6BJ,OA5BI6qF,EAAS/6E,QAAQc,UACnBigB,EAAOg6D,EAAS9pC,qBAAqBzvB,EAAYjpB,EAAA2H,KAAKuhD,QAAO,IAE3DX,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,OACtCsN,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAW55B,KACR,GAA9B6rD,EAAAhL,qBAAqB/0B,KACpB7wB,EAAQ4wD,EAAAjL,oBAAoB90B,IAAS,KAEtCg6D,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACf9/D,EAAWjjB,OAEbrO,GAAS,KAGX6wB,EAAOg6D,EAAS9pC,qBAAqBzvB,EAAYjpB,EAAA2H,KAAKwhD,QAAO,IAE3DZ,EAAApL,gBAAgB30B,IAAS+/B,EAAAhyB,aAAa0kB,OACtCsN,EAAAnL,kBAAkB50B,IAAS+/B,EAAAjyB,WAAW75B,MACrC9E,EAAQ4wD,EAAAlL,iBAAiB70B,IAAS,KAEnCg6D,EAAS92E,MACP3L,EAAA4L,eAAeo9E,2CACf9/D,EAAWjjB,OAEbrO,GAAS,IAGNA,EAIT,SAASgsF,EACP9jE,EACA48C,EACA+lB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEIpkF,EAAe,CACjB,IAAIe,EAAmBf,EAAc1e,OACrC,GAAwB,GAApByf,EAAuB,OAAO,EAClC1f,OAAO0f,GACHqjF,IAAuBzhB,EAASxc,YAAcnmD,EAAc,IAChE2iE,EAAS92E,MACP3L,EAAA4L,eAAe8sD,oCACfgE,EAAWsnB,mBAAoB,IAAKnjE,EAAiBzM,iBAGvDquE,EAAS92E,MACP3L,EAAA4L,eAAe8sD,oCACfgE,EAAWz2D,MAAO,IAAK,KAG3B,OAAO,EAIT,SAASk+E,EACPrkE,EACA48C,EACA+lB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEIpkF,EAAe,CACjB,IAAIe,EAAmBf,EAAc1e,OACrC,OAAwB,GAApByf,EAA8B,GAClC1f,OAAO0f,GACHqjF,IAAuBzhB,EAASxc,YAAcnmD,EAAc,IAChE2iE,EAAS92E,MACP3L,EAAA4L,eAAe8sD,oCACfgE,EAAWsnB,mBAAoB,IAAKnjE,EAAiBzM,YAEhD,GAET,OAAO,EAIT,SAASmvE,EACPzjE,EACA48C,EACAnkE,GAEA,OAAIunB,GACFvnB,EAAU2gB,QAAQvN,MAChB3L,EAAA4L,eAAeosD,sBACf0E,EAAWsnB,mBAAoBzrF,EAAU0M,cAEpC,GAEF,EAIT,SAASu+E,EACPz1C,EACAuB,EACAotB,EACA+lB,GAEA,OAAI10C,EAAS3sC,QAAUkuC,GACrBmzC,EAAS92E,MACP3L,EAAA4L,eAAeuL,+BACfulD,EAAWz2D,MAAOqpC,EAASl7B,WAAY25B,EAAS3sC,OAAOgT,YAElD,GAEF,EAIT,SAAS2vE,EACPh2C,EACAo2D,EACAC,EACA1nC,EACA+lB,GAEA,IAAIlE,EAAcxwC,EAAS3sC,OAC3B,OAAIm9E,EAAc4lB,GAChB1hB,EAAS92E,MACP3L,EAAA4L,eAAegwE,wCACflf,EAAWz2D,MAAOk+F,EAAgB/vF,WAAYmqE,EAAYnqE,YAErD,GACEmqE,EAAc6lB,GACvB3hB,EAAS92E,MACP3L,EAAA4L,eAAeuL,+BACfulD,EAAWz2D,MAAOm+F,EAAgBhwF,WAAYmqE,EAAYnqE,YAErD,GAEF,GA3sIT,SAAiBunD,GAEFA,EAAAinB,UAAY,0BACZjnB,EAAAmnB,QAAU,wBACVnnB,EAAAonB,UAAY,0BACZpnB,EAAAqnB,SAAW,yBACXrnB,EAAAsnB,YAAc,4BACdtnB,EAAAunB,SAAW,yBACXvnB,EAAAwnB,QAAU,wBACVxnB,EAAAynB,YAAc,4BACdznB,EAAA0nB,WAAa,2BACb1nB,EAAAx0C,WAAa,2BACbw0C,EAAA2nB,UAAY,0BACZ3nB,EAAA+nB,WAAa,2BACb/nB,EAAA4N,UAAY,0BAEZ5N,EAAArS,IAAM,oBACNqS,EAAAmoB,IAAM,oBACNnoB,EAAAuoB,OAAS,uBACTvoB,EAAA4oB,KAAO,qBACP5oB,EAAA+oB,KAAO,qBACP/oB,EAAAkpB,IAAM,oBACNlpB,EAAA2F,IAAM,oBACN3F,EAAA4pB,IAAM,oBACN5pB,EAAA7S,KAAO,qBACP6S,EAAA+pB,MAAQ,sBACR/pB,EAAAoqB,SAAW,yBACXpqB,EAAAuqB,QAAU,wBACVvqB,EAAA0qB,YAAc,4BACd1qB,EAAA+qB,KAAO,qBACP/qB,EAAAkrB,MAAQ,sBACRlrB,EAAAntB,KAAO,qBACPmtB,EAAApuB,MAAQ,sBACRouB,EAAA5sB,YAAc,4BACd4sB,EAAA1sB,aAAe,6BACf0sB,EAAA6rB,WAAa,2BACb7rB,EAAA8rB,WAAa,2BACb9rB,EAAA+rB,WAAa,2BACb/rB,EAAAgsB,UAAY,0BACZhsB,EAAAisB,WAAa,2BACbjsB,EAAAksB,YAAc,4BACdlsB,EAAAtsB,eAAiB,+BACjBssB,EAAAlsB,YAAc,4BACdksB,EAAA9rB,cAAgB,8BAEhB8rB,EAAAgoB,OAAS,uBACThoB,EAAAkoB,QAAU,wBACVloB,EAAAr6C,SAAW,yBACXq6C,EAAAxqB,OAAS,uBACTwqB,EAAA9pB,YAAc,4BACd8pB,EAAAzvB,WAAa,2BACbyvB,EAAAx6D,OAAS,uBACTw6D,EAAAx6C,UAAY,0BACZw6C,EAAA8sB,YAAc,4BACd9sB,EAAAhqB,cAAgB,8BAChBgqB,EAAAmtB,YAAc,4BACdntB,EAAAg4B,KAAO,qBAEPh4B,EAAAniE,GAAK,mBACLmiE,EAAAliE,IAAM,oBACNkiE,EAAAjiE,IAAM,oBACNiiE,EAAAhiE,IAAM,oBACNgiE,EAAA/hE,MAAQ,sBACR+hE,EAAA9hE,GAAK,mBACL8hE,EAAA7hE,IAAM,oBACN6hE,EAAA5hE,IAAM,oBACN4hE,EAAA3hE,IAAM,oBACN2hE,EAAA1hE,MAAQ,sBACR0hE,EAAAzhE,KAAO,qBACPyhE,EAAAxhE,IAAM,oBACNwhE,EAAAvhE,IAAM,oBACNuhE,EAAAthE,KAAO,qBACPshE,EAAA3gE,MAAQ,qBAER2gE,EAAAm4B,QAAU,wBACVn4B,EAAAq4B,QAAU,wBACVr4B,EAAAs4B,QAAU,wBACVt4B,EAAAu4B,QAAU,wBACVv4B,EAAAw4B,WAAa,2BACbx4B,EAAAy4B,WAAa,2BACbz4B,EAAA04B,SAAW,yBACX14B,EAAA24B,SAAW,yBACX34B,EAAA44B,SAAW,yBACX54B,EAAA64B,SAAW,yBAEX74B,EAAA84B,QAAU,wBACV94B,EAAA+4B,QAAU,wBACV/4B,EAAAg5B,QAAU,wBACVh5B,EAAAi5B,QAAU,wBACVj5B,EAAAk5B,QAAU,wBACVl5B,EAAAm5B,QAAU,wBACVn5B,EAAAo5B,SAAW,yBACXp5B,EAAAq5B,SAAW,yBACXr5B,EAAAs5B,UAAY,0BACZt5B,EAAAu5B,UAAY,0BACZv5B,EAAAw5B,aAAe,6BACfx5B,EAAAy5B,aAAe,6BACfz5B,EAAA05B,YAAc,4BACd15B,EAAA25B,YAAc,4BACd35B,EAAA45B,oBAAsB,oCACtB55B,EAAA65B,oBAAsB,oCACtB75B,EAAA85B,oBAAsB,oCACtB95B,EAAA+5B,oBAAsB,oCACtB/5B,EAAAg6B,SAAW,yBACXh6B,EAAAi6B,SAAW,yBACXj6B,EAAAk6B,UAAY,0BACZl6B,EAAAm6B,UAAY,0BAEZn6B,EAAAo6B,YAAc,4BACdp6B,EAAAq6B,YAAc,4BACdr6B,EAAAs6B,aAAe,6BACft6B,EAAAu6B,aAAe,6BACfv6B,EAAAw6B,SAAW,yBACXx6B,EAAAy6B,YAAc,4BACdz6B,EAAA06B,YAAc,4BACd16B,EAAA26B,aAAe,6BACf36B,EAAA46B,aAAe,6BACf56B,EAAA66B,aAAe,6BACf76B,EAAA86B,aAAe,6BACf96B,EAAA+6B,SAAW,yBACX/6B,EAAAg7B,SAAW,yBACXh7B,EAAAi7B,SAAW,yBACXj7B,EAAAk7B,WAAa,2BACbl7B,EAAAm7B,YAAc,4BACdn7B,EAAAo7B,UAAY,0BACZp7B,EAAAq7B,WAAa,2BACbr7B,EAAAs7B,YAAc,4BACdt7B,EAAAu7B,YAAc,4BACdv7B,EAAAw7B,UAAY,0BACZx7B,EAAAy7B,UAAY,0BACZz7B,EAAA07B,UAAY,0BAEZ17B,EAAA27B,mBAAqB,mCACrB37B,EAAA47B,oBAAsB,oCACtB57B,EAAA67B,gBAAkB,gCAClB77B,EAAA87B,mBAAqB,mCACrB97B,EAAA+7B,oBAAsB,oCACtB/7B,EAAAg8B,oBAAsB,oCACtBh8B,EAAAi8B,gBAAkB,gCAClBj8B,EAAAk8B,kBAAoB,kCACpBl8B,EAAAm8B,mBAAqB,mCACrBn8B,EAAAo8B,iBAAmB,iCACnBp8B,EAAAq8B,kBAAoB,kCACpBr8B,EAAAs8B,mBAAqB,mCACrBt8B,EAAAu8B,mBAAqB,mCACrBv8B,EAAAw8B,iBAAmB,iCACnBx8B,EAAAy8B,sBAAwB,sCACxBz8B,EAAA08B,uBAAyB,uCACzB18B,EAAA28B,mBAAqB,mCACrB38B,EAAA48B,sBAAwB,sCACxB58B,EAAA68B,uBAAyB,uCACzB78B,EAAA88B,uBAAyB,uCACzB98B,EAAA+8B,mBAAqB,mCACrB/8B,EAAAg9B,sBAAwB,sCACxBh9B,EAAAi9B,uBAAyB,uCACzBj9B,EAAAk9B,mBAAqB,mCACrBl9B,EAAAm9B,sBAAwB,sCACxBn9B,EAAAo9B,uBAAyB,uCACzBp9B,EAAAq9B,uBAAyB,uCACzBr9B,EAAAs9B,mBAAqB,mCACrBt9B,EAAAu9B,sBAAwB,sCACxBv9B,EAAAw9B,uBAAyB,uCACzBx9B,EAAAy9B,mBAAqB,mCACrBz9B,EAAA09B,sBAAwB,sCACxB19B,EAAA29B,uBAAyB,uCACzB39B,EAAA49B,uBAAyB,uCACzB59B,EAAA69B,mBAAqB,mCACrB79B,EAAA89B,qBAAuB,qCACvB99B,EAAA+9B,sBAAwB,sCACxB/9B,EAAAg+B,kBAAoB,kCACpBh+B,EAAAi+B,qBAAuB,qCACvBj+B,EAAAk+B,sBAAwB,sCACxBl+B,EAAAm+B,sBAAwB,sCACxBn+B,EAAAo+B,kBAAoB,kCACpBp+B,EAAAq+B,sBAAwB,sCACxBr+B,EAAAs+B,uBAAyB,uCACzBt+B,EAAAu+B,mBAAqB,mCACrBv+B,EAAAw+B,sBAAwB,sCACxBx+B,EAAAy+B,uBAAyB,uCACzBz+B,EAAA0+B,uBAAyB,uCACzB1+B,EAAA2+B,mBAAqB,mCACrB3+B,EAAA4+B,uBAAyB,uCACzB5+B,EAAA6+B,wBAA0B,wCAC1B7+B,EAAA8+B,oBAAsB,oCACtB9+B,EAAA++B,uBAAyB,uCACzB/+B,EAAAg/B,wBAA0B,wCAC1Bh/B,EAAAi/B,wBAA0B,wCAC1Bj/B,EAAAk/B,oBAAsB,oCACtBl/B,EAAAm/B,0BAA4B,0CAC5Bn/B,EAAAo/B,2BAA6B,2CAC7Bp/B,EAAAq/B,uBAAyB,uCACzBr/B,EAAAs/B,0BAA4B,0CAC5Bt/B,EAAAu/B,2BAA6B,2CAC7Bv/B,EAAAw/B,2BAA6B,2CAC7Bx/B,EAAAy/B,uBAAyB,uCACzBz/B,EAAA0/B,SAAW,yBACX1/B,EAAA2/B,SAAW,yBAEX3/B,EAAAutB,WAAa,2BACbvtB,EAAA8tB,kBAAoB,kCACpB9tB,EAAAwuB,kBAAoB,kCACpBxuB,EAAA+uB,aAAe,6BACf/uB,EAAA4/B,UAAY,0BACZ5/B,EAAA6/B,WAAa,2BACb7/B,EAAAqvB,SAAW,yBACXrvB,EAAAsvB,SAAW,yBACXtvB,EAAAuvB,SAAW,yBACXvvB,EAAAwvB,SAAW,yBACXxvB,EAAA00B,SAAW,yBACX10B,EAAAyvB,kBAAoB,kCACpBzvB,EAAA0vB,kBAAoB,kCACpB1vB,EAAAi2B,SAAW,yBACXj2B,EAAAk2B,SAAW,yBACXl2B,EAAA+2B,SAAW,yBACX/2B,EAAAg3B,QAAU,wBACVh3B,EAAAi3B,SAAW,yBACXj3B,EAAAq3B,SAAW,yBACXr3B,EAAAu3B,eAAiB,+BACjBv3B,EAAAw3B,cAAgB,8BAChBx3B,EAAAy3B,cAAgB,8BAChBz3B,EAAA2vB,SAAW,yBACX3vB,EAAA4vB,SAAW,yBACX5vB,EAAA20B,SAAW,yBACX30B,EAAA40B,UAAY,0BACZ50B,EAAA6vB,QAAU,wBACV7vB,EAAA8vB,QAAU,wBACV9vB,EAAA+vB,QAAU,wBACV/vB,EAAAgwB,QAAU,wBACVhwB,EAAAiwB,QAAU,wBACVjwB,EAAAkwB,QAAU,wBACVlwB,EAAA60B,aAAe,6BACf70B,EAAA80B,WAAa,2BAEb90B,EAAArhE,MAAQ,sBACRqhE,EAAAnhE,MAAQ,sBACRmhE,EAAAjhE,MAAQ,sBACRihE,EAAA/gE,MAAQ,sBACR+gE,EAAA7gE,MAAQ,sBACR6gE,EAAA5gE,MAAQ,sBAER4gE,EAAA8/B,YAAc,4BACd9/B,EAAA+/B,qBAAuB,qCACvB//B,EAAAggC,qBAAuB,qCACvBhgC,EAAAigC,mBAAqB,mCACrBjgC,EAAAkgC,UAAY,0BACZlgC,EAAAmgC,UAAY,0BACZngC,EAAAogC,UAAY,0BACZpgC,EAAAqgC,UAAY,0BACZrgC,EAAAsgC,qBAAuB,qCACvBtgC,EAAAugC,qBAAuB,qCACvBvgC,EAAAwgC,qBAAuB,qCACvBxgC,EAAAygC,qBAAuB,qCACvBzgC,EAAA0gC,UAAY,0BACZ1gC,EAAA2gC,YAAc,4BACd3gC,EAAA4gC,YAAc,4BACd5gC,EAAA6gC,eAAiB,+BACjB7gC,EAAA8gC,eAAiB,+BACjB9gC,EAAA+gC,SAAW,yBACX/gC,EAAAghC,SAAW,yBACXhhC,EAAAihC,WAAa,2BACbjhC,EAAAkhC,WAAa,2BACblhC,EAAAmhC,WAAa,2BACbnhC,EAAAohC,WAAa,2BACbphC,EAAAqhC,WAAa,2BACbrhC,EAAAshC,WAAa,2BACbthC,EAAAuhC,WAAa,2BACbvhC,EAAAwhC,WAAa,2BAEbxhC,EAAAyhC,YAAc,4BACdzhC,EAAA0hC,qBAAuB,qCACvB1hC,EAAA2hC,qBAAuB,qCACvB3hC,EAAA4hC,mBAAqB,mCACrB5hC,EAAA6hC,UAAY,0BACZ7hC,EAAA8hC,UAAY,0BACZ9hC,EAAA+hC,UAAY,0BACZ/hC,EAAAgiC,UAAY,0BACZhiC,EAAAiiC,qBAAuB,qCACvBjiC,EAAAkiC,qBAAuB,qCACvBliC,EAAAmiC,qBAAuB,qCACvBniC,EAAAoiC,qBAAuB,qCACvBpiC,EAAAqiC,UAAY,0BACZriC,EAAAsiC,YAAc,4BACdtiC,EAAAuiC,YAAc,4BACdviC,EAAAwiC,eAAiB,+BACjBxiC,EAAAyiC,eAAiB,+BACjBziC,EAAA0iC,SAAW,yBACX1iC,EAAA2iC,SAAW,yBACX3iC,EAAA4iC,WAAa,2BACb5iC,EAAA6iC,WAAa,2BACb7iC,EAAA8iC,WAAa,2BACb9iC,EAAA+iC,WAAa,2BACb/iC,EAAAgjC,WAAa,2BACbhjC,EAAAijC,WAAa,2BACbjjC,EAAAkjC,WAAa,2BACbljC,EAAAmjC,WAAa,2BAEbnjC,EAAAojC,YAAc,4BACdpjC,EAAAqjC,mBAAqB,mCACrBrjC,EAAAsjC,mBAAqB,mCACrBtjC,EAAAujC,UAAY,0BACZvjC,EAAAwjC,UAAY,0BACZxjC,EAAAyjC,UAAY,0BACZzjC,EAAA0jC,UAAY,0BACZ1jC,EAAA2jC,UAAY,0BACZ3jC,EAAA4jC,YAAc,4BACd5jC,EAAA6jC,YAAc,4BACd7jC,EAAA8jC,eAAiB,+BACjB9jC,EAAA+jC,eAAiB,+BACjB/jC,EAAAgkC,SAAW,yBACXhkC,EAAAikC,SAAW,yBACXjkC,EAAAkkC,WAAa,2BACblkC,EAAAmkC,WAAa,2BACbnkC,EAAAokC,WAAa,2BACbpkC,EAAAqkC,WAAa,2BACbrkC,EAAAskC,WAAa,2BACbtkC,EAAAukC,WAAa,2BACbvkC,EAAAwkC,WAAa,2BACbxkC,EAAAykC,WAAa,2BACbzkC,EAAA0kC,wBAA0B,wCAC1B1kC,EAAA2kC,wBAA0B,wCAE1B3kC,EAAA4kC,YAAc,4BACd5kC,EAAA6kC,mBAAqB,mCACrB7kC,EAAA8kC,mBAAqB,mCACrB9kC,EAAA+kC,UAAY,0BACZ/kC,EAAAglC,UAAY,0BACZhlC,EAAAilC,UAAY,0BACZjlC,EAAAklC,UAAY,0BACZllC,EAAAmlC,YAAc,4BACdnlC,EAAAolC,YAAc,4BACdplC,EAAAqlC,eAAiB,+BACjBrlC,EAAAslC,eAAiB,+BACjBtlC,EAAAulC,wBAA0B,wCAC1BvlC,EAAAwlC,wBAA0B,wCAE1BxlC,EAAAylC,YAAc,4BACdzlC,EAAA0lC,mBAAqB,mCACrB1lC,EAAA2lC,mBAAqB,mCACrB3lC,EAAA4lC,UAAY,0BACZ5lC,EAAA6lC,UAAY,0BACZ7lC,EAAA8lC,UAAY,0BACZ9lC,EAAA+lC,UAAY,0BACZ/lC,EAAAgmC,UAAY,0BACZhmC,EAAAimC,UAAY,0BACZjmC,EAAAkmC,UAAY,0BACZlmC,EAAAmmC,UAAY,0BACZnmC,EAAAomC,WAAa,2BACbpmC,EAAAqmC,SAAW,yBACXrmC,EAAAsmC,SAAW,yBACXtmC,EAAAumC,SAAW,yBACXvmC,EAAAwmC,SAAW,yBACXxmC,EAAAymC,SAAW,yBACXzmC,EAAA0mC,SAAW,yBACX1mC,EAAA2mC,sBAAwB,sCACxB3mC,EAAA4mC,sBAAwB,sCAExB5mC,EAAA6mC,YAAc,4BACd7mC,EAAA8mC,mBAAqB,mCACrB9mC,EAAA+mC,mBAAqB,mCACrB/mC,EAAAgnC,UAAY,0BACZhnC,EAAAinC,UAAY,0BACZjnC,EAAAknC,UAAY,0BACZlnC,EAAAmnC,UAAY,0BACZnnC,EAAAonC,UAAY,0BACZpnC,EAAAqnC,UAAY,0BACZrnC,EAAAsnC,UAAY,0BACZtnC,EAAAunC,UAAY,0BACZvnC,EAAAwnC,WAAa,2BACbxnC,EAAAynC,SAAW,yBACXznC,EAAA0nC,SAAW,yBACX1nC,EAAA2nC,SAAW,yBACX3nC,EAAA4nC,SAAW,yBACX5nC,EAAA6nC,SAAW,yBACX7nC,EAAA8nC,SAAW,yBACX9nC,EAAA+nC,sBAAwB,sCACxB/nC,EAAAgoC,sBAAwB,sCAExBhoC,EAAAioC,cAAgB,8BAGhBjoC,EAAA4L,UAAY,wBACZ5L,EAAA6L,UAAY,sBACZ7L,EAAAi4B,cAAgB,0BAChBj4B,EAAAk4B,cAAgB,0BAGhBl4B,EAAA53C,MAAQ,yBACR43C,EAAA73C,QAAU,2BACV63C,EAAA93C,KAAO,wBAGP83C,EAAAysB,YAAc,0BACdzsB,EAAA2sB,YAAc,0BACd3sB,EAAA5pB,YAAc,0BACd4pB,EAAAzpB,YAAc,0BACdypB,EAAA0oC,gBAAkB,8BAClB1oC,EAAA2oC,YAAc,0BACd3oC,EAAA4oC,aAAe,2BAGf5oC,EAAA6oC,mBAAqB,kCACrB7oC,EAAA8oC,cAAgB,6BAChB9oC,EAAA+oC,iBAAmB,6BACnB/oC,EAAAgpC,mBAAqB,+BACrBhpC,EAAAipC,iBAAmB,6BACnBjpC,EAAAkpC,gBAAkB,4BAClBlpC,EAAAmpC,kBAAoB,8BAGpBnpC,EAAA59D,UAAY,4BACZ49D,EAAAx9D,WAAa,6BACbw9D,EAAA39D,WAAa,6BACb29D,EAAAt9D,YAAc,8BACds9D,EAAA19D,WAAa,6BACb09D,EAAAr9D,YAAc,8BACdq9D,EAAAz9D,WAAa,6BACby9D,EAAAp9D,YAAc,8BACdo9D,EAAAv9D,kBAAoB,oCACpBu9D,EAAAn9D,aAAe,+BACfm9D,EAAAl9D,aAAe,+BAGfk9D,EAAAkM,QAAU,eACVlM,EAAA4hB,KAAO,YACP5hB,EAAA+hB,QAAU,eACV/hB,EAAAopC,aAAe,oBAza9B,CAAiBppC,EAAA3lE,EAAA2lE,iBAAA3lE,EAAA2lE,eAAc,KA6a/B3lE,EAAAwlF,cAs1GAxlF,EAAAw8E,eA2CAx8E,EAAAiyE,oBAAA,SAAoCwa,WAC9BxsF,EAASwsF,EAASxsF,OAClB4oF,EAAQ,IAAIthF,MACZ02C,EAAUwuC,EAASza,mBAAmB,CAAE/nE,EAAA2H,KAAK7N,KAAOkG,EAAA2H,KAAKG,MACzD2hE,EAAiB+Y,EAAS/6E,QAAQgiE,eAClCj5D,EAAgBtP,OAAOshF,EAASvpE,QAAQzI,eAE5CgyE,EAAStW,gBAAgB17D,OAEzB,IAAoB,IAAA4J,EAAArP,EAAAy3E,EAASvpE,QAAQ/U,eAAeyM,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAAzD,IAAIa,EAAO0F,EAAA7Z,MACd,GAAImU,EAAQrC,MAAQ6+C,EAAA7kD,YAAY6Q,OAAhC,CACA,IAAI4tD,EAAiBp2D,EACjByW,EAAiB2/C,EAAO7vD,KAAKkQ,eACjC,GACE2/C,EAAOxvD,GAAG5S,EAAApH,YAAYswE,WACH,OAAnBzmD,IACCA,EAAe/T,aAAa85C,EAAA5kD,eAAekL,WAE5C,GAAIszD,EAAOxvD,GAAG5S,EAAApH,YAAYsiB,SAAU,CAClC,IAAIrjB,EAAQuqE,EAAOnnD,sBACfq7B,QAAQz+C,IAAU0+C,SAAS1+C,KAC7BinF,EAAMhqE,KACJ5e,EAAOa,KAAK2Z,EAAcxL,aAAc,CACtCw9E,EAAS/6E,QAAQc,SACbvS,EAAO0D,IAAI08C,QAAQz+C,GAAQ0+C,SAAS1+C,IACpC3B,EAAOyD,IAAI28C,QAAQz+C,KACtB4wD,EAAAjyB,WAAWsY,YAIlBgwC,EAAMhqE,KACJ5e,EAAO46C,GACL56C,EAAOm4C,UAAU,EACfn4C,EAAOq4C,WAAW6zB,EAAOl9D,aAAcykE,IAEzCzzE,EAAOa,KAAK2Z,EAAcxL,aAAc,CACtChP,EAAOi4C,UAAU,EAAGw7B,GACpBzzE,EAAOi4C,UAAU,EAAGsa,EAAAjyB,WAAW75B,MAC9B8rD,EAAAjyB,WAAWsY,2GAMxB54C,EAAOy9C,YAAYioB,EAAei4B,cAAe3/C,EAAS,CAAEy1B,GAC1DmV,EAAMz9E,OACFnL,EAAOm6C,MAAM,KAAMyuC,GACnB5oF,EAAO86C,QAKf/6C,EAAAkyE,oBAAA,SAAoCua,mBAC9BvpE,EAAUupE,EAASvpE,QACnBjjB,EAASwsF,EAASxsF,OAClB6R,EAAYoR,EAAQxR,QAAQI,UAC5B4hE,EAAiB5hE,EAAUsiD,eAC3B46C,EAAiBl9F,EAAU+gD,SAC3Bo8C,EAAQxiB,EAASza,mBAAmB,CAAElgE,EAAW7H,EAAA2H,KAAKlO,KAAOuG,EAAA2H,KAAKG,MAClExD,EAAiB2U,EAAQ3U,eACzBkM,EAAgBtP,OAAO+X,EAAQzI,eAC/By0F,EAAS,IAAI3nG,MACbilD,EAAWgG,EAAA7N,SAAS1iD,OAAOhC,GAE3BkvG,EAAQ3iD,EAASQ,mBACnB/sD,EAAO86C,MACP96C,EAAOu4C,KAAKw2D,GAAgB,EAC1Bt7B,GAAkBlhB,EAAAjyB,WAAW55B,IACzB1G,EAAO23C,OAAO4a,EAAArpB,SAAS23C,OACrB7gF,EAAOi4C,UAAU,EAAGw7B,GACpBzzE,EAAO0D,IAAI,IAEb1D,EAAO23C,OAAO4a,EAAArpB,SAAS03C,OACrB5gF,EAAOi4C,UAAU,EAAGw7B,GACpBzzE,EAAOyD,IAAI,IAEjB8uD,EAAAjyB,WAAW75B,IACX,IAIA0oG,EAAS,MACb,IAA2B,IAAAC,EAAAr6F,EAAAzG,GAAc+gG,EAAAD,EAAAn6F,QAAAo6F,EAAAn6F,KAAAm6F,EAAAD,EAAAn6F,OAAE,CAAlC,IAAAwG,EAAArG,EAAAi6F,EAAA1tG,MAAA,GAACiO,EAAA6L,EAAA,GAAIwK,EAAAxK,EAAA,GACZvQ,OAAO+a,EAAS5J,KAAKi3D,WACrBpoE,OAAO0E,GAAMu/F,KAEb,IAAIG,OAAS,EACThhF,EAAO,IAAIhnB,MAGf,GAAI2e,EAASspF,sBAAwBD,EAAYrpF,EAASnP,aAAa,iBAAkB,CACvF5L,OAAOokG,EAAU77F,MAAQ6+C,EAAA7kD,YAAY2N,oBACrC,IAAIo0F,EAAYvsF,EAAQhU,SAASoM,gBAAmCi0F,EAAW,MAC/E,GAAKE,GAAchjB,EAAStW,gBAAgBs5B,GAIrC,CACL,IAAIC,EAAWD,EAAUx+F,UACzB9F,OACoC,GAAlCukG,EAAS/nF,eAAevc,QACxBskG,EAAS/nF,eAAe,IAAM1d,EAAA2H,KAAK7N,KACnC2rG,EAASp+E,YAAcrnB,EAAA2H,KAAKG,MAC5B29F,EAAShoF,UAAYxB,EAAS5J,MAEhCiS,EAAK1P,KACH5e,EAAOa,KAAK2uG,EAAUxgG,aAAc,CAClChP,EAAOi4C,UAAU,EAAGw7B,GACpBzzE,EAAOi4C,UAAU,EAAGsa,EAAAjyB,WAAW75B,MAC9B8rD,EAAAjyB,WAAWsY,YAfhBtqB,EAAK1P,KACH5e,EAAO47C,mBAmBN,CACL,IAAI1/B,EAAU+J,EAAS/J,QACvB,GAAIA,MACF,IAAmB,IAAAC,GAAA3F,OAAA,EAAAzB,EAAAmH,EAAQvB,WAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAAhC,IAAIyG,EAAMU,EAAAza,MACb,GAAI+Z,EAAOjI,MAAQ6+C,EAAA7kD,YAAYuO,OACjBN,EAAQzK,SAAWgV,GACLvK,EAAQW,KAClBi3D,UAAW,CACvB,IAAIo8B,EAAsBh0F,EAAQwN,aAClChe,OAAOwkG,GAAe,GACtBphF,EAAK1P,KAEH5e,EAAO46C,GACL56C,EAAOm4C,UAAU,EACfn4C,EAAOu4C,KAAKw2D,GAAgB,EAC1B/uG,EAAOi4C,UAAU,EAAGw7B,GACpBA,EAAgBi8B,IAGpB1vG,EAAOa,KAAK2Z,EAAcxL,aAAc,CACtChP,EAAOi4C,UAAU,EAAGw7B,GACpBzzE,EAAOi4C,UAAU,EAAGsa,EAAAjyB,WAAW75B,MAC9B8rD,EAAAjyB,WAAWsY,4GASzB3yB,EAAS6D,MAAMwE,EAAK1P,KAAK5e,EAAOg7C,UACrC,IAAIb,EAAQoS,EAASE,SACnB8/B,EAAApV,QAAQn3E,EAAQsuB,EAAMikC,EAAAjyB,WAAWsY,OAEnC2T,EAASU,mBAAmBiiD,EAAO/0D,EAAO,CAAEvqC,IAC5Cq/F,EAAOrwF,KAAKu7B,yGAEd,IAA2B,IAAAw1D,EAAA56F,EAAAzG,GAAcshG,EAAAD,EAAA16F,QAAA26F,EAAA16F,KAAA06F,EAAAD,EAAA16F,OAAE,CAAlC,IAAAE,EAAAC,EAAAw6F,EAAAjuG,MAAA,GACHmoB,GADIla,EAAAuF,EAAA,IAAI8Q,EAAA9Q,EAAA,IACQ2U,MAChBA,GACFyiC,EAASI,UAAUsiD,EAAOr/F,GAAKq/F,EAAOnlF,EAAKla,uGAG/Cq/F,EAAOrwF,KACL2tC,EAASE,SACPzsD,EAAO47C,gBAGX2Q,EAASU,mBAAmBiiD,EAAOD,EAAOA,EAAO9jG,OAAS,GAAI,IAC9DqhF,EAAStW,gBAAgB17D,GACzBxa,EAAOy9C,YAAYioB,EAAek4B,cAAeoR,EAAO,CAAEv7B,GAAkBlnB,EAASa,iBAAiB8hD,EAAO,KAa/GnvG,EAAAmyE,YAAA,SAA4Bsa,WACtBvpE,EAAUupE,EAASvpE,QACnBjjB,EAASwsF,EAASxsF,OAClBsO,EAAiB2U,EAAQ3U,eACzB+tE,EAAQ/tE,EAAeytC,KACvBA,EAAO,EAAI,EAAIsgC,EACfztB,EAAO,IAAI1mD,WAAW6zC,GAC1B7xC,EAAAyF,SAAS0sE,EAAOztB,EAAM,GACtB,IAAIokC,EAAM,EACN/mE,EAAchJ,EAAQ5L,wBACtBw4F,EAAe5jF,EAAY3pB,UAC3BmX,EAAiBwJ,EAAQxJ,eACzBE,EAAesJ,EAAQtJ,aACvBC,EAAeqJ,EAAQrJ,aACvBu1F,EAAS,MACb,IAA2B,IAAAW,EAAA/6F,EAAAzG,GAAcyhG,EAAAD,EAAA76F,QAAA86F,EAAA76F,KAAA66F,EAAAD,EAAA76F,OAAE,CAAlC,IAAAmP,EAAAhP,EAAA26F,EAAApuG,MAAA,GAACiO,EAAAwU,EAAA,GAAI6B,EAAA7B,EAAA,GACZlZ,OAAO0E,GAAMu/F,KACb,IAAIr/F,EAAuB,EAE3B,GADImW,EAAS+pF,YAAWlgG,GAAK,IACzBmW,IAAagG,GAAehG,EAASyD,QAAQmmF,GAAe,CAC9D,IAAIt1E,EAAYtU,EAAS+F,oBACzBlc,GAAK,EACDmW,EAASyD,QAAQjQ,KAAiB3J,GAAK,GAC3CA,GAAS,GAA8Bi+F,EAAmBxzE,QACrD,GAAItU,EAASyD,QAAQ/P,GAAe,CACzC,IAAIkQ,EAAgB3e,OAAO+a,EAAS6F,mBAAmBnS,IACvDzO,OAA+B,GAAxB2e,EAAc1e,QACrB2E,GAAK,EACLA,GAAS,GAA8Bi+F,EAAmBlkF,EAAc,SAC/D5D,EAASyD,QAAQ9P,KACtBiQ,EAAgB3e,OAAO+a,EAAS6F,mBAAmBlS,IACvD1O,OAA+B,GAAxB2e,EAAc1e,QACrB2E,GAAK,EACLA,GAAS,MAA4Bi+F,EAAmBlkF,EAAc,IACtE/Z,GAAS,GAA8Bi+F,EAAmBlkF,EAAc,KAE1E3f,EAAAyF,SAASG,EAAO8+C,EAAMokC,GAAMA,GAAO,EACnC/sE,EAASmE,UAAYta,EACrB,IAAIga,EAAO7D,EAAS6D,KACpB5f,EAAAyF,SAASma,EAAOA,EAAKla,GAAK,EAAGg/C,EAAMokC,GAAMA,GAAO,oGAElD9nF,OAAO8nF,GAAOj3C,GACd,IAAIlqC,EAAYoR,EAAQxR,QAAQI,UAC5BsjC,EAAUq3C,EAAShV,iBAAiB5oB,GACxC,GAAsB,GAAlB/8C,EAAUkqC,KAAW,CACvB,IAAIvsC,EAAS2lC,EAAQ3lC,OACrBxP,EAAOo9C,UAAUsoB,EAAe6L,UAAWhf,EAAAjyB,WAAW55B,KAAK,EAAO1G,EAAO0D,IAAI08C,QAAQ5wC,GAAS6wC,SAAS7wC,UAEvGxP,EAAOo9C,UAAUsoB,EAAe6L,UAAWhf,EAAAjyB,WAAW75B,KAAK,EAAOzG,EAAOyD,IAAI28C,QAAQjL,EAAQ3lC,4RCzmIjG,IAAA8iD,EAAA9xD,EAAA,GAIAyvG,EAAA,WAKI,SAAAA,EAAYC,GACR,SADQ,IAAAA,MAAA,GAJJ7vG,KAAAqlB,KAAsB,IAAIpe,MAC1BjH,KAAA8vG,QAAkB,KAClB9vG,KAAA+vG,QAAgB,GAGbF,EAAY,GACf7vG,KAAK+vG,SAAW/vG,KAAK8vG,QACrBD,IAyBZ,OArBID,EAAA3tG,UAAA+tG,QAAA,SAAQC,GACJjwG,KAAKqlB,KAAK9G,KAAKve,KAAK+vG,QAAUE,IAGlCL,EAAA3tG,UAAAiuG,WAAA,WACIlwG,KAAK+vG,SAAW/vG,KAAK8vG,SAGzBF,EAAA3tG,UAAAkuG,WAAA,WACInwG,KAAK+vG,QAAU/vG,KAAK+vG,QAAQxhF,QAAQvuB,KAAK8vG,QAAS,KAGtDF,EAAA3tG,UAAAmuG,OAAA,SAAO/qF,eACH,IAAgB,IAAAgrF,EAAA37F,EAAA2Q,GAAIirF,EAAAD,EAAAz7F,QAAA07F,EAAAz7F,KAAAy7F,EAAAD,EAAAz7F,OAAE,CAAjB,IAAIq7F,EAAGK,EAAAhvG,MACRtB,KAAKqlB,KAAK9G,KAAK0xF,uGAIvBlvG,OAAAC,eAAI4uG,EAAA3tG,UAAA,UAAO,KAAX,WACI,OAAOjC,KAAKqlB,sCAEpBuqF,EAjCA,GAAalwG,EAAAkwG,aAmCb,IAAAW,EAAA,oBAAAA,KA+BE,OA1BSA,EAAAC,cAAqC,IAAIppG,IAAI,CAClD,CAAC,KAAM,QACP,CAAC,MAAO,SACR,CAAC,MAAO,SACR,CAAC,MAAO,SACR,CAAC,QAAS,SACV,CAAC,KAAM,SACP,CAAC,MAAO,UACR,CAAC,MAAO,UACR,CAAC,MAAO,UACR,CAAC,QAAS,SACV,CAAC,MAAO,WACR,CAAC,MAAO,WACR,CAAC,OAAQ,QACT,CAAC,UAAW,QACZ,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,QAAS,SACR,CAAC,UAAW,UACZ,CAAC,UAAW,UACZ,CAAC,UAAW,UACZ,CAAC,YAAa,UACd,CAAC,YAAa,UACd,CAAC,UAAW,WACZ,CAAC,QAAS,WAEhBmpG,EA/BF,GAAa7wG,EAAA6wG,YAiCb,IAyEYE,EAzEZC,EAAA,oBAAAA,KAuEA,OAlEWA,EAAAC,gBAAP,SAAuB5+E,GAInB,OAHmBA,EAAKpiB,MAAMoD,OAAOwO,aAEH,IADvBwQ,EAAKpiB,MAAMmO,YAEFyQ,QAAQ,IAAK,MAG9BmiF,EAAAE,iBAAP,SAAwB3uG,GACpB,IAAIiW,EAAuCjW,EAAUiW,cACrD,SAAIA,GAAuC,YAAtBA,EAActX,OAMhC8vG,EAAAG,cAAP,SAAqB19F,EAAiCC,WAClD,GAAID,EAAUmK,eACV,IAAsB,IAAAyG,EAAArP,EAAAvB,EAAUmK,YAAUnC,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CACxC,GADcuG,EAAA7Z,MACAqJ,eAAiByI,EAC3B,OAAO,oGAInB,OAAO,GAGJs9F,EAAAI,gBAAP,SAAuB7/F,EAA+B8/F,WAC9C7yF,EAAkBjN,EAAYiN,gBAClC,GAAIA,MACA,IAAiB,IAAA8yF,EAAAt8F,EAAAwJ,GAAe+yF,EAAAD,EAAAp8F,QAAAq8F,EAAAp8F,KAAAo8F,EAAAD,EAAAp8F,OAAE,CAC9B,GADSq8F,EAAA3vG,MACAV,KAAK+O,MAAMmO,YAAcizF,EAC9B,OAAO,oGAInB,OAAO,GAKJL,EAAAQ,mBAAP,SAA0BjvG,GACtB,IAAKA,EACD,OAAO,EAEX,IAAIkvG,EAASnxG,KAAK8wG,gBAAkC7uG,EAAUgP,YAAa,gBACvEmgG,EAAepxG,KAAKkxG,mBAAmBjvG,EAAUiW,eACrD,OAAOi5F,GAAUC,GAGdV,EAAA9jB,SAAP,SAAgBj8D,GACZ,MAAmB,UAAZA,GAAoC,UAAZA,GAI5B+/E,EAAA7jB,QAAP,SAAel8D,GACX,MAAmB,MAAZA,GAAgC,SAAZA,GAIxB+/E,EAAAW,MAAP,SAAa1gF,GACT,MAAmB,OAAZA,GAAiC,YAAZA,GAGzB+/E,EAAAY,WAAP,SAAkB3gF,GACd,MAAO,YAAcA,GAE7B+/E,EAvEA,GAAahxG,EAAAgxG,UAyEb,SAAYD,GACRA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,aACAA,IAAA,iBALJ,CAAYA,EAAA/wG,EAAA+wG,UAAA/wG,EAAA+wG,QAAO,KAQnB,IAAAc,EAAA,WAMI,SAAAA,EAAY3gG,EAAiB2wD,GACzBvhE,KAAK4Q,OAASA,EACd5Q,KAAKuhE,SAAWA,EAChBvhE,KAAK2wB,SAAW4wC,EAAS3gE,KAAK+O,MAAMmO,WACpC9d,KAAKwxG,QAAQxxG,KAAKyxG,aAmH1B,OAhHYF,EAAAtvG,UAAAwvG,WAAR,WACI,GAAIf,EAAQ9jB,SAAS5sF,KAAK2wB,UACtB,OAAO8/E,EAAQlwF,OAEnB,GAAImwF,EAAQ7jB,QAAQ7sF,KAAK2wB,UACrB,OAAO8/E,EAAQ1zE,MAEnB,GAAI2zE,EAAQW,MAAMrxG,KAAK2wB,UACnB,OAAO8/E,EAAQiB,IAEnB,IAAI11F,EAAOhc,KAAK2xG,cAAc3xG,KAAK2wB,UACnC,OAAI3U,GAAMA,EAAK5I,MAAM6+C,EAAA7kD,YAAY+J,gBACtBs5F,EAAQ70F,MAEZ60F,EAAQmB,QAGnBL,EAAAtvG,UAAA0vG,cAAA,SAAchhF,GACV,OAAO3wB,KAAK4Q,OAAO+S,OAAOgN,IAG9B4gF,EAAAtvG,UAAA4vG,kBAAA,WAEI,OADc7xG,KAAKyxG,cAEf,KAAKhB,EAAQlwF,OACT,MAAO,SAEX,KAAKkwF,EAAQmB,OACb,KAAKnB,EAAQ70F,MACT,OAAO5b,KAAK2wB,SAEhB,KAAK8/E,EAAQ1zE,MACT,OAAU/8B,KAAK8xG,UAAU,GAAE,KAE/B,KAAKrB,EAAQiB,IACT,OAAIhB,EAAQY,WAAWtxG,KAAK2wB,UACd3wB,KAAK8xG,UAAUp5F,KAAK,KAAI,OAExB1Y,KAAK8xG,UAAUp5F,KAAK,KAAI,KAG1C,QACI,OAAO1Y,KAAK2wB,WAKhB4gF,EAAAtvG,UAAA6vG,QAAR,mBACQngF,EAAO3xB,KAAKuhE,SAAS/3C,cACrBuoF,EAAU,IAAI9qG,MAClB,GAAI0qB,MACA,IAAgB,IAAAqgF,EAAAt9F,EAAAid,GAAIsgF,EAAAD,EAAAp9F,QAAAq9F,EAAAp9F,KAAAo9F,EAAAD,EAAAp9F,OAAE,CAAjB,IAAIhK,EAAGqnG,EAAA3wG,MACRywG,EAAQxzF,KAAK3T,EAAI+E,MAAMmO,8GAG/B,OAAOi0F,GAGXR,EAAAtvG,UAAAiwG,WAAA,WACI,IAAIvgF,EAAO3xB,KAAK8xG,UAChB,OAAmB,GAAfngF,EAAK7mB,OACE6mB,EAEJ,CAAC3xB,KAAK2wB,WAIjB4gF,EAAAtvG,UAAAkwG,kBAAA,SAAkBxhF,GACd,IAAI6gF,EAAyBjB,EAAUC,cAActvG,IAAIyvB,GACzD,GAAI6gF,EACA,OAAOA,EAEX,IAAI/7F,EAAUzV,KAAK2xG,cAAchhF,GACjC,GAAIlb,GAAWA,EAAQrC,MAAQ6+C,EAAA7kD,YAAY6W,eAAgB,CACvD,IACImuF,EAD6B38F,EACF8rD,SAAS5xD,MAAMmO,WAC9C,OAAO9d,KAAKmyG,kBAAkBC,GAElC,OAAOzhF,GAIX4gF,EAAAtvG,UAAAowG,iBAAA,SAAiB1hF,GACb,IAAIlb,EAAUzV,KAAK2xG,cAAchhF,GACjC,GAAIlb,GAAWA,EAAQrC,MAAQ6+C,EAAA7kD,YAAY6W,eAAgB,CACvD,IACImuF,EAD6B38F,EACF8rD,SAAS5xD,MAAMmO,WAC9C,OAAO9d,KAAKqyG,iBAAiBD,GAEjC,OAAOzhF,GAKX4gF,EAAAtvG,UAAAqwG,mBAAA,WACI,IAAI3hF,EAAW3wB,KAAK8xG,UAAU,GAC9B,GAAIpB,EAAQ9jB,SAASj8D,GACjB,OAAO8/E,EAAQlwF,OAInB,IAAIgyF,EAAiBvyG,KAAKqyG,iBAAiB1hF,GACvC6hF,EAAaxyG,KAAK2xG,cAAcY,GACpC,OAAkB,MAAdC,GAAsBA,EAAWp/F,MAAQ6+C,EAAA7kD,YAAY+J,gBAC9Cs5F,EAAQ70F,MAEZ60F,EAAQmB,QAGnBL,EAAAtvG,UAAAwwG,gBAAA,WACI,OAAOzyG,KAAK8xG,UAAU,IAE9BP,EA7HA,GAAa7xG,EAAA6xG,gSCzJb,IAAAmB,EAAA,oBAAAA,KA0BA,OAnBWA,EAAAC,kBAAP,SAAyB1uD,GACrB,GAAW2uD,MAAP3uD,GAA2B,MAAPA,EACpB,OAAO,EAEX,IAAI4uD,EAAY5uD,EAAI/4C,WAAW,GAE/B,OAAQ2nG,GADM5uD,EAAI/4C,WAAW+4C,EAAIn5C,OAAS,KACK,IAAb+nG,GAAkC,IAAbA,IAOpDH,EAAAI,gBAAP,SAAuB7uD,GACnB,OAAIyuD,EAAQC,kBAAkB1uD,GACnBA,EAAIviC,UAAU,EAAGuiC,EAAIn5C,OAAS,GAElCm5C,GAEfyuD,EA1BA,GAAahzG,EAAAgzG,UA4Bb,IAAAK,EAAA,oBAAAA,KAyBA,OAjBWA,EAAAC,gBAAP,SAAuB/uD,GACnBp5C,OAAOo5C,EAAIn5C,OAAS,EAAG,iCACvBD,OAAOo5C,EAAIn5C,QAAU,GAAI,eAAem5C,EAAG,wCAQxC8uD,EAAAE,kBAAP,SAAyBryG,WACrBiK,OAAOjK,EAAKkK,OAAS,EAAG,gCACxBD,OAAOjK,EAAKkK,QAAU,GAAI,mBAAmBlK,EAAI,2CACjD,IAAkB,IAAAsyG,EAAAx+F,EAAA9T,GAAIuyG,EAAAD,EAAAt+F,QAAAu+F,EAAAt+F,KAAAs+F,EAAAD,EAAAt+F,OAAE,CAAnB,IAAIw+F,EAAKD,EAAA7xG,MACVuJ,OAAOkoG,EAASM,kBAAkBzvF,SAASwvF,GAAQ,cAAcxyG,EAAI,kCAAkCmyG,EAASM,uHArBzGN,EAAAM,kBAAoB,mCAwBvCN,EAzBA,GAAarzG,EAAAqzG,WA2Bb,IAAAO,EAAA,oBAAAA,IAEYtzG,KAAAqlB,KAAsB,IAAIpe,MAC1BjH,KAAAuzG,SAAmB,KACnBvzG,KAAAwzG,SAAmB,OACnBxzG,KAAAyzG,SAAmB,WACnBzzG,KAAA+vG,QAAkB/vG,KAAKuzG,SA+CnC,OA7CID,EAAArxG,UAAAyxG,OAAA,SAAO3yD,GAEH,IADA,IAAIgvD,EAAU,GACPhvD,GAAS,GACZgvD,GAAW/vG,KAAKyzG,SAChB1yD,GAAS,EAUb,OARIA,GAAS,IACTgvD,GAAW/vG,KAAKwzG,SAChBzyD,GAAS,GAETA,GAAS,IACTgvD,GAAW/vG,KAAKuzG,UAEpBvzG,KAAK+vG,QAAUA,EACR/vG,MAGXszG,EAAArxG,UAAA0xG,SAAA,WAEI,OADA3zG,KAAK+vG,SAAW/vG,KAAKuzG,SACdvzG,MAGXszG,EAAArxG,UAAAyP,IAAA,SAAIu+F,GAEA,OADAjwG,KAAKqlB,KAAK9G,KAAKve,KAAK+vG,QAAUE,GACvBjwG,MAGXszG,EAAArxG,UAAA2xG,SAAA,WAEI,OADA5zG,KAAK+vG,QAAU/vG,KAAK+vG,QAAQxhF,QAAQvuB,KAAKuzG,SAAU,IAC5CvzG,MAGXszG,EAAArxG,UAAA6b,SAAA,WACI,OAAO9d,KAAKqlB,KAAK3M,KAAK,OAG1B46F,EAAArxG,UAAAmuG,OAAA,SAAO/qF,eACH,IAAgB,IAAAgrF,EAAA37F,EAAA2Q,GAAIirF,EAAAD,EAAAz7F,QAAA07F,EAAAz7F,KAAAy7F,EAAAD,EAAAz7F,OAAE,CAAjB,IAAIq7F,EAAGK,EAAAhvG,MACRtB,KAAKqlB,KAAK9G,KAAK0xF,uGAIvBqD,EAAArxG,UAAA4xG,WAAA,WACI,OAAO7zG,KAAKqlB,MAEpBiuF,EArDA,GAAa5zG,EAAA4zG,WAuDb,IAAAQ,EAAA,oBAAAA,KAOA,OALWA,EAAAC,OAAP,SAAcnhF,EAAkB1E,GAC5B,IAAK0E,EACD,MAAM,IAAIzZ,MAAM+U,IAG5B4lF,EAPA,GAAap0G,EAAAo0G,wFCzGb,IAAA5hD,EAAA/xD,EAAA,GAwDA6zG,EAAA,WAWE,SAAAA,IAHAh0G,KAAA2V,KAAiB,GACjB3V,KAAAi0G,WAAkB,EAmyBpB,OA1yBSD,EAAAE,UAAP,SAAiBv0G,GACf,IAAIw0G,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAUv0G,GACdw0G,EAAW9zC,UASpB2zC,EAAA/xG,UAAAiyG,UAAA,SAAUv0G,GACR,MAAM,IAAIwZ,MAAM,oBAGlB66F,EAAA/xG,UAAAmyG,kBAAA,SAAkB1zD,GAChB,IAAI9/C,EAAOsxD,EAAAxG,gBAAgBhL,IAAS,IAAM1gD,KAAKi0G,WAAWn2F,SAAS,IAC/DuH,EAAO6sC,EAAAzG,gBAAgB/K,GAC3B1gD,KAAKue,KAAK,aACVve,KAAKue,KAAK3d,GACVZ,KAAKue,KAAK,KACT,IAAK,IAAIle,EAAW,EAAGyS,EAAWo/C,EAAAtG,sBAAsBlL,GAAOrgD,EAAIyS,IAAKzS,EACnEA,EAAI,GAAGL,KAAKue,KAAK,MACrBve,KAAKue,KAAK,KACVve,KAAKue,KAAKle,EAAEyd,SAAS,KACrB9d,KAAKue,KAAK,MACVve,KAAKue,KAAK81F,EAAiBniD,EAAApG,qBAAqBpL,EAAMrgD,KAExDL,KAAKue,KAAK,OACVve,KAAKue,KAAK81F,EAAiBniD,EAAAlG,sBAAsBtL,KACjD1gD,KAAKue,KAAK,KACN2zC,EAAApL,gBAAgBzhC,IAAS6sC,EAAAhyB,aAAakuB,OACxCpuD,KAAKue,KAAK,OAEZve,KAAKs0G,oBAAoBjvF,GACrB6sC,EAAApL,gBAAgBzhC,IAAS6sC,EAAAhyB,aAAakuB,OACxCpuD,KAAKue,KAAK,WAEVve,KAAKi0G,YAGTD,EAAA/xG,UAAAqyG,oBAAA,SAAoBniF,GAClB,IAGIoiF,EACA1vG,EACAxE,EAAUyS,EALVvD,EAAK2iD,EAAApL,gBAAgB30B,GACrBnW,EAAOk2C,EAAAnL,kBAAkB50B,GAM7B,OAAQ5iB,GACN,KAAK2iD,EAAAhyB,aAAakuB,MAOhB,IANqC,OAAhCvpD,EAASqtD,EAAApJ,aAAa32B,MACzBnyB,KAAKue,KAAK1Z,GACV7E,KAAKue,KAAK,OAEZve,KAAKue,KAAK,OACVzL,EAAIo/C,EAAAlJ,mBAAmB72B,GAClB9xB,EAAI,EAAGA,EAAIyS,IAAKzS,EACnBL,KAAKs0G,oBAAoBpiD,EAAAhJ,cAAc/2B,EAAM9xB,IAG/C,YADAL,KAAKue,KAAK,OAGZ,KAAK2zC,EAAAhyB,aAAasuB,GAiBhB,YAhBIxyC,GAAQk2C,EAAAjyB,WAAWsY,MACrBv4C,KAAKue,KAAK,QACVve,KAAKs0G,oBAAoBpiD,EAAA9I,eAAej3B,IACxCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAA5I,UAAUn3B,KAC/BoiF,EAASriD,EAAA1I,WAAWr3B,MACtBnyB,KAAKue,KAAK,UACVve,KAAKs0G,oBAAoBC,MAG3Bv0G,KAAKs0G,oBAAoBpiD,EAAA9I,eAAej3B,IACxCnyB,KAAKue,KAAK,OACVve,KAAKs0G,oBAAoBpiD,EAAA5I,UAAUn3B,IACnCnyB,KAAKue,KAAK,OACVve,KAAKs0G,oBAAoBpiD,EAAA1I,WAAWr3B,MAIxC,KAAK+/B,EAAAhyB,aAAauuB,KACoB,OAA/B5pD,EAASqtD,EAAAxI,YAAYv3B,MACxBnyB,KAAKue,KAAK1Z,GACV7E,KAAKue,KAAK,OAEZve,KAAKue,KAAK,OACVve,KAAKs0G,oBAAoBpiD,EAAAtI,YAAYz3B,IACrCnyB,KAAKue,KAAK,gBAEZ,KAAK2zC,EAAAhyB,aAAaiuB,MAahB,OAZIomD,EAASriD,EAAAlI,kBAAkB73B,MAC7BnyB,KAAKue,KAAK,QACVve,KAAKs0G,oBAAoBC,GACzBv0G,KAAKue,KAAK,YAEyB,OAAhC1Z,EAASqtD,EAAApI,aAAa33B,KACzBnyB,KAAKue,KAAK,UACVve,KAAKue,KAAK1Z,GACV7E,KAAKue,KAAK,QAEVve,KAAKue,KAAK,aAId,KAAK2zC,EAAAhyB,aAAawuB,OAClB,KAAKwD,EAAAhyB,aAAa0uB,KAClB,KAAKsD,EAAAhyB,aAAa2uB,aAChB,MAAM,IAAI11C,MAAM,mBAElB,KAAK+4C,EAAAhyB,aAAaglB,SAGhB,OAFAllD,KAAKue,KAAK,UACVve,KAAKue,KAAK2zC,EAAA7K,iBAAiBl1B,GAAMrU,SAAS,KAG5C,KAAKo0C,EAAAhyB,aAAa8uB,SAKhB,OAJAhvD,KAAKue,KAAK,KACVve,KAAKue,KAAK2zC,EAAA5K,iBAAiBn1B,GAAMrU,SAAS,KAC1C9d,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAA1K,iBAAiBr1B,IAG5C,KAAK+/B,EAAAhyB,aAAaklB,UAClB,KAAK8M,EAAAhyB,aAAa+uB,UAChB,MAAM,IAAI91C,MAAM,mBAElB,KAAK+4C,EAAAhyB,aAAaqlB,KAQhB,OAPAvlD,KAAKue,KAAK,SACVve,KAAKue,KAAK81F,EAAiBr4F,IAC3Bhc,KAAKue,KAAK,MACVve,KAAKue,KAAK2zC,EAAA/J,cAAch2B,GAAMrU,SAAS,KACvC9d,KAAKue,KAAK,OACVve,KAAKs0G,oBAAoBpiD,EAAA9J,WAAWj2B,SACpCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAAhyB,aAAaivB,MAUhB,OATAnvD,KAAKue,KAAK,UACVve,KAAKue,KAAK81F,EAAiBr4F,IAC3Bhc,KAAKue,KAAK,MACVve,KAAKue,KAAK2zC,EAAA1J,eAAer2B,GAAMrU,SAAS,KACxC9d,KAAKue,KAAK,OACVve,KAAKs0G,oBAAoBpiD,EAAAxJ,YAAYv2B,IACrCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAtJ,cAAcz2B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAAhyB,aAAa0kB,MAChB,OAAQ5oC,GACN,KAAKk2C,EAAAjyB,WAAW75B,IAEd,YADApG,KAAKue,KAAK2zC,EAAAlL,iBAAiB70B,GAAMrU,SAAS,KAG5C,KAAKo0C,EAAAjyB,WAAW55B,IASd,YARArG,KAAKue,KACHi2F,cACEviG,QACEigD,EAAAjL,oBAAoB90B,GACpB+/B,EAAAhL,qBAAqB/0B,MAM7B,KAAK+/B,EAAAjyB,WAAWp5B,IAEd,YADA7G,KAAKue,KAAK2zC,EAAA/K,iBAAiBh1B,GAAMrU,SAAS,KAG5C,KAAKo0C,EAAAjyB,WAAWn5B,IAEd,YADA9G,KAAKue,KAAK2zC,EAAA9K,iBAAiBj1B,GAAMrU,SAAS,KAI9C,MAEF,KAAKo0C,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW71B,IACjB,KAAK+/B,EAAA3uB,QAAQ2qC,OAIX,OAHAluE,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ4qC,OAIX,OAHAnuE,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ6qC,UAIX,OAHApuE,KAAKue,KAAK,gBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ+nD,OACb,KAAKp5B,EAAA3uB,QAAQgoD,OAGX,OAFAvrF,KAAKue,KAAK,UACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQqrD,OAIX,OAHA5uF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ8rD,QAIX,OAHArvF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ+rD,SAIX,OAHAtvF,KAAKue,KAAK,eACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQitD,SAIX,OAHAxwF,KAAKue,KAAK,eACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQssD,WAIX,OAHA7vF,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ8sD,QAIX,OAHArwF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OAGX,OAFAprE,KAAKue,KAAK,UACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQuqD,OAIX,OAHA9tF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQwqD,OAIX,OAHA/tF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQyqD,UAIX,OAHAhuF,KAAKue,KAAK,gBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQsrD,OAIX,OAHA7uF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQgsD,QAIX,OAHAvvF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQisD,SAIX,OAHAxvF,KAAKue,KAAK,eACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQktD,SAIX,OAHAzwF,KAAKue,KAAK,eACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQusD,WAIX,OAHA9vF,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ+sD,QAIX,OAHAtwF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQy7C,UAGX,OAFAh/E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ07C,UAGX,OAFAj/E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQw7C,QAKb,KAAK7sB,EAAA3uB,QAAQy6C,cAGX,OAFAh+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQw6C,cAGX,OAFA/9E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ26C,cAGX,OAFAl+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ06C,cAGX,OAFAj+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ66C,cAGX,OAFAp+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ46C,cAGX,OAFAn+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ+6C,cAGX,OAFAt+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ86C,cAGX,OAFAr+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQysD,eAIX,OAHAhwF,KAAKue,KAAK,yBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ0sD,eAIX,OAHAjwF,KAAKue,KAAK,yBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQk7C,gBAGX,OAFAz+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQs7C,gBAGX,OAFA7+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQm7C,gBAGX,OAFA1+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQu7C,gBAGX,OAFA9+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQg7C,gBAGX,OAFAv+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQo7C,gBAGX,OAFA3+E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQi7C,gBAGX,OAFAx+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQq7C,gBAGX,OAFA5+E,KAAKue,KAAK,mBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQs6C,WAGX,OAFA79E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQu6C,UAGX,OAFA99E,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,IAGzC,KAAK+/B,EAAA3uB,QAAQ2sD,eAIX,OAHAlwF,KAAKue,KAAK,yBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAA3uB,QAAQ4sD,eAIX,OAHAnwF,KAAKue,KAAK,yBACVve,KAAKs0G,oBAAoBpiD,EAAAjK,cAAc91B,SACvCnyB,KAAKue,KAAK,KAId,MAEF,KAAK2zC,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY11B,IAClB,KAAK+/B,EAAArpB,SAAS8sC,OACd,KAAKzjB,EAAArpB,SAASu3C,OACd,KAAKluB,EAAArpB,SAASw3C,OACd,KAAKnuB,EAAArpB,SAASy3C,OAIZ,OAHAtgF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS03C,OACd,KAAKruB,EAAArpB,SAAS23C,OACd,KAAKtuB,EAAArpB,SAAS43C,OACd,KAAKvuB,EAAArpB,SAAS63C,OAIZ,OAHA1gF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS6kC,OACd,KAAKxb,EAAArpB,SAAS83C,OACd,KAAKzuB,EAAArpB,SAAS+3C,OACd,KAAK1uB,EAAArpB,SAASg4C,OAIZ,OAHA7gF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASm4C,OACd,KAAK9uB,EAAArpB,SAASo4C,OACd,KAAK/uB,EAAArpB,SAASs4C,OACd,KAAKjvB,EAAArpB,SAASu4C,OAIZ,OAHAphF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASklC,OAMZ,OALA/tE,KAAKue,KAAK,eACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASmlC,OACd,KAAK9b,EAAArpB,SAASw4C,OAIZ,OAHArhF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASolC,OAMZ,OALAjuE,KAAKue,KAAK,eACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAAS8kC,OACd,KAAKzb,EAAArpB,SAAS+4C,OAIZ,OAHA5hF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASg5C,MACd,KAAK3vB,EAAArpB,SAASi5C,MAIZ,OAHA9hF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASk5C,OACd,KAAK7vB,EAAArpB,SAASm5C,OAIZ,OAHAhiF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS+kC,OACd,KAAK1b,EAAArpB,SAAS24C,OAIZ,OAHAxhF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASilC,OACd,KAAK5b,EAAArpB,SAAS84C,OAIZ,OAHA3hF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASglC,OACd,KAAK3b,EAAArpB,SAAS64C,OAIZ,OAHA1hF,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASqlD,QAMZ,OALAluF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASwlD,QAMZ,OALAruF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASyiC,MACd,KAAKpZ,EAAArpB,SAAS0iC,MACd,KAAKrZ,EAAArpB,SAASijC,MACd,KAAK5Z,EAAArpB,SAASkjC,MAIZ,OAHA/rE,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS2iC,MACd,KAAKtZ,EAAArpB,SAAS4iC,MACd,KAAKvZ,EAAArpB,SAASmjC,MACd,KAAK9Z,EAAArpB,SAASojC,MAIZ,OAHAjsE,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASqjC,MACd,KAAKha,EAAArpB,SAASujC,MACd,KAAKla,EAAArpB,SAASyjC,MACd,KAAKpa,EAAArpB,SAAS0jC,MAIZ,OAHAvsE,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASsjC,MAKZ,OAJAnsE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS2jC,MACd,KAAKta,EAAArpB,SAAS6jC,MACd,KAAKxa,EAAArpB,SAAS+jC,MACd,KAAK1a,EAAArpB,SAASgkC,MAIZ,OAHA7sE,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS4jC,MAKZ,OAJAzsE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,kBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MAIZ,OAHAntE,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,YACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASkkC,MAKZ,OAJA/sE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASukC,MACd,KAAKlb,EAAArpB,SAASykC,MACd,KAAKpb,EAAArpB,SAAS2kC,MACd,KAAKtb,EAAArpB,SAAS4kC,MAIZ,OAHAztE,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASwkC,MAKZ,OAJArtE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,kBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASq4C,OAKZ,OAJAlhF,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASy4C,OAKZ,OAJAthF,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASslD,QAMZ,OALAnuF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASylD,QAMZ,OALAtuF,KAAKue,KAAK,cACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASwjC,MAKZ,OAJArsE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS8jC,MAKZ,OAJA3sE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,kBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAASokC,MAKZ,OAJAjtE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,iBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS0kC,MAKZ,OAJAvtE,KAAKue,KAAK,SACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,kBACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,IAG1C,KAAK+/B,EAAArpB,SAAS6mD,YAMZ,OALA1vF,KAAKue,KAAK,kBACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASqmD,OAMZ,OALAlvF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASimD,OAMZ,OALA9uF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAAS8mD,YAMZ,OALA3vF,KAAKue,KAAK,kBACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASsmD,OAMZ,OALAnvF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAArpB,SAASkmD,OAMZ,OALA/uF,KAAKue,KAAK,aACVve,KAAKs0G,oBAAoBpiD,EAAApK,cAAc31B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAnK,eAAe51B,SACxCnyB,KAAKue,KAAK,KAId,OAEF,KAAK2zC,EAAAhyB,aAAa2xB,OAUhB,OATA7xD,KAAKue,KAAK,WACVve,KAAKue,KAAK81F,EAAiBr4F,IAC3Bhc,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAAhI,cAAc/3B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAA9H,cAAcj4B,IACvCnyB,KAAKue,KAAK,MACVve,KAAKs0G,oBAAoBpiD,EAAA5H,mBAAmBn4B,SAC5CnyB,KAAKue,KAAK,KAGZ,KAAK2zC,EAAAhyB,aAAa4xB,KAGhB,OAFA9xD,KAAKs0G,oBAAoBpiD,EAAA1H,aAAar4B,SACtCnyB,KAAKue,KAAK,OAGZ,KAAK2zC,EAAAhyB,aAAa2iB,OAQhB,aAPI0xD,EAASriD,EAAAxH,eAAev4B,KAC1BnyB,KAAKue,KAAK,WACVve,KAAKs0G,oBAAoBC,GACzBv0G,KAAKue,KAAK,QAEVve,KAAKue,KAAK,cAId,KAAK2zC,EAAAhyB,aAAa6xB,KAChB,OAAQG,EAAAjH,UAAU94B,IAChB,KAAK+/B,EAAA5f,OAAOy/C,WAEV,YADA/xF,KAAKue,KAAK,iBAGZ,KAAK2zC,EAAA5f,OAAO2/C,WAIV,OAHAjyF,KAAKue,KAAK,gBACVve,KAAKs0G,oBAAoBpiD,EAAA7G,eAAel5B,EAAM,SAC9CnyB,KAAKue,KAAK,KAId,MAEF,KAAK2zC,EAAAhyB,aAAa8xB,IAEhB,YADAhyD,KAAKue,KAAK,OAGZ,KAAK2zC,EAAAhyB,aAAaguB,YAEhB,YADAluD,KAAKue,KAAK,iBAGZ,KAAK2zC,EAAAhyB,aAAaqvB,cAClB,KAAK2C,EAAAhyB,aAAakvB,UAClB,KAAK8C,EAAAhyB,aAAayvB,WAClB,KAAKuC,EAAAhyB,aAAa6vB,cAEpB,MAAM,IAAI52C,MAAM,oBAGV66F,EAAA/xG,UAAAsc,KAAR,SAAa5I,GAEX3V,KAAK2V,KAAK4I,KAAK5I,IAGjBq+F,EAAA/xG,UAAAo+D,OAAA,WACE,IAAI3c,EAAM1jD,KAAK2V,KAAK+C,KAAK,IAEzB,OADA1Y,KAAK2V,KAAO,GACL+tC,GAEXswD,EA5yBA,GA8yBA,SAASK,EAAiBr4F,GACxB,OAAQA,GACN,KAAKk2C,EAAAjyB,WAAWsY,KAAM,MAAO,OAC7B,KAAK2Z,EAAAjyB,WAAW75B,IAAK,MAAO,MAC5B,KAAK8rD,EAAAjyB,WAAW55B,IAAK,MAAO,MAC5B,KAAK6rD,EAAAjyB,WAAWp5B,IAAK,MAAO,MAC5B,KAAKqrD,EAAAjyB,WAAWn5B,IAAK,MAAO,MAC5B,KAAKorD,EAAAjyB,WAAWl5B,KAAM,MAAO,OAC7B,KAAKmrD,EAAAjyB,WAAWiuB,YAAa,MAAM,IAAI/0C,MAAM,oBAC7C,KAAK+4C,EAAAjyB,WAAWgsD,KAAM,MAAM,IAAI9yE,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhBzZ,EAAAs0G,u5BCxDZ,IAAAvqG,EAAAtJ,EAAA,GAID8xD,EAAA9xD,EAAA,GAyBA0J,EAAA1J,EAAA,GAKAs0G,EAAA,WAUE,SAAAA,EAAY7xF,EAAkB8xF,QAAA,IAAAA,OAAA,GAH9B10G,KAAA20G,KAA4B,IAAIvtG,IAI9BpH,KAAK4iB,QAAUA,EACf5iB,KAAK00G,eA6GT,OAzGED,EAAAxyG,UAAA2yG,KAAA,uBACE,IAAiB,IAAA7wF,EAAArP,EAAA1U,KAAK4iB,QAAQhV,YAAY0M,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAA/C,IAAI5B,EAAImI,EAAA7Z,MACP0R,EAAKD,OAAOyH,SAASxa,KAAK60G,UAAU7hG,uGAK5CyhG,EAAAxyG,UAAA4yG,UAAA,SAAU7hG,eACJ6I,EAAU7I,EAAKtT,QACnB,GAAImc,MACF,IAA2B,IAAAq2D,EAAAx9D,EAAAmH,GAAOs2D,EAAAD,EAAAt9D,QAAAu9D,EAAAt9D,KAAAs9D,EAAAD,EAAAt9D,OAAA,CAAzB,IAAAuG,EAAApG,EAAAo9D,EAAA7wE,MAAA,GAACV,EAAAua,EAAA,GAAME,EAAAF,EAAA,GAAoBnb,KAAK80G,aAAal0G,EAAMya,qGAE9D,IAAIrG,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAA8+D,EAAAp/D,EAAAM,GAAW++D,EAAAD,EAAAl/D,QAAAm/D,EAAAl/D,KAAAk/D,EAAAD,EAAAl/D,OAAA,CAA7B,IAAIK,EAAU8+D,EAAAzyE,MAAiBtB,KAAK60G,UAAU5/F,uGAKvDw/F,EAAAxyG,UAAA6yG,aAAA,SAAal0G,EAAc6U,GACzB,IAAIA,EAAQ4G,GAAG5S,EAAApH,YAAY00D,UAAa/2D,KAAK00G,eAA7C,CACA,IAAIC,EAAO30G,KAAK20G,KAChB,GAAIA,EAAKzjG,IAAIuE,GACXzV,KAAK+0G,WAAWn0G,EAAM6U,EAAiBk/F,EAAKzzG,IAAIuU,SAIlD,OADAk/F,EAAKjmG,IAAI+G,EAAS7U,GACV6U,EAAQrC,MACd,KAAK6+C,EAAA7kD,YAAY6Q,OACXxI,EAAQ4G,GAAG5S,EAAApH,YAAYswE,WAAW3yE,KAAKg1G,YAAYp0G,EAAc6U,GACrE,MAEF,KAAKw8C,EAAA7kD,YAAYiX,KACX5O,EAAQ4G,GAAG5S,EAAApH,YAAYswE,WAAW3yE,KAAKi1G,UAAUr0G,EAAY6U,GACjE,MAEF,KAAKw8C,EAAA7kD,YAAY2N,mBACf/a,KAAKk1G,uBAAuBt0G,EAAyB6U,GACrD,MAEF,KAAKw8C,EAAA7kD,YAAY+J,gBACfnX,KAAKm1G,oBAAoBv0G,EAAsB6U,GAC/C,MAEF,KAAKw8C,EAAA7kD,YAAYuO,MACHlG,EAAS4G,GAAG5S,EAAApH,YAAYswE,WAAW3yE,KAAKo1G,WAAWx0G,EAAa6U,GAC5E,MAEF,KAAKw8C,EAAA7kD,YAAYkO,mBACftb,KAAKq1G,uBAAuBz0G,EAAyB6U,GACrD,MAEF,KAAKw8C,EAAA7kD,YAAYqO,SACf,IAAI65F,EAAiB7/F,EACjB5U,EAASy0G,EAAKtsF,eACdnoB,GAAQb,KAAKu1G,cAAc30G,EAAMC,GACrC,IAAI0xE,EAAS+iC,EAAKrsF,eACdspD,GAAQvyE,KAAKu1G,cAAc30G,EAAM2xE,GACrC,MAEF,KAAKtgB,EAAA7kD,YAAYgX,WA+bvB,SAASoxF,EAAkB//F,mBACzB,IAAIoG,EAAUpG,EAAQoG,QACtB,GAAIA,MACF,IAAmB,IAAAT,EAAA1G,EAAAmH,EAAQvB,UAAQwB,EAAAV,EAAAxG,QAAAkH,EAAAjH,KAAAiH,EAAAV,EAAAxG,OAAE,CAAhC,IAAIyG,EAAMS,EAAAxa,MACb,OAAQ+Z,EAAOjI,MACb,KAAK6+C,EAAA7kD,YAAY2N,mBACf,IAAIoK,EAAgC9J,EAAQ8J,UAC5C,GAAIA,MACF,IAAqB,IAAApJ,GAAA05F,OAAA,EAAA/gG,EAAAyQ,EAAU7K,WAAQxF,EAAAiH,EAAAnH,QAAAE,EAAAD,KAAAC,EAAAiH,EAAAnH,OAAE,CAApC,IAAIgR,EAAQ9Q,EAAAxT,MACf,GAAIskB,EAASvJ,GAAG5S,EAAApH,YAAYswE,UAAW,OAAO,oGAGlD,MAEF,KAAK1gB,EAAA7kD,YAAY+J,gBACf,IAAIgO,EAA6B9J,EAAQ8J,UACzC,GAAIA,MACF,IAAqB,IAAAlP,GAAAy/F,OAAA,EAAAhhG,EAAAyQ,EAAU7K,WAAQjE,EAAAJ,EAAArB,QAAAyB,EAAAxB,KAAAwB,EAAAJ,EAAArB,OAAE,CAApC,IAAIgR,EAAQvP,EAAA/U,MACf,GAAIskB,EAASvJ,GAAG5S,EAAApH,YAAYswE,UAAW,OAAO,oGAGlD,MAEF,QACE,GAAIt3D,EAAOgB,GAAG5S,EAAApH,YAAYswE,WAAa6iC,EAAkBn6F,GAAS,OAAO,qGAMjF,OAAO,GA5dGm6F,CAAkB//F,IAAUzV,KAAK21G,eAAe/0G,EAAM6U,GAC1D,MAEF,KAAKw8C,EAAA7kD,YAAY6W,eAAgB,MACjC,QAASpZ,QAAO,MAIZ4pG,EAAAxyG,UAAAizG,uBAAR,SAA+Bt0G,EAAc6U,WACvC0P,EAAY1P,EAAQ0P,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAArP,EAAAyQ,EAAU7K,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAApC,IAAIgR,EAAQzK,EAAA7Z,MACXskB,EAASvJ,GAAG5S,EAAApH,YAAYswE,WAAW3yE,KAAKu1G,cAAc30G,EAAgBglB,uGAKxE6uF,EAAAxyG,UAAAkzG,oBAAR,SAA4Bv0G,EAAc6U,WACpC0P,EAAY1P,EAAQ0P,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAArP,EAAAyQ,EAAU7K,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAE,CAApC,IAAIgR,EAAQzK,EAAA7Z,MACXskB,EAASvJ,GAAG5S,EAAApH,YAAYswE,WAAW3yE,KAAK41G,WAAWh1G,EAAaglB,uGAKlE6uF,EAAAxyG,UAAAozG,uBAAR,SAA+Bz0G,EAAc6U,GAO3C5K,QAAO,IAWX4pG,EAzHA,GA4HAoB,EAAA,SAAAtoG,GAWE,SAAAsoG,EAAYjzF,EAAkB8xF,QAAA,IAAAA,OAAA,GAA9B,IAAAjnG,EACEF,EAAA/M,KAAAR,KAAM4iB,EAAS8xF,IAAe10G,YALxByN,EAAA0hB,GAAe,GACf1hB,EAAAqoG,YAAmB,IAuK7B,OA/KgChnG,EAAA+mG,EAAAtoG,GAGvBsoG,EAAAE,MAAP,SAAanzF,GACX,OAAO,IAAIizF,EAAWjzF,GAASmzF,SAWjCF,EAAA5zG,UAAA+yG,YAAA,SAAYp0G,EAAc6U,GACxB,IAAI0Z,EAAKnvB,KAAKmvB,GACVktD,EAAU5mE,EAAQ4G,GAAG5S,EAAApH,YAAYsiB,SAMrC,GALA9a,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aACZz5B,GAASltD,EAAG5Q,KAAK,UACrB4Q,EAAG5Q,KAAKve,KAAKg2G,aAAavgG,EAAQuG,OAClCmT,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK3d,GACJy7E,EACF,OAAQ5mE,EAAQ+O,mBACd,OACE2K,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAKi2F,cAAc/+F,EAAQiP,uBAC9B,MAEF,OACEyK,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAK9I,EAAQmP,mBAAmB9G,YACnC,MAEF,QAASjT,QAAO,GAGpBskB,EAAG5Q,KAAK,QAGVs3F,EAAA5zG,UAAAgzG,UAAA,SAAUr0G,EAAc6U,eAClB0Z,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,eAChB3mF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR,IAAI1C,EAAUpG,EAAQoG,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAAo6F,EAAAvhG,EAAAmH,GAAOq6F,EAAAD,EAAArhG,QAAAshG,EAAArhG,KAAAqhG,EAAAD,EAAArhG,OAAE,CAA3B,IAAAuG,EAAApG,EAAAmhG,EAAA50G,MAAA,GAAC4xG,EAAA/3F,EAAA,GACR,IADcE,EAAAF,EAAA,IACH/H,MAAQ6+C,EAAA7kD,YAAYyX,UAAW,CACxC,IAAIw3D,EAAsBhhE,EAAQgB,GAAG5S,EAAApH,YAAYsiB,SACjD9a,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aACZz5B,EAASltD,EAAG5Q,KAAK,UAChB4Q,EAAG5Q,KAAK,aACb4Q,EAAG5Q,KAAK,kBACR4Q,EAAG5Q,KAAK20F,GACJ72B,IACFltD,EAAG5Q,KAAK,OACR1T,OAA4C,GAAzBwQ,EAAQmJ,mBAC3B2K,EAAG5Q,KAAKwhC,QAAoB1kC,EAAQqJ,sBAAsB5G,SAAS,MAErEqR,EAAG5Q,KAAK,8GAGZ,IAAmB,IAAAnD,EAAA1G,EAAAmH,EAAQvB,UAAQwB,EAAAV,EAAAxG,QAAAkH,EAAAjH,KAAAiH,EAAAV,EAAAxG,OAAE,CAAhC,IAAIyG,KAAMS,EAAAxa,OACF8R,MAAQ6+C,EAAA7kD,YAAYyX,WAAW7kB,KAAK80G,aAAaz5F,EAAOza,KAAMya,sGAG7ExR,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,QAGVs3F,EAAA5zG,UAAAszG,cAAA,SAAc30G,EAAc6U,WACtB0Z,EAAKnvB,KAAKmvB,GACVxe,EAAY8E,EAAQ9E,UACxB9G,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aAChB3mF,EAAG5Q,KAAKve,KAAKg2G,aAAarlG,EAAUqgB,aACpC7B,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,KAIR,IAHA,IAAIwS,EAAapgB,EAAU0W,eACvB2tC,EAAgBjkC,EAAWjmB,OAEtBzK,EAAI,EAAGA,EAAI20D,IAAiB30D,EAC/BA,GAAG8uB,EAAG5Q,KAAK,MAEf4Q,EAAG5Q,KAAKve,KAAKg2G,aAAajlF,EAAW1wB,KACrC8uB,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK5N,EAAU6W,iBAAiBnnB,IAErC8uB,EAAG5Q,KAAK,QACR,IAAI1C,EAAUpG,EAAQoG,QACtB,GAAIA,GAAWA,EAAQ6/B,KAAM,CAC3B7xC,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aAChB3mF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK9I,EAAQ7U,MAChBuuB,EAAG5Q,KAAK,YACR,IAAmB,IAAAwF,EAAArP,EAAAmH,EAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAA,CAA9B,IAAIyG,EAAMF,EAAA7Z,MAAsBtB,KAAK80G,aAAaz5F,EAAOza,KAAMya,qGACpExR,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,SAIZs3F,EAAA5zG,UAAA2zG,WAAA,SAAWh1G,EAAc6U,GACvB,IAAI0Z,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,eAChB3mF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QAER1U,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,QAGVs3F,EAAA5zG,UAAAk0G,eAAA,SAAev1G,EAAc6U,GAC3BzV,KAAK41G,WAAWh1G,EAAM6U,IAGxBogG,EAAA5zG,UAAAmzG,WAAA,SAAWx0G,EAAc6U,KAIzBogG,EAAA5zG,UAAA0zG,eAAA,SAAe/0G,EAAc6U,WACvB0Z,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,eAChB3mF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR,IAAI1C,EAAUpG,EAAQoG,QACtB,GAAIA,MACF,IAAmB,IAAAkI,EAAArP,EAAAmH,EAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAA,CAA9B,IAAIyG,EAAMF,EAAA7Z,MAAsBtB,KAAK80G,aAAaz5F,EAAOza,KAAMya,qGAEtExR,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,QAGVs3F,EAAA5zG,UAAA8yG,WAAA,SAAWn0G,EAAc6U,EAAkB4wE,KAI3CwvB,EAAA5zG,UAAA+zG,aAAA,SAAah6F,GACX,OAAQA,EAAK5I,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAOpT,KAAK4iB,QAAQxR,QAAQc,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOlS,KAAK4iB,QAAQxR,QAAQc,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADArH,QAAO,GACA,KAKbgrG,EAAA5zG,UAAA8zG,MAAA,WACE,IAAI5mF,EAAKnvB,KAAKmvB,GAMd,OALAA,EAAG5Q,KAAK,4BACNve,KAAK81G,YACP91G,KAAK40G,SACH50G,KAAK81G,YACP3mF,EAAG5Q,KAAK,OACD4Q,EAAGzW,KAAK,KAEnBm9F,EA/KA,CAAgCpB,GAAnB/0G,EAAAm2G,aAkLb,IAAAO,EAAA,SAAA7oG,GAYE,SAAA6oG,EAAYxzF,EAAkB8xF,QAAA,IAAAA,OAAA,GAA9B,IAAAjnG,EACEF,EAAA/M,KAAAR,KAAM4iB,EAAS8xF,IAAe10G,YANxByN,EAAA0hB,GAAe,GACf1hB,EAAAqoG,YAAmB,EACnBroG,EAAA4oG,QAAuB,IAAIlvG,MA+MrC,OAxNgC2H,EAAAsnG,EAAA7oG,GAGvB6oG,EAAAL,MAAP,SAAanzF,GACX,OAAO,IAAIwzF,EAAWxzF,GAASmzF,SAYjCK,EAAAn0G,UAAA+yG,YAAA,SAAYp0G,EAAc6U,GACxB,IAAI0Z,EAAKnvB,KAAKmvB,GACVktD,EAAU5mE,EAAQ4G,GAAG5S,EAAApH,YAAYsiB,SACrC9a,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aACZrgG,EAAQ4G,GAAG5S,EAAApH,YAAY+c,QACrBi9D,EAASltD,EAAG5Q,KAAK,oBAChB4Q,EAAG5Q,KAAK,WAET89D,EAASltD,EAAG5Q,KAAK,iBAChB4Q,EAAG5Q,KAAK,eAEf4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKve,KAAKg2G,aAAavgG,EAAQuG,OAClCmT,EAAG5Q,KAAK,OACRve,KAAK21G,eAAe/0G,EAAM6U,IAG5B2gG,EAAAn0G,UAAAgzG,UAAA,SAAUr0G,EAAc6U,WAClB0Z,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,eAChB3mF,EAAG5Q,KAAK,gBACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR,IAAI1C,EAAUpG,EAAQoG,QACtB,GAAIA,EAAS,CACX,IAAIy6F,EAAaz6F,EAAQ6/B,SACzB,IAA2B,IAAA66D,EAAA7hG,EAAAmH,GAAO26F,EAAAD,EAAA3hG,QAAA4hG,EAAA3hG,KAAA2hG,EAAAD,EAAA3hG,OAAE,CAA3B,IAAAmP,EAAAhP,EAAAyhG,EAAAl1G,MAAA,GAACm1G,EAAA1yF,EAAA,GAAM1I,EAAA0I,EAAA,GACV1I,EAAOjI,MAAQ6+C,EAAA7kD,YAAYyX,YAC7Bhb,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aAChB3mF,EAAG5Q,KAAKk4F,GACJp7F,EAAOgB,GAAG5S,EAAApH,YAAYsiB,WACxBwK,EAAG5Q,KAAK,OACR1T,OAA4C,GAAzBwQ,EAAQmJ,mBAC3B2K,EAAG5Q,KAAKwhC,QAAoB1kC,EAAQqJ,sBAAsB5G,SAAS,MAErEqR,EAAG5Q,KAAK,SACN+3F,qGAGFA,GAAYt2G,KAAK21G,eAAe/0G,EAAM6U,GAE5C5L,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,QAGV63F,EAAAn0G,UAAAszG,cAAA,SAAc30G,EAAc6U,GAC1B,IAAIA,EAAQqJ,MAAMrV,EAAApH,YAAY00D,QAAUttD,EAAApH,YAAY2c,KAApD,CACA,IAAImQ,EAAKnvB,KAAKmvB,GACVxe,EAAY8E,EAAQ9E,UAIxB,GAHA9G,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aACZrgG,EAAQ4G,GAAG5S,EAAApH,YAAY20D,YAAY7nC,EAAG5Q,KAAK,cAC3C9I,EAAQ4G,GAAG5S,EAAApH,YAAY+c,SAAS+P,EAAG5Q,KAAK,WACxC9I,EAAQ4G,GAAG5S,EAAApH,YAAY0c,KAMzB,OALAoQ,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAKve,KAAKg2G,aAAarlG,EAAUqgB,kBACpC7B,EAAG5Q,KAAK,OAGH9I,EAAQqJ,MAAMrV,EAAApH,YAAY+c,OAAS3V,EAAApH,YAAY+f,WAAW+M,EAAG5Q,KAAK,oBACvE4Q,EAAG5Q,KAAK3d,GAEVuuB,EAAG5Q,KAAK,KAIR,IAHA,IAAIwS,EAAapgB,EAAU0W,eACvB2tC,EAAgBjkC,EAAWjmB,OAEtBzK,EAAI,EAAGA,EAAI20D,IAAiB30D,EAC/BA,GAAG8uB,EAAG5Q,KAAK,MAEf4Q,EAAG5Q,KAAK5N,EAAU6W,iBAAiBnnB,IACnC8uB,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKve,KAAKg2G,aAAajlF,EAAW1wB,KAEnCoV,EAAQqJ,MAAMrV,EAAApH,YAAYyd,YAAcrW,EAAApH,YAAY2c,KACtDmQ,EAAG5Q,KAAK,MAER4Q,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAKve,KAAKg2G,aAAarlG,EAAUqgB,cAEtC7B,EAAG5Q,KAAK,OACRve,KAAK21G,eAAe/0G,EAAM6U,KAG5B2gG,EAAAn0G,UAAA2zG,WAAA,SAAWh1G,EAAc6U,eACnB0Z,EAAKnvB,KAAKmvB,GACVunF,EAAcjhG,EAAQrC,MAAQ6+C,EAAA7kD,YAAYsc,UAC9C7f,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,eACZY,EACFvnF,EAAG5Q,KAAK,sBAEJ9I,EAAQ4G,GAAG5S,EAAApH,YAAYqd,WAAWyP,EAAG5Q,KAAK,aAC9C4Q,EAAG5Q,KAAK,kBAEV4Q,EAAG5Q,KAAK3d,GAMRuuB,EAAG5Q,KAAK,QACR,IAAI04D,EAAgBxhE,EAAQxT,UAAU4Z,QACtC,GAAIo7D,MACF,IAAmB,IAAA97D,EAAAzG,EAAAuiE,EAAc38D,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAA,CAApC,IAAIyG,EAAMD,EAAA9Z,MAA4BtB,KAAK80G,aAAaz5F,EAAOza,KAAMya,qGAE5E,IAAIH,EAAkBzF,EAAQoG,QAC9B,GAAIX,MACF,IAAmB,IAAAY,EAAApH,EAAAwG,EAAgBZ,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAA,CAAlCyG,EAAMU,EAAAza,MAA8BtB,KAAK80G,aAAaz5F,EAAOza,KAAMya,qGAE9ExR,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,QAGV63F,EAAAn0G,UAAAk0G,eAAA,SAAev1G,EAAc6U,GAC3BzV,KAAK41G,WAAWh1G,EAAM6U,IAGxB2gG,EAAAn0G,UAAAmzG,WAAA,SAAWx0G,EAAc6U,GACvB,IAAIA,EAAQ4G,GAAG5S,EAAApH,YAAY00D,SAA3B,CACA,IAAI5nC,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aACZrgG,EAAQ4G,GAAG5S,EAAApH,YAAY20D,YAAY7nC,EAAG5Q,KAAK,cAC3C9I,EAAQ4G,GAAG5S,EAAApH,YAAY+c,SAAS+P,EAAG5Q,KAAK,WACxC9I,EAAQ4G,GAAG5S,EAAApH,YAAYid,WAAW6P,EAAG5Q,KAAK,aAC9C4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKve,KAAKg2G,aAAavgG,EAAQuG,OAClCmT,EAAG5Q,KAAK,SAGV63F,EAAAn0G,UAAA0zG,eAAA,SAAe/0G,EAAc6U,WACvBoG,EAAUpG,EAAQoG,QACtB,GAAIA,GAAWA,EAAQ6/B,KAAM,CAC3B,IAAIvsB,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,eAChB3mF,EAAG5Q,KAAK,qBACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,YACR,IAAmB,IAAAwF,EAAArP,EAAAmH,EAAQvB,UAAQa,EAAA4I,EAAAnP,QAAAuG,EAAAtG,KAAAsG,EAAA4I,EAAAnP,OAAA,CAA9B,IAAIyG,EAAMF,EAAA7Z,MAAsBtB,KAAK80G,aAAaz5F,EAAOza,KAAMya,qGACpExR,EAAA6pG,OAAOvkF,IAAMnvB,KAAK81G,aAClB3mF,EAAG5Q,KAAK,SAIZ63F,EAAAn0G,UAAA8yG,WAAA,SAAWn0G,EAAc6U,EAAkB4wE,GACzC,IAAIl3D,EAAKnvB,KAAKmvB,GACdtlB,EAAA6pG,OAAOvkF,EAAInvB,KAAK81G,aAChB3mF,EAAG5Q,KAAK,iBACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK8nE,GACRl3D,EAAG5Q,KAAK,QAGV63F,EAAAn0G,UAAA+zG,aAAA,SAAah6F,GACX,OAAQA,EAAK5I,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOpT,KAAK4iB,QAAQxR,QAAQc,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOlS,KAAK4iB,QAAQxR,QAAQc,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAoB,MAAO,OAC3B,QAEE,OADArH,QAAO,GACA,QAKburG,EAAAn0G,UAAA8zG,MAAA,WACE,IAAI5mF,EAAKnvB,KAAKmvB,GAgBd,OAfAA,EAAG5Q,KAAK,+BACR4Q,EAAG5Q,KAAK,yBACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,yBACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACNve,KAAK81G,YACP91G,KAAK40G,SACH50G,KAAK81G,YACP3mF,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAK,8BACDve,KAAKmvB,GAAGzW,KAAK,KAExB09F,EAxNA,CAAgC3B,GAAnB/0G,EAAA02G,4aChVb,IAAA3sG,EAAAtJ,EAAA,GAMA8xD,EAAA9xD,EAAA,GAIAwvB,EAAAxvB,EAAA,GASAuJ,EAAAvJ,EAAA,GAKA0J,EAAA1J,EAAA,GAIAyJ,EAAAzJ,EAAA,GA2DAw2G,EAAA,SAAAppG,GAcE,SAAAopG,IAAA,IAAAlpG,EACEF,EAAA/M,KAAAR,OAAOA,YAVTyN,EAAAmpG,QAAoB,IAAI3vG,MAExBwG,EAAAopG,QAAuB,IAAI1vG,IAE3BsG,EAAAqpG,QAAuB,IAAI3vG,IAE3BsG,EAAA+sD,UAAmC,KAye3B/sD,EAAAspG,8BAAqC,EA8drCtpG,EAAAupG,oBAA4C,KAl8BlDvpG,EAAKmV,QAAU,IAAIqvC,EAAA3kD,QAAQG,EAAKD,eA2sHpC,OA3tH4BsB,EAAA6nG,EAAAppG,GAoB1BopG,EAAA10G,UAAAg1G,UAAA,SACEthG,EACAgM,EACAnH,GAEA,IAAI+I,EAAiB1Z,EAAAouB,cAActW,GAC/BJ,EAAe3X,EAAAwuB,mBAAmB7U,GAGtC,IAAIvjB,KAAK82G,QAAQ5lG,IAAIqQ,GAArB,CACAvhB,KAAK82G,QAAQplG,IAAI6P,GACjBvhB,KAAK62G,QAAQnlG,IAAI6P,GAGjB,IAAIxO,EAAS,IAAInJ,EAAAyE,OACfkV,EACA5N,EACA6E,EACI5Q,EAAA0E,WAAWiwB,MACX5c,EAAKuW,WAAWzuB,EAAA3G,iBAAmB6e,EAAKu1F,QAAQztG,EAAAnH,eAAgBmH,EAAA3G,eAAegI,QAAU,EACvFlB,EAAA0E,WAAWC,QACX3E,EAAA0E,WAAW2nD,SAEfrzC,EAAU5iB,KAAK4iB,QACnBA,EAAQlV,QAAQ6Q,KAAKxL,GAGrB,IAAIokG,EAAK,IAAIxnF,EAAAwqC,UAAUpnD,EAAQ6P,EAAQpV,aACvC2pG,EAAG38C,UAAYx6D,KAAKw6D,UACpBznD,EAAOkrB,UAAYk5E,EAEnB,IADA,IAAIlkG,EAAaF,EAAOE,YAChBkkG,EAAGh6C,KAAKxtC,EAAAC,MAAMgtC,YAAY,CAChC,IAAIzpD,EAAYnT,KAAKo3G,uBAAuBD,EAAI,MAC5ChkG,GAAWF,EAAWsL,KAAKpL,GAEjCgkG,EAAG92C,WAILs2C,EAAA10G,UAAAm1G,uBAAA,SACED,EACAr2B,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIrxE,EAAQhG,EAAApH,YAAYqN,KACpB2nG,GAAiB,EAGjB/5F,EAAqC,KAClC65F,EAAGh6C,KAAKxtC,EAAAC,MAAMssC,KAAK,CACpBm7C,EAAW,IAAGA,EAAWF,EAAG/8C,UAChC,IAAI58C,EAAYxd,KAAKs3G,eAAeH,GAC/B35F,EAIAF,EACAA,EAAWiB,KAAKf,GADJF,EAAa,CAACE,GAH7Bxd,KAAKu3G,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBR,EAAGh6C,KAAKxtC,EAAAC,MAAMhe,UACZylG,EAAW,IAAGA,EAAWF,EAAG/8C,UAChC3qD,GAAShG,EAAApH,YAAYuP,OACrB4lG,EAAcL,EAAG/8C,SACjBq9C,EAAYN,EAAG/4E,IACX+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMqmC,WAChByhD,EAAeP,EAAG/8C,SAClBu9C,EAAaR,EAAG/4E,MAIpB,IAAIw5E,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAbh3B,GAAqBA,EAAUzkE,GAAG5S,EAAApH,YAAY6f,SACjEi1F,EAAGh6C,KAAKxtC,EAAAC,MAAMnN,SACZq1F,EACF93G,KAAKqV,MACH3L,EAAA4L,eAAeyiG,gEACfZ,EAAGxnG,UAGD0nG,EAAW,IAAGA,EAAWF,EAAG/8C,UAChCw9C,EAAeP,EACfQ,EAAaV,EAAG/4E,IAChB3uB,GAAShG,EAAApH,YAAYogB,QAAUhZ,EAAApH,YAAY6f,SAEpC41F,IACTroG,GAAShG,EAAApH,YAAY6f,SAIvB,IAAI/O,EAA8B,KAG9B6kG,EAAQb,EAAGt6C,OAEf,OADIw6C,EAAW,IAAGA,EAAWF,EAAG78C,cACxB09C,GACN,KAAKroF,EAAAC,MAAMpT,MACT26F,EAAGviG,OACHnF,GAAShG,EAAApH,YAAYma,MAEnBrJ,EADEgkG,EAAGh6C,KAAKxtC,EAAAC,MAAMvL,MACJrkB,KAAKi4G,UAAUd,EAAI1nG,EAAO6N,EAAY+5F,GAEtCr3G,KAAKk4G,cAAcf,EAAI1nG,EAAO6N,EAAY+5F,GAExD/5F,EAAa,KACb,MAEF,KAAKqS,EAAAC,MAAM+mC,IAAKlnD,GAAShG,EAAApH,YAAYs0D,IACrC,KAAKhnC,EAAAC,MAAMwnC,IACT+/C,EAAGviG,OACHzB,EAAYnT,KAAKk4G,cAAcf,EAAI1nG,EAAO6N,EAAY+5F,GACtD/5F,EAAa,KACb,MAEF,KAAKqS,EAAAC,MAAMvL,KACT8yF,EAAGviG,OACHzB,EAAYnT,KAAKi4G,UAAUd,EAAI1nG,EAAO6N,EAAY+5F,GAClD/5F,EAAa,KACb,MAEF,KAAKqS,EAAAC,MAAMlU,SACTy7F,EAAGviG,OACHzB,EAAYnT,KAAKm4G,cAAchB,EAAI1nG,EAAO6N,EAAY+5F,GACtD/5F,EAAa,KACb,MAEF,KAAKqS,EAAAC,MAAMlQ,SACT,IAAI29C,EAAQ85C,EAAG/5C,OAEf,GADA+5C,EAAGviG,QACEuiG,EAAGh6C,KAAKxtC,EAAAC,MAAMhU,OAAQ,CACzBu7F,EAAG15C,MAAMJ,GACTlqD,EAAYnT,KAAKo4G,eAAejB,GAAI,GACpC,MAEAA,EAAG35C,QAAQH,GAEb5tD,GAAShG,EAAApH,YAAYqd,SAGvB,KAAKiQ,EAAAC,MAAMhU,MACX,KAAK+T,EAAAC,MAAMlG,UACTytF,EAAGviG,OACHzB,EAAYnT,KAAKq4G,sBAAsBlB,EAAI1nG,EAAO6N,EAAY+5F,GAC9D/5F,EAAa,KACb,MAEF,KAAKqS,EAAAC,MAAMxL,UACLi5C,EAAQ85C,EAAG/5C,OACf+5C,EAAGviG,OACCuiG,EAAGt6C,MAAK,EAAOltC,EAAA8lC,mBAAmBgH,SAAW9sC,EAAAC,MAAMM,YACrDinF,EAAG35C,QAAQH,GACXlqD,EAAYnT,KAAKs4G,eAAenB,EAAI1nG,EAAO6N,EAAY+5F,GACvD/5F,EAAa,OAEb65F,EAAG15C,MAAMJ,GACTlqD,EAAYnT,KAAKo4G,eAAejB,GAAI,IAEtC,MAEF,KAAKxnF,EAAAC,MAAMnc,OACT0jG,EAAGviG,OAGDzB,GAFF1D,GAAShG,EAAApH,YAAYoR,QACThK,EAAApH,YAAYuP,OACV5R,KAAKu4G,kBAAkBpB,EAAIE,GAE3Br3G,KAAKw4G,YAAYrB,GAE/B,MAEF,KAAKxnF,EAAAC,MAAMsnC,KACLmG,EAAQ85C,EAAG/5C,OACf+5C,EAAGviG,OACCuiG,EAAGt6C,MAAK,EAAOltC,EAAA8lC,mBAAmBgH,SAAW9sC,EAAAC,MAAMM,YACrDinF,EAAG35C,QAAQH,GACXlqD,EAAYnT,KAAKy4G,qBAAqBtB,EAAI1nG,EAAO6N,EAAY+5F,GAC7D/5F,EAAa,OAEb65F,EAAG15C,MAAMJ,GACTlqD,EAAYnT,KAAKo4G,eAAejB,GAAI,IAEtC,MAEF,QAGM1nG,EAAQhG,EAAApH,YAAYuP,OAClB+lG,GAAcR,EAAGj6C,eAAevtC,EAAA8lC,mBAAmBgH,SACjDo7C,GACF73G,KAAKqV,MACH3L,EAAA4L,eAAeojG,2CACfvB,EAAGxnG,MAAMioG,EAAcC,IAG3B1kG,EAAYnT,KAAK24G,wBAAwBxB,EAAIE,EAAUK,EAAcC,GACrED,EAAeC,EAAa,GAE5BxkG,EAAYnT,KAAK44G,YAAYzB,EAAIE,EAA2C,IAAhC5nG,EAAQhG,EAAApH,YAAYogB,WAK9Dg1F,GACFz3G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAM6nG,EAAaC,GAAY,UAGlCI,GACF73G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMioG,EAAcC,GAAa,WAGnC/2B,IACH3tE,EAAYnT,KAAKo4G,eAAejB,GAAI,KAQ5C,GAAI75F,EACF,IAAK,IAAIjd,EAAI,EAAGyS,EAAIwK,EAAWxS,OAAQzK,EAAIyS,IAAKzS,EAC9CL,KAAKqV,MACH3L,EAAA4L,eAAewjG,8BACfx7F,EAAWjd,GAAGsP,OAMpB,GAAIgoG,GAA4B,OAAdxkG,EAChB,OAAQA,EAAUC,MAChB,KAAKxJ,EAAAyJ,SAASU,gBACd,KAAKnK,EAAAyJ,SAASY,oBACd,KAAKrK,EAAAyJ,SAASQ,iBACd,KAAKjK,EAAAyJ,SAASc,qBACd,KAAKvK,EAAAyJ,SAASgB,qBACZ,OAAOzK,EAAAgG,KAAKyoB,6BAAmDllB,EAAWgkG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAElG,QACEp+B,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAM+nG,EAAcC,GAAa,WAK5C,OAAOxkG,GAITwjG,EAAA10G,UAAA82G,SAAA,WACE,IAAInC,EAAU52G,KAAK42G,QACnB,OAAOA,EAAQ9rG,OAAS8rG,EAAQ/5D,QAAU,MAI5C85D,EAAA10G,UAAAo+D,OAAA,WACE,GAAIrgE,KAAK42G,QAAQ9rG,OAAQ,MAAM,IAAIqO,MAAM,wBAIzC,OAHAnZ,KAAK42G,QAAU,GACf52G,KAAK62G,QAAQmC,QACbh5G,KAAK82G,QAAQkC,QACNh5G,KAAK4iB,SAId+zF,EAAA10G,UAAAg3G,UAAA,SACE9B,EACA+B,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGIn9F,EAHAw7C,EAAQ2/C,EAAGviG,OACXyiG,EAAWF,EAAG/8C,SAKlB,GAAI5C,GAAS7nC,EAAAC,MAAMkrC,UAAW,CAG5B,IAAIs+C,EAAsBjC,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAEpCnqD,EAAY3Q,KAAKq5G,qBAAqBlC,GAC1C,GAAIxmG,EAAW,CACb,GAAIyoG,EAAqB,CACvB,IAAKjC,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAKjB,OAJA/6D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAET,IAAKwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMkpC,KAKjB,OAJA94D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAEJwnG,EAAGh6C,KAAKxtC,EAAAC,MAAME,OACjB9vB,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,QAGhBgB,EAAUkgB,YAAa,EAEzB,OAAOlgB,EACF,GAAIyoG,GAAuBp5G,KAAK+2G,6BAKrC,OAJA/2G,KAAKqV,MACH3L,EAAA4L,eAAegkG,iBACfnC,EAAGxnG,SAEE,KAIT,IAAIupG,EAoBF,OAJAl5G,KAAKqV,MACH3L,EAAA4L,eAAegkG,iBACfnC,EAAGxnG,SAEE,KAnBP,IAAI4pG,EAAYv5G,KAAKi5G,UAAU9B,GAAI,EAAOgC,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAKpC,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAOjB,OANKo+C,GACHn5G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,KAGf,MAETpiB,EAAOu9F,GACF5pG,MAAMqf,MAAQqoF,EACnBr7F,EAAKrM,MAAMsf,IAAMkoF,EAAG/4E,SAUjB,GAAIo5B,GAAS7nC,EAAAC,MAAMiQ,KACxB7jB,EAAOpS,EAAAgG,KAAKU,gBACV1G,EAAAgG,KAAKW,qBAAqB,OAAQ4mG,EAAGxnG,SAAU,IAAI,EAAOwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,WAI7E,GAAIo5B,GAAS7nC,EAAAC,MAAM+N,KACxB3hB,EAAOpS,EAAAgG,KAAKU,gBACV1G,EAAAgG,KAAKW,qBAAqB,OAAQ4mG,EAAGxnG,SAAU,IAAI,EAAOwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,WAI7E,GAAIo5B,GAAS7nC,EAAAC,MAAMG,MAAQynC,GAAS7nC,EAAAC,MAAMI,MAC/ChU,EAAOpS,EAAAgG,KAAKU,gBACV1G,EAAAgG,KAAKW,qBAAqB,OAAQ4mG,EAAGxnG,SAAU,IAAI,EAAOwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,WAI7E,GAAIo5B,GAAS7nC,EAAAC,MAAMgrC,cACxBu8C,EAAGrzD,aACH9nC,EAAOpS,EAAAgG,KAAKU,gBACV1G,EAAAgG,KAAKW,qBAAqB,SAAU4mG,EAAGxnG,SAAU,IAAI,EAAOwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,UAI/E,IAAIo5B,GAAS7nC,EAAAC,MAAMM,WA6DxB,OANKipF,GACHn5G,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGA,KAtDP,IANA,IAAIqoG,EAAQpuG,EAAAgG,KAAKW,qBAAqB4mG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAC1DoT,EAAUi1F,EACVjnF,EAAqC,KACrC0oF,GAAW,EAGRtC,EAAGh6C,KAAKxtC,EAAAC,MAAMsrC,MAAM,CACzB,IAAIi8C,EAAGh6C,KAAKxtC,EAAAC,MAAMM,YAShB,OAJAlwB,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,MAAMwnG,EAAG/4E,MAEP,KARP,IAAIxpB,EAAOhL,EAAAgG,KAAKW,qBAAqB4mG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAC7DoT,EAAQnO,KAAOA,EACfmO,EAAUnO,EAWd,GAAIuiG,EAAGh6C,KAAKxtC,EAAAC,MAAMgoC,UAAW,CAC3B,EAAG,CACD,IAAI8hD,EAAY15G,KAAKi5G,UAAU9B,GAAI,EAAMgC,GACzC,IAAKO,EAAW,OAAO,KAClB3oF,EACAA,EAAWxS,KAAoBm7F,GADnB3oF,EAAa,CAAgB2oF,SAEvCvC,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QACvB,IAAKg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMioC,aAOjB,OANKshD,GACHn5G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,KAGf,KAIX,KAAO+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMkpC,MAAM,CACzB,IAAIq+C,EAAGh6C,KAAKxtC,EAAAC,MAAME,MAShB,OANKqpF,GACHn5G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,QAGf,KARPq7E,GAAW,EAWfz9F,EAAOpS,EAAAgG,KAAKU,gBAAgB0nG,EAAOjnF,GAAc,GAAI0oF,EAAUtC,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAWvF,KAAO+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMksC,cAAc,CACjC,IAAI69C,EAAexC,EAAG/8C,SACtB,IAAK+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMmsC,cAOjB,OANKo9C,GACHn5G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGT,KAET,IAAIiqG,EAAezC,EAAGxnG,MAAMgqG,EAAcxC,EAAG/4E,KAGzCq7E,GAAW,EACf,GAAItC,EAAGh6C,KAAKxtC,EAAAC,MAAMkpC,KAAM,CACtB,IAAIq+C,EAAGh6C,KAAKxtC,EAAAC,MAAME,MAShB,OANKqpF,GACHn5G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,QAGT,KARP8pG,GAAW,EAiBf,GANAz9F,EAAOpS,EAAAgG,KAAKU,gBACV1G,EAAAgG,KAAKW,qBAAqB,QAASqpG,GACnC,CAAE59F,GACFy9F,EACAtC,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEpBq7E,EAAU,MAGhB,OAAOz9F,GAOT26F,EAAA10G,UAAAo3G,qBAAA,SACElC,GAKA,IAuGInmF,EAvGAqsC,EAAQ85C,EAAG/5C,OACXi6C,EAAWF,EAAG/8C,SACdrpC,EAAqC,KACrC3J,EAAiC,KACjCyyF,GAAoB,EAExB,GAAI1C,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAChB8+C,GAAc,EACd1C,EAAG35C,QAAQH,GACXtsC,EAAa,OAER,CACL8oF,GAAc,EACd,EAAG,CACD,IAAIzmG,EAAOxJ,EAAAsyB,cAAc+5B,QAMzB,GALIkhD,EAAGh6C,KAAKxtC,EAAAC,MAAM+nC,eAChBkiD,GAAc,EACd1C,EAAG35C,QAAQH,GACXjqD,EAAOxJ,EAAAsyB,cAAcilC,MAEnBg2C,EAAGh6C,KAAKxtC,EAAAC,MAAM+N,MAAO,CACvB,IAAIw5E,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAiBhB,OAFAy7C,EAAG15C,MAAMJ,GACTr9D,KAAK+2G,8BAA+B,EAC7B,KAhBP8C,GAAc,EACd1C,EAAG35C,QAAQH,GACX,IAAI97D,EAAIvB,KAAKi5G,UAAU9B,GAAI,GAC3B,IAAK51G,EAAG,OAAO,KACf,GAAIA,EAAE6R,MAAQxJ,EAAAyJ,SAAS0oB,UAMrB,OALA/7B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf/c,EAAEoO,OAEJ3P,KAAK+2G,8BAA+B,EAC7B,KAET3vF,EAA0B7lB,MAMvB,KAAI41G,EAAGj6C,iBA8CZ,OATI28C,EACF75G,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGLwnG,EAAG15C,MAAMJ,GAEXr9D,KAAK+2G,6BAA+B8C,EAC7B,KA7CP,IAAIj5G,EAAOgJ,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,MAAMwnG,EAAG/8C,SAAU+8C,EAAG/4E,MAazF,GAZI+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMisC,YAChBg+C,GAAc,EACd1C,EAAG35C,QAAQH,GACPjqD,GAAQxJ,EAAAsyB,cAAcilC,KACxBnhE,KAAKqV,MACH3L,EAAA4L,eAAewkG,oCACf3C,EAAGxnG,SAGLyD,EAAOxJ,EAAAsyB,cAAc69E,UAGrB5C,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAAQ,CACxBm+C,GAAc,EACd1C,EAAG35C,QAAQH,GACX,IAAIrhD,EAAOhc,KAAKi5G,UAAU9B,GAC1B,IAAKn7F,EAEH,OADAhc,KAAK+2G,6BAA+B8C,EAC7B,KAET,IAAIG,EAAQ,IAAIpwG,EAAA4nB,cAChBwoF,EAAMvoF,cAAgBre,EACtB4mG,EAAMp5G,KAAOA,EACbo5G,EAAMh+F,KAAOA,EACR+U,EACAA,EAAWxS,KAAKy7F,GADJjpF,EAAa,CAAEipF,QAG5BH,GACF75G,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACf81C,EAAGxnG,gBAgBJwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QACvB,IAAKg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAUjB,OATI8+C,EACF75G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGdwnG,EAAG15C,MAAMJ,GAEXr9D,KAAK+2G,6BAA+B8C,EAC7B,KAKX,OAAI1C,EAAGh6C,KAAKxtC,EAAAC,MAAMgsC,qBAChBi+C,GAAc,EACd1C,EAAG35C,QAAQH,IACXrsC,EAAahxB,KAAKi5G,UAAU9B,KAiB9Bn3G,KAAK+2G,8BAA+B,EAC7BntG,EAAAgG,KAAKS,mBACV0gB,GAAc,GACdC,EACA5J,GACA,EACA+vF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,QArBpBp+B,KAAK+2G,6BAA+B8C,EAC7B,QAGLA,EACF75G,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,MAGdwnG,EAAG15C,MAAMJ,GAEXr9D,KAAK+2G,6BAA+B8C,EAC7B,OAcXlD,EAAA10G,UAAAq1G,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAG/8C,SAClB,GAAI+8C,EAAGj6C,iBAAkB,CAGvB,IAFA,IAAIt8D,EAAOu2G,EAAGz5C,iBACV9qC,EAAyBhpB,EAAAgG,KAAKE,2BAA2BlP,EAAMu2G,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAClF+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMsrC,MAAM,CACzB,IAAIi8C,EAAGj6C,iBAYL,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAXP/O,EAAOu2G,EAAGz5C,iBACV9qC,EAAahpB,EAAAgG,KAAKylB,+BAChBzC,EACAhpB,EAAAgG,KAAKE,2BAA2BlP,EAAMu2G,EAAGxnG,SACzCwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAU5B,IAAIzM,OAAI,EACR,IAAIwlF,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAMhB,OAAOlxD,EAAAgG,KAAK8hB,gBAAgBkB,EAAY,KAAMukF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAJpE,GADAzM,EAAO3xB,KAAKi6G,eAAe9C,GAEzB,OAAOvtG,EAAAgG,KAAK8hB,gBAAgBkB,EAAYjB,EAAMwlF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,WAMxEp+B,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGP,OAAO,MAGTgnG,EAAA10G,UAAAi2G,cAAA,SACEf,EACA1nG,EACA6N,EACA+5F,GAKA,IAAIx7F,EAAU,IAAI5U,MAClB,EAAG,CACD,IAAIoU,EAASrb,KAAKk6G,yBAAyB/C,EAAI1nG,EAAO6N,GACtD,IAAKjC,EAAQ,OAAO,KACpBQ,EAAQ0C,KAA0BlD,SAC3B87F,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QAEvB,IAAIumB,EAAM95C,EAAAgG,KAAK0rB,wBAAwBzf,EAASyB,EAAY65F,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAElF,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAi4G,yBAAA,SACE/C,EACAgD,EACAC,GAKA,IAAKjD,EAAGj6C,iBAKN,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAET,IAAIK,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACrEggB,EAAA8nC,4BAA4BznD,EAAW2F,OACzC3V,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfxpG,EAAWL,OAGf,IAAIF,EAAQ0qG,EACRhD,EAAGh6C,KAAKxtC,EAAAC,MAAMopC,eAChBvpD,GAAShG,EAAApH,YAAYg4G,qBAGvB,IAAIr+F,EAAwB,KACxBm7F,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,SAChB1/C,EAAOhc,KAAKi5G,UAAU9B,IAGxB,IAAI1yF,EAAiC,KACrC,GAAI0yF,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,SAQhB,GAPI3pD,EAAQhG,EAAApH,YAAY6f,SACtBliB,KAAKqV,MACH3L,EAAA4L,eAAeglG,iDACfnD,EAAGxnG,WAGP8U,EAAczkB,KAAKu6G,gBAAgBpD,EAAI,IACrB,OAAO,UAErB1nG,EAAQhG,EAAApH,YAAYma,MAChB/M,EAAQhG,EAAApH,YAAY6f,SACxBliB,KAAKqV,MACH3L,EAAA4L,eAAegnE,wCACftsE,EAAWL,OAGLqM,GACVhc,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACf81C,EAAGxnG,MAAMwnG,EAAG/4E,MAIlB,IAAIzuB,EAAQggB,EAAAlX,MAAMC,KAAK1I,EAAWL,MAAOwnG,EAAGxnG,SAM5C,OALKF,EAAQhG,EAAApH,YAAYg4G,qBAAwB51F,GAC/CzkB,KAAKqV,MACH3L,EAAA4L,eAAeklG,iEACf7qG,GAEG/F,EAAAgG,KAAKC,0BACVG,EACAgM,EACAyI,EACA21F,EACA3qG,EACAE,IAIJgnG,EAAA10G,UAAAg2G,UAAA,SACEd,EACA1nG,EACA6N,EACA+5F,GAKA,GAAIF,EAAGviG,QAAU+a,EAAAC,MAAMM,WAKrB,OAJAlwB,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAET,IAAIK,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACzE,GAAIwnG,EAAGviG,QAAU+a,EAAAC,MAAMosC,UAKrB,OAJAh8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAGT,IADA,IAAIkM,EAAU,IAAI5U,OACVkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,IAAI5gD,EAASrb,KAAKy6G,eAAetD,EAAI1tG,EAAApH,YAAYqN,MACjD,IAAK2L,EAAQ,OAAO,KAEpB,GADAQ,EAAQ0C,KAA2BlD,IAC9B87F,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,YAChB,MAMA,OAJAj8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAIb,IAAI+zC,EAAM95C,EAAAgG,KAAK8nB,sBACb1nB,EACA6L,EACAyB,EACA7N,EACA0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGxB,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAw4G,eAAA,SACEtD,EACAgD,GAKA,IAAKhD,EAAGj6C,iBAKN,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAET,IAAIK,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACrErO,EAA2B,KAC/B,OAAI61G,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,WAChB93D,EAAQtB,KAAKu6G,gBAAgBpD,EAAI,IACd,KAEdvtG,EAAAgG,KAAKgoB,2BACV5nB,EACA1O,EACA64G,EACAxqF,EAAAlX,MAAMC,KAAK1I,EAAWL,MAAOwnG,EAAGxnG,WAIpCgnG,EAAA10G,UAAAy4G,YAAA,SACEvD,GAKA,IAAIhlF,EAA0B,KAC9B,GACEglF,EAAGt6C,MAAK,IAASltC,EAAAC,MAAM+rC,WACvBw7C,EAAG98C,WAAa1qC,EAAAC,MAAMqsC,aACrBk7C,EAAG58C,sBAEEpoC,EAAOnyB,KAAKu6G,gBAAgBpD,IAAM,OAAO,KAGjD,IAAIzzD,EAAM95C,EAAAgG,KAAK2qB,sBAAsBpI,EAAMglF,EAAGxnG,SAE9C,OADAwnG,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAA04G,oBAAA,SACExD,GAOA,IAFA,IAAIhzF,EAA6C,KAC7Cy2F,GAAe,GACXzD,EAAGh6C,KAAKxtC,EAAAC,MAAMioC,cAAc,CAClC,IAAIgjD,EAAgB76G,KAAK86G,mBAAmB3D,GAC5C,IAAK0D,EAAe,OAAO,KAY3B,GAXkC,OAA9BA,EAAczpF,YAChBwpF,GAAe,EACNA,IACT56G,KAAKqV,MACH3L,EAAA4L,eAAeylG,iEACfF,EAAclrG,OAEhBkrG,EAAczpF,YAAc,MAEzBjN,EACAA,EAAe5F,KAAKs8F,GADJ12F,EAAiB,CAAE02F,IAEnC1D,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMioC,aAChB,MAMA,OAJA73D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAUb,OANMwU,GAAkBA,EAAerZ,QACrC9K,KAAKqV,MACH3L,EAAA4L,eAAe0lG,oCACf7D,EAAGxnG,SAGAwU,GAGTwyF,EAAA10G,UAAA64G,mBAAA,SACE3D,GAKA,GAAIA,EAAGviG,QAAU+a,EAAAC,MAAMM,WAAY,CACjC,IAAIlgB,EAAapG,EAAAgG,KAAKE,2BACpBqnG,EAAGz5C,iBACHy5C,EAAGxnG,SAED6O,EAAoC,KACxC,GAAI24F,EAAGh6C,KAAKxtC,EAAAC,MAAMwmC,SAAU,CAE1B,KADI70D,EAAIvB,KAAKi5G,UAAU9B,IACf,OAAO,KACf,GAAI51G,EAAE6R,MAAQxJ,EAAAyJ,SAAS0oB,UAKrB,OAJA/7B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf/c,EAAEoO,OAEG,KAET6O,EAA6Bjd,EAE/B,IAAI6vB,EAAoC,KACxC,GAAI+lF,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,QAAS,CACzB,IAAI73D,EACJ,KADIA,EAAIvB,KAAKi5G,UAAU9B,IACf,OAAO,KACf,GAAI51G,EAAE6R,MAAQxJ,EAAAyJ,SAAS0oB,UAKrB,OAJA/7B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf/c,EAAEoO,OAEG,KAETyhB,EAA6B7vB,EAE/B,OAAOqI,EAAAgG,KAAKuhB,oBACVnhB,EACAwO,EACA4S,EACAzB,EAAAlX,MAAMC,KAAK1I,EAAWL,MAAOwnG,EAAGxnG,UAQpC,OALE3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGA,MAKTgnG,EAAA10G,UAAAg5G,gBAAA,SACE9D,EACA+D,QAAA,IAAAA,OAAA,GAKA,IAAInqF,EAAa,IAAI9pB,MACjBk0G,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACfh0F,EAA4B,KAIhC,GADApnB,KAAKg3G,oBAAsB,KACvBG,EAAGh6C,KAAKxtC,EAAAC,MAAM+N,MAAO,CACvB,IAAIw5E,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAgBhB,OAJA17D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAdP,KADAyX,EAAWpnB,KAAKi5G,UAAU9B,IACX,OAAO,KAgBxB,GAfM/vF,EAAShU,MAAQxJ,EAAAyJ,SAAS0oB,UAC5B/7B,KAAKg3G,oBAAqC5vF,EAE1CpnB,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf8I,EAASzX,QAUVwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OACjB,OAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YACThqC,GAEP/wB,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAKb,MAAQwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,aAAa,CACjC,IAAIi/C,EAAQh6G,KAAKq7G,eAAelE,EAAI+D,GACpC,IAAKlB,EAAO,OAAO,KAQnB,OAPImB,IAAaC,IACfp7G,KAAKqV,MACH3L,EAAA4L,eAAegmG,kDACfH,EAASv6G,KAAK+O,OAEhByrG,GAAe,GAETpB,EAAMvoF,eACZ,QACMmpF,GACF56G,KAAKqV,MACH3L,EAAA4L,eAAeimG,yDACfvB,EAAMp5G,KAAK+O,OAGf,MAEF,KAAK/F,EAAAsyB,cAAc69E,SACjBa,GAAe,EACf,MAEF,KAAKhxG,EAAAsyB,cAAcilC,KACjBg6C,EAAWnB,EAKf,GADAjpF,EAAWxS,KAAKy7F,IACX7C,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAChB,MAMA,OAJA/6D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAIb,OAAOohB,GAGT4lF,EAAA10G,UAAAo5G,eAAA,SACElE,EACA+D,QAAA,IAAAA,OAAA,GAKA,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2BlyG,EAAApH,YAAYqN,KAC3C,GAAIwrG,IACE/D,EAAGh6C,KAAKxtC,EAAAC,MAAMqnC,SAChBykD,EAAavE,EAAGxnG,QAChBgsG,GAAelyG,EAAApH,YAAY40D,QAClBkgD,EAAGh6C,KAAKxtC,EAAAC,MAAMonC,YACvB0kD,EAAavE,EAAGxnG,QAChBgsG,GAAelyG,EAAApH,YAAY20D,WAClBmgD,EAAGh6C,KAAKxtC,EAAAC,MAAMmnC,WACvB2kD,EAAavE,EAAGxnG,QAChBgsG,GAAelyG,EAAApH,YAAY00D,SAEzBogD,EAAGt6C,QAAUltC,EAAAC,MAAMtQ,UAAU,CAC/B,IAAI+9C,EAAQ85C,EAAG/5C,OACf+5C,EAAGviG,OACCuiG,EAAGt6C,QAAUltC,EAAAC,MAAM8rC,OACrBy7C,EAAG35C,QAAQH,GACNq+C,IAAYA,EAAavE,EAAGxnG,SACjCgsG,GAAelyG,EAAApH,YAAYid,UAE3B63F,EAAG15C,MAAMJ,GAef,GAXI85C,EAAGh6C,KAAKxtC,EAAAC,MAAM+nC,eACZgkD,EACF37G,KAAKqV,MACH3L,EAAA4L,eAAesmG,+DACfzE,EAAGxnG,SAGL+rG,EAAavE,EAAGxnG,QAElB6rG,GAAS,GAEPrE,EAAGj6C,iBAAkB,CAClBs+C,IAAQE,EAAavE,EAAGxnG,SAC7B,IAAIK,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACrEqM,EAAwB,KAS5B,IARIy/F,EAAatE,EAAGh6C,KAAKxtC,EAAAC,MAAMisC,YACzB2/C,GACFx7G,KAAKqV,MACH3L,EAAA4L,eAAewkG,oCACf9pG,EAAWL,OAIbwnG,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,QAEhB,KADA1/C,EAAOhc,KAAKi5G,UAAU9B,IACX,OAAO,UAElBn7F,EAAOpS,EAAAgG,KAAKM,kBAAkBinG,EAAGxnG,MAAMwnG,EAAG/4E,MAE5C,IAAI3Z,EAAiC,KACrC,GAAI0yF,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,UACZoiD,GACFx7G,KAAKqV,MACH3L,EAAA4L,eAAeumG,4CACf7rG,EAAWL,OAGX8rG,EACFz7G,KAAKqV,MACH3L,EAAA4L,eAAewmG,oDACf9rG,EAAWL,OAGb8rG,GAAa,IAEfh3F,EAAczkB,KAAKu6G,gBAAgBpD,EAAI,KACrB,OAAO,KAE3B,IAAI6C,EAAQpwG,EAAAgG,KAAK2hB,gBACfvhB,EACAgM,EACAyI,EACA+2F,EACI5xG,EAAAsyB,cAAcilC,KACds6C,EACE7xG,EAAAsyB,cAAc69E,SACdnwG,EAAAsyB,cAAc+5B,QACpBtmC,EAAAlX,MAAMC,KAAYgjG,EAAYvE,EAAGxnG,UAGnC,OADAqqG,EAAMvqG,OAASksG,EACR3B,EAOT,OALEh6G,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGA,MAGTgnG,EAAA10G,UAAAk2G,cAAA,SACEhB,EACA1nG,EACA6N,EACA+5F,GAUA,IAAKF,EAAGj6C,iBAKN,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,MAAMwnG,EAAG/4E,MAEP,KAGT,IAAIx9B,EAAOgJ,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAC/DosG,GAAuB,EAEvB53F,EAA6C,KACjD,GAAIgzF,EAAGh6C,KAAKxtC,EAAAC,MAAMgoC,UAAW,CAG3B,GAFAmkD,EAAiB5E,EAAG/8C,WACpBj2C,EAAiBnkB,KAAK26G,oBAAoBxD,IACrB,OAAO,KAC5B1nG,GAAShG,EAAApH,YAAYwP,QAGvB,IAAKslG,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAKjB,OAJA96D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,KAEb,KAGL29E,EAAiB,IACnBA,EAAiB5E,EAAG/8C,UAGtB,IAAIrpC,EAAa/wB,KAAKi7G,gBAAgB9D,GACtC,IAAKpmF,EAAY,OAAO,KACxB,IAAI3J,EAAWpnB,KAAKg3G,oBAEhBgF,EAAwC,IAA5BvsG,EAAQhG,EAAApH,YAAY2c,KAChCg9F,IACuB,GAArBjrF,EAAWjmB,QACb9K,KAAKqV,MACH3L,EAAA4L,eAAe2mG,+CACfr7G,EAAK+O,OAGLohB,EAAWjmB,QAAUimB,EAAW,GAAGtM,aACrCzkB,KAAKqV,MACH3L,EAAA4L,eAAe4mG,oDACft7G,EAAK+O,QAKPF,EAAQhG,EAAApH,YAAY0c,KAClBgS,EAAWjmB,QACb9K,KAAKqV,MACH3L,EAAA4L,eAAe6mG,sCACfv7G,EAAK+O,OAKX,IAAIqhB,EAA8B,KAClC,GAAImmF,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,UAChB1qC,EAAahxB,KAAKi5G,UAAU9B,GAAI,EAAM6E,IACrB,OAAO,KAGrBhrF,IACHA,EAAapnB,EAAAgG,KAAKM,kBAChBinG,EAAGxnG,MAAMwnG,EAAG/4E,MAET49E,GACHh8G,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfrwC,EAAWrhB,QAKjB,IAAIgB,EAAY/G,EAAAgG,KAAKS,mBACnB0gB,EACAC,EACA5J,GACA,EACA+vF,EAAGxnG,MAAMosG,EAAgB5E,EAAG/4E,MAG1B/Y,EAAyB,KAC7B,GAAI8xF,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,YAShB,GARIvsD,EAAQhG,EAAApH,YAAY6f,SACtBliB,KAAKqV,MACH3L,EAAA4L,eAAeuhE,yDACfsgC,EAAGxnG,WAIP0V,EAAOrlB,KAAKo8G,oBAAoBjF,GAAI,IACzB,OAAO,UACP1nG,EAAQhG,EAAApH,YAAY6f,SAC/BliB,KAAKqV,MACH3L,EAAA4L,eAAeyhE,gFACfogC,EAAGxnG,MAAMwnG,EAAG/4E,MAIhB,IAAIslB,EAAM95C,EAAAgG,KAAKQ,0BACbxP,EACAujB,EACAxT,EACA0U,EACA/H,EACA7N,EAAK,EAEL0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGxB,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAo6G,wBAAA,SAAwBlF,GACtB,IACIv2G,EADAy2G,EAAWF,EAAG/8C,SAEd90C,EAAS,EAOb,GAAI6xF,EAAG3/C,OAAS7nC,EAAAC,MAAMlU,UAMpB,GAJE9a,EADEu2G,EAAGj6C,iBACEtzD,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAExD/F,EAAAgG,KAAK0iB,gCAAgC6kF,EAAGxnG,MAAMwnG,EAAG/4E,OAErD+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAKjB,OAJA96D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,KAEb,UAQT9Y,EAAS,EACTza,OAAOssG,EAAG3/C,OAAS7nC,EAAAC,MAAMkrC,WACzBl6D,EAAOgJ,EAAAgG,KAAK0iB,gCAAgC6kF,EAAGxnG,MAAMwnG,EAAG/8C,WAK1D,IAAI2hD,EAAiB5E,EAAG/4E,IACpBrN,EAAa/wB,KAAKi7G,gBAAgB9D,GACtC,OAAKpmF,EAEE/wB,KAAKs8G,8BAA8BnF,EAAIv2G,EAAMmwB,EAAYzL,EAAW+xF,EAAU0E,GAF7D,MAKlBpF,EAAA10G,UAAAq6G,8BAAR,SACEnF,EACAv2G,EACAmwB,EACAzL,EACA+xF,EACA0E,QADA,IAAA1E,OAAiB,QACjB,IAAA0E,OAAuB,GAEnB1E,EAAW,IAAGA,EAAWz2G,EAAK+O,MAAMqf,OACpC+sF,EAAiB,IAAGA,EAAiB1E,GAEzC,IAAIrmF,EAA8B,KAClC,GAAa,GAAT1L,GAAuC6xF,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,QAEvD,KADA1qC,EAAahxB,KAAKi5G,UAAU9B,IACX,OAAO,UAExBnmF,EAAapnB,EAAAgG,KAAKM,kBAAkBinG,EAAGxnG,MAAMwnG,EAAG/4E,MAGlD,GAAI9Y,IACG6xF,EAAGh6C,KAAKxtC,EAAAC,MAAMgsC,oBAKjB,OAJA57D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,MAEb,KAIX,IAAIztB,EAAY/G,EAAAgG,KAAKS,mBACnB0gB,EACAC,EACA,MACA,EACAmmF,EAAGxnG,MAAMosG,EAAgB5E,EAAG/4E,MAG1B/Y,EAAyB,KAC7B,GAAIC,EACF,GAAI6xF,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAChB32C,EAAOrlB,KAAKo8G,oBAAoBjF,GAAI,OAC/B,CACL,IAAIoF,EAAiBv8G,KAAKu6G,gBAAgBpD,EAAI,GAC1CoF,IAAgBl3F,EAAOzb,EAAAgG,KAAKgpB,0BAA0B2jF,QAEvD,CACL,IAAKpF,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAKjB,OAJAh8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,KAEb,KAET/Y,EAAOrlB,KAAKo8G,oBAAoBjF,GAAI,GAEtC,IAAK9xF,EAAM,OAAO,KAElB,IAAIpU,EAAcrH,EAAAgG,KAAKQ,0BACrBxP,EACA,KACA+P,EACA0U,EACA,KACA5b,EAAApH,YAAYqN,KACZ4V,EACA6xF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,OAAOx0B,EAAAgG,KAAKykB,yBAAyBpjB,IAGvC0lG,EAAA10G,UAAAo2G,sBAAA,SACElB,EACA1nG,EACA6N,EACA+5F,GAUA,IAAIX,EAAcS,EAAG3/C,OAAS7nC,EAAAC,MAAMlG,UAEpC,IAAKytF,EAAGj6C,iBAKN,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAGT,IAAIK,EAAapG,EAAAgG,KAAKE,2BACpBqnG,EAAGz5C,iBACHy5C,EAAGxnG,SAGDwU,EAA6C,KACjD,GAAIgzF,EAAGh6C,KAAKxtC,EAAAC,MAAMgoC,UAAW,CAE3B,KADAzzC,EAAiBnkB,KAAK26G,oBAAoBxD,IACrB,OAAO,KAC5B1nG,GAAShG,EAAApH,YAAYwP,QAGvB,IAAI2M,EAAoC,KACxC,GAAI24F,EAAGh6C,KAAKxtC,EAAAC,MAAMwmC,SAAU,CAC1B,IAAI70D,EAAIvB,KAAKi5G,UAAU9B,GACvB,IAAK51G,EAAG,OAAO,KACf,GAAIA,EAAE6R,MAAQxJ,EAAAyJ,SAAS0oB,UAKrB,OAJA/7B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf/c,EAAEoO,OAEG,KAET6O,EAA6Bjd,EAG/B,IAAI2c,EAA0C,KAC9C,GAAIi5F,EAAGh6C,KAAKxtC,EAAAC,MAAM2mC,YAAa,CACzBmgD,GACF12G,KAAKqV,MACH3L,EAAA4L,eAAeknG,oDACfrF,EAAGxnG,SAGP,EAAG,CACD,IAAIqM,EAAOhc,KAAKi5G,UAAU9B,GAC1B,IAAKn7F,EAAM,OAAO,KACb06F,IACEx4F,EACAA,EAAgBK,KAAoBvC,GADnBkC,EAAkB,CAAgBlC,UAGnDm7F,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QAGzB,IAAKg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAKjB,OAJAh8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAGT,IACIsB,EADA4K,EAAU,IAAI5U,MAyBlB,GAvBIyvG,GACF7rG,QAAQqT,GACRjN,EAAcrH,EAAAgG,KAAK4pB,2BACjBxpB,EACAmU,EACA3F,EACA3C,EACAyB,EACA7N,EACA0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAGxBntB,EAAcrH,EAAAgG,KAAKsnB,uBACjBlnB,EACAmU,EACA3F,EACAN,EACArC,EACAyB,EACA7N,EACA0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAGrB+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,YACjB,EAAG,CACD,IAAI5gD,EAASrb,KAAKy8G,iBAAiBtF,EAAIlmG,GACvC,GAAIoK,EAAQQ,EAAQ0C,KAA2BlD,QAG7C,GADArb,KAAKu3G,cAAcJ,GACfA,EAAGh6C,KAAKxtC,EAAAC,MAAMgtC,WAKhB,OAJA58D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,YAGHwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAG1B,OADAhrD,EAAYtB,MAAMsf,IAAMkoF,EAAG/4E,IACpBntB,GAGT0lG,EAAA10G,UAAAy6G,qBAAA,SAAqBvF,GAInB,IACIv2G,EADAy2G,EAAWF,EAAG/8C,SASlB,GALEx5D,EADEu2G,EAAGj6C,iBACEtzD,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAExD/F,EAAAgG,KAAK0iB,gCAAgC6kF,EAAGxnG,MAAMwnG,EAAG/4E,OAGrD+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAKjB,OAJAh8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,MAAMwnG,EAAG/4E,KAAM,KAEb,KAGT,IAAIviB,EAAU,IAAI5U,MACdgK,EAAcrH,EAAAgG,KAAKsnB,uBACrBt2B,EACA,GACA,KACA,KACAib,EACA,KACApS,EAAApH,YAAYqN,KACZynG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,IAAK+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,YACjB,EAAG,CACD,IAAI5gD,EAASrb,KAAKy8G,iBAAiBtF,EAAIlmG,GACvC,GAAIoK,EAAQQ,EAAQ0C,KAA2BlD,QAG7C,GADArb,KAAKu3G,cAAcJ,GACfA,EAAGh6C,KAAKxtC,EAAAC,MAAMgtC,WAKhB,OAJA58D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,YAGHwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAG1B,OADAhrD,EAAYtB,MAAMsf,IAAMkoF,EAAG/4E,IACpBx0B,EAAAgG,KAAK2jB,sBAAsBtiB,IAGpC0lG,EAAA10G,UAAAw6G,iBAAA,SACEtF,EACAvmG,GAUA,IAAIymG,EAAWF,EAAG/4E,IACds4E,EAAc9lG,EAAOwC,MAAQxJ,EAAAyJ,SAASc,qBAEtCmJ,EAAqC,KACzC,GAAI65F,EAAGh6C,KAAKxtC,EAAAC,MAAMssC,IAAK,CACrB,EAAG,CACD,IAAI1+C,EAAYxd,KAAKs3G,eAAeH,GACpC,IAAK35F,EAAW,MACXF,EACAA,EAAWiB,KAAoBf,GADnBF,EAAa,CAAgBE,SAEvC25F,EAAGh6C,KAAKxtC,EAAAC,MAAMssC,KACnB5+C,GAAco5F,GAChB12G,KAAKqV,MACH3L,EAAA4L,eAAewjG,8BACfnpF,EAAAlX,MAAMC,KAAK4E,EAAW,GAAG3N,MAAO2N,EAAWA,EAAWxS,OAAS,GAAG6E,QAMxE,IAAIF,EAAQmB,EAAOnB,MAAQhG,EAAApH,YAAY6f,QAGnCw0F,IAAajnG,GAAShG,EAAApH,YAAYs6G,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZ1F,EAAGh6C,KAAKxtC,EAAAC,MAAMqnC,SACZy/C,GACF12G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,QAAS,UAGhBF,GAAShG,EAAApH,YAAY40D,OACrB2lD,EAAczF,EAAG/8C,SACjByiD,EAAY1F,EAAG/4E,KACN+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMmnC,UACnB2/C,GACF12G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,QAAS,WAGhBF,GAAShG,EAAApH,YAAY00D,QACrB6lD,EAAczF,EAAG/8C,SACjByiD,EAAY1F,EAAG/4E,KACN+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMonC,aACnB0/C,GACF12G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,QAAS,aAGhBF,GAAShG,EAAApH,YAAY20D,UACrB4lD,EAAczF,EAAG/8C,SACjByiD,EAAY1F,EAAG/4E,KAGjB,IAAI0+E,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACd9F,EAAGh6C,KAAKxtC,EAAAC,MAAMxQ,SACZs3F,GACF12G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,QAAS,UAGhBF,GAAShG,EAAApH,YAAY+c,OACrB09F,EAAc3F,EAAG/8C,SACjB2iD,EAAY5F,EAAG/4E,MAEf3uB,GAAShG,EAAApH,YAAY+f,SACjB+0F,EAAGh6C,KAAKxtC,EAAAC,MAAMlQ,YACZg3F,GACF12G,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,QAAS,YAGhBF,GAAShG,EAAApH,YAAYqd,SACrBs9F,EAAgB7F,EAAG/8C,SACnB6iD,EAAc9F,EAAG/4E,KAEfxtB,EAAOnB,MAAQhG,EAAApH,YAAYwP,UAASpC,GAAShG,EAAApH,YAAY66G,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACvB,GAAIjG,EAAGt6C,QAAUltC,EAAAC,MAAMtQ,SAAU,CAC/B,IAAI+9F,EAAQlG,EAAG/5C,OACf+5C,EAAGviG,OACCuiG,EAAGt6C,QAAUltC,EAAAC,MAAM8rC,OACrBy7C,EAAG35C,QAAQ6/C,GACX5tG,GAAShG,EAAApH,YAAYid,SACrB69F,EAAgBhG,EAAG/8C,SACnBgjD,EAAcjG,EAAG/4E,KAEjB+4E,EAAG15C,MAAM4/C,GAKb,IA+DIz8G,EA/DAy8D,EAAQ85C,EAAG/5C,OACX89C,GAAgB,EAChBh6F,GAAW,EAGX86F,GAAW,EACXv7D,EAAgB,EAChB68D,EAAc,EAyDlB,GAxDK5G,IACCS,EAAGh6C,KAAKxtC,EAAAC,MAAM7Q,KACZo4F,EAAGt6C,MAAK,EAAMltC,EAAA8lC,mBAAmBgH,SAAW9sC,EAAAC,MAAMM,YAAeinF,EAAG58C,mBAYtE48C,EAAG15C,MAAMJ,IAXT5tD,GAAShG,EAAApH,YAAY0c,IACrBmC,GAAW,EACXu/B,EAAW02D,EAAG/8C,SACdkjD,EAASnG,EAAG/4E,IACR3uB,EAAQhG,EAAApH,YAAYid,UACtBtf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMwtG,EAAeC,GAAc,aAMnCjG,EAAGh6C,KAAKxtC,EAAAC,MAAM5Q,KACnBm4F,EAAGt6C,MAAK,EAAMltC,EAAA8lC,mBAAmBgH,SAAW9sC,EAAAC,MAAMM,YAAeinF,EAAG58C,mBAYtE48C,EAAG15C,MAAMJ,IAXT5tD,GAAShG,EAAApH,YAAY2c,IACrBg9F,GAAW,EACXv7D,EAAW02D,EAAG/8C,SACdkjD,EAASnG,EAAG/4E,IACR3uB,EAAQhG,EAAApH,YAAYid,UACtBtf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMwtG,EAAeC,GAAc,aAMnCjG,EAAGh6C,KAAKxtC,EAAAC,MAAM9P,eAEvBo7F,GAAgB,GADhBzrG,GAAShG,EAAApH,YAAYyd,aAETrW,EAAApH,YAAY+c,QACtBpf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMmtG,EAAaC,GAAY,UAGlCttG,EAAQhG,EAAApH,YAAYqd,UACtB1f,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMqtG,EAAeC,GAAc,YAGtCxtG,EAAQhG,EAAApH,YAAYid,UACtBtf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMwtG,EAAeC,GAAc,cAO1ClC,EACFt6G,EAAOgJ,EAAAgG,KAAKgkB,4BAA4BujF,EAAGxnG,aACtC,CACL,IAAMuR,IAAY86F,GAAa7E,EAAGh6C,KAAKxtC,EAAAC,MAAMksC,aAAc,CAErDrsD,EAAQhG,EAAApH,YAAY40D,OACtBj3D,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMitG,EAAaC,GAAY,UAE3BptG,EAAQhG,EAAApH,YAAY20D,UAC7Bh3D,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMitG,EAAaC,GAAY,aAE3BptG,EAAQhG,EAAApH,YAAY00D,SAC7B/2D,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMitG,EAAaC,GAAY,aAGlCptG,EAAQhG,EAAApH,YAAY+c,QACtBpf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMmtG,EAAaC,GAAY,UAGlCttG,EAAQhG,EAAApH,YAAYqd,UACtB1f,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMqtG,EAAeC,GAAc,YAGtCxtG,EAAQhG,EAAApH,YAAYid,UACtBtf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMwtG,EAAeC,GAAc,YAG1C,IAAIG,EAAWv9G,KAAKw9G,+BAA+BrG,EAAI75F,GACvD,OAAKigG,GACLpG,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACP4hD,GAFe,KAIxB,IAAKpG,EAAGj6C,iBAKN,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAET/O,EAAOgJ,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAEjE,IAAIwU,EAA6C,KACjD,GAAIgzF,EAAGh6C,KAAKxtC,EAAAC,MAAMgoC,UAAW,CAC3B,IAAI6lD,EAAsBtG,EAAG/8C,SAE7B,KADAj2C,EAAiBnkB,KAAK26G,oBAAoBxD,IACrB,OAAO,KACxB+D,EACFl7G,KAAKqV,MACH3L,EAAA4L,eAAeooG,2DACfvG,EAAGxnG,MAAM8tG,EAAqBtG,EAAG/4E,MAE1Bld,GAAY86F,EACrBh8G,KAAKqV,MACH3L,EAAA4L,eAAeqoG,wCACfxG,EAAGxnG,MAAM8tG,EAAqBtG,EAAG/4E,MAGnC3uB,GAAShG,EAAApH,YAAYwP,QAKzB,GAAIslG,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAAY,CAC5B,IAAIihD,EAAiB5E,EAAG/8C,SACpBrpC,EAAa/wB,KAAKi7G,gBAAgB9D,EAAI+D,GAC1C,IAAKnqF,EAAY,OAAO,KACxB,IAAI3J,EAAWpnB,KAAKg3G,oBACpB,GAAIkE,EACF,IAAK,IAAI76G,EAAI,EAAGyS,EAAIie,EAAWjmB,OAAQzK,EAAIyS,IAAKzS,EAAG,CACjD,IAAIq5G,EAAY3oF,EAAW1wB,GAC3B,GAAIq5G,EAAU56F,MACZrV,EAAApH,YAAY40D,OACZxtD,EAAApH,YAAY20D,UACZvtD,EAAApH,YAAY00D,QACZttD,EAAApH,YAAYid,UACX,CACD,IAAI8c,EAA2BxyB,EAAAgG,KAAK8pB,uBAClCggF,EAAU94G,KACV84G,EAAU19F,KACV,KACA,KACA09F,EAAUjqG,MAAQhG,EAAApH,YAAY+f,SAC9Bs3F,EAAU/pG,OAEZysB,EAAyBzT,eAAiBtoB,EAC1Cq5G,EAAUt9E,yBAA2BA,EACrCxrB,EAAOiL,QAAQ0C,KAAK6d,SAGflb,EACL6P,EAAWjmB,QACb9K,KAAKqV,MACH3L,EAAA4L,eAAe6mG,sCACfv7G,EAAK+O,OAGAqsG,IACgB,GAArBjrF,EAAWjmB,QACb9K,KAAKqV,MACH3L,EAAA4L,eAAe2mG,+CACfr7G,EAAK+O,OAGLohB,EAAWjmB,QAAUimB,EAAW,GAAGtM,aACrCzkB,KAAKqV,MACH3L,EAAA4L,eAAe4mG,oDACft7G,EAAK+O,QAKX,IAAIqhB,EAA8B,KAClC,GAAImmF,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,QAahB,GAZI96D,EAAKwS,MAAQxJ,EAAAyJ,SAASyM,YACxB9f,KAAKqV,MACH3L,EAAA4L,eAAesoG,2DACfzG,EAAGxnG,SAEIqsG,GACTh8G,KAAKqV,MACH3L,EAAA4L,eAAeuoG,oDACf1G,EAAGxnG,WAGPqhB,EAAahxB,KAAKi5G,UAAU9B,EAAIv2G,EAAKwS,MAAQxJ,EAAAyJ,SAASyM,aAAek8F,IACpD,OAAO,UAExBhrF,EAAapnB,EAAAgG,KAAKM,kBAAkBinG,EAAGxnG,MAAMwnG,EAAG/4E,MAC3C49E,GAAYp7G,EAAKwS,MAAQxJ,EAAAyJ,SAASyM,aACrC9f,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACfrwC,EAAWrhB,OAKjB,IAAIgB,EAAY/G,EAAAgG,KAAKS,mBACnB0gB,EACAC,EACA5J,GACA,EACA+vF,EAAGxnG,MAAMosG,EAAgB5E,EAAG/4E,MAG1B/Y,EAAyB,KAC7B,GAAI8xF,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,YAahB,GAZIvsD,EAAQhG,EAAApH,YAAY6f,QACtBliB,KAAKqV,MACH3L,EAAA4L,eAAeuhE,yDACfsgC,EAAGxnG,SAEIF,EAAQhG,EAAApH,YAAYqd,UAC7B1f,KAAKqV,MACH3L,EAAA4L,eAAewoG,qEACf3G,EAAGxnG,QAAS/O,EAAK+U,QAGrB0P,EAAOrlB,KAAKo8G,oBAAoBjF,GAAI,IACzB,OAAO,UACP1nG,EAAQhG,EAAApH,YAAY6f,SAAaw0F,GAC5C12G,KAAKqV,MACH3L,EAAA4L,eAAeyhE,gFACfogC,EAAGxnG,SAIP,IAAIouG,EAAYn0G,EAAAgG,KAAKwqB,wBACnBx5B,EACAujB,EACAxT,EACA0U,EACA/H,EACA7N,EACA0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGxB,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPoiD,EAEF,GAAI7C,EACTl7G,KAAKqV,MACH3L,EAAA4L,eAAe0oG,sCACfp9G,EAAK+O,WAGF,KAAIuR,IAAY86F,EAOhB,CACDvsG,EAAQhG,EAAApH,YAAYqd,UACtB1f,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAMqtG,EAAeC,GAAc,YAItCxtG,EAAQhG,EAAApH,YAAY0c,KACtB/e,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAnRW,EACF,GAkRgB,OAI5BF,EAAQhG,EAAApH,YAAY2c,KACtBhf,KAAKqV,MACH3L,EAAA4L,eAAeujG,gCACf1B,EAAGxnG,MAAM8wC,EAAU68D,GAAS,OAIhC,IAAIthG,EAAwB,KAU5B,GATIm7F,EAAGh6C,KAAKxtC,EAAAC,MAAMisC,WAChB77D,KAAKqV,MACH3L,EAAA4L,eAAe2oG,sCACf9G,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGtB+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMopC,eAChBvpD,GAAShG,EAAApH,YAAYg4G,qBAEnBlD,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,QAEhB,KADA1/C,EAAOhc,KAAKi5G,UAAU9B,IACX,OAAO,UAElBn3G,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACf81C,EAAGxnG,SAGP,IAAI8U,EAAiC,KACrC,GAAI0yF,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,WAChB30C,EAAczkB,KAAKu6G,gBAAgBpD,IACjB,OAAO,KAE3B,IAAIxnG,EAAQwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,KAC7B3uB,EAAQhG,EAAApH,YAAYg4G,sBAA0B5qG,EAAQhG,EAAApH,YAAY+c,QAAWs3F,GAAejyF,IAC/FzkB,KAAKqV,MACH3L,EAAA4L,eAAeklG,iEACf7qG,GAGJ,IAAIuuG,EAAWt0G,EAAAgG,KAAK8pB,uBAClB94B,EACAob,EACAyI,EACAnH,EACA7N,EACAE,GAGF,OADAwnG,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPuiD,EApEPl+G,KAAKqV,MACH3L,EAAA4L,eAAeyhE,gFACfn2E,EAAK+O,OAoET,OAAO,MAGTgnG,EAAA10G,UAAAu7G,+BAAA,SAA+BrG,EAAe75F,GAIxCA,GAAcA,EAAWxS,QAC3B9K,KAAKqV,MACH3L,EAAA4L,eAAewjG,8BACfnpF,EAAAlX,MAAMC,KAAK4E,EAAW,GAAG3N,MAAO2N,EAAWA,EAAWxS,OAAS,GAAG6E,QAItE,IAAIqf,EAAQmoF,EAAG/8C,SACf,GAAI+8C,EAAGj6C,iBAEL,GAAU,OADDi6C,EAAGz5C,iBAEV,GAAIy5C,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAAQ,CACxB,IAAIzhC,EAAUj6B,KAAKi5G,UAAU9B,GAC7B,IAAKl9E,EAAS,OAAO,KACrB,GAAIA,EAAQ7mB,MAAQxJ,EAAAyJ,SAAS0oB,UAK3B,OAJA/7B,KAAKqV,MACH3L,EAAA4L,eAAe+rD,cACf81C,EAAGxnG,SAEE,KAET,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMmsC,cAAe,CAC/B,GAAIo7C,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAAQ,CACxB,IAAIxhC,EAAYl6B,KAAKi5G,UAAU9B,GAC/B,OAAKj9E,EACEtwB,EAAAgG,KAAKoqB,gCAA+CC,EAASC,EAAWi9E,EAAGxnG,MAAMqf,EAAOmoF,EAAG/4E,MAD3E,KAGvBp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,YAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGP,OAAO,MAGTgnG,EAAA10G,UAAAq2G,eAAA,SACEnB,EACA1nG,EACA6N,EACA+5F,GAKA,GAAIF,EAAGj6C,iBAAkB,CACvB,IAAIltD,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACzE,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAAY,CAS5B,IARA,IAAIngD,EAAU,IAAI5U,MACdgK,EAAcrH,EAAAgG,KAAKa,2BACrBT,EACA6L,EACAyB,EACA7N,EACA0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAEhB+4E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,IAAI5gD,EAASrb,KAAKo3G,uBAAuBD,EAAIlmG,GAC7C,GAAIoK,EAAQQ,EAAQ0C,KAAKlD,QAGvB,GADArb,KAAKu3G,cAAcJ,GACfA,EAAGh6C,KAAKxtC,EAAAC,MAAMgtC,WAKhB,OAJA58D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAMb,OAFAsB,EAAYtB,MAAMsf,IAAMkoF,EAAG/4E,IAC3B+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACP1qD,EAEPjR,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGP,OAAO,MAGTgnG,EAAA10G,UAAA22G,YAAA,SACEzB,EACAE,EACAt/E,GAKA,IAAIpW,EAAuC,KAC3C,GAAIw1F,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAAY,CAE5B,IADA,IAAIngD,EAAU,IAAI5U,OACVkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,IAAI5gD,EAASrb,KAAKm+G,kBAAkBhH,GACpC,IAAK97F,EAAQ,OAAO,KAEpB,GADAQ,EAAQ0C,KAAKlD,IACR87F,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,YAChB,MAMA,OAJAj8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAIb,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAM0mC,MAAO,CACvB,IAAI6gD,EAAGh6C,KAAKxtC,EAAAC,MAAMgrC,eAOhB,OAJA56D,KAAKqV,MACH3L,EAAA4L,eAAesL,wBACfu2F,EAAGxnG,SAEE,KANPgS,EAAO/X,EAAAgG,KAAKomB,8BAA8BmhF,EAAGrzD,aAAcqzD,EAAGxnG,SAgBlE,OALqB,QADjB4R,GADAmiC,EAAM95C,EAAAgG,KAAKkoB,sBAAsBjc,EAAS8F,EAAMoW,EAAWo/E,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAC9D7c,eACOvhB,KAAK62G,QAAQ3lG,IAAIqQ,KAC7CvhB,KAAK42G,QAAQr4F,KAAKgD,GAClBvhB,KAAK62G,QAAQnlG,IAAI6P,IAEnB41F,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EACF,GAAIyzD,EAAGh6C,KAAKxtC,EAAAC,MAAMyoC,UACvB,GAAI8+C,EAAGh6C,KAAKxtC,EAAAC,MAAM0mC,MAAO,CACvB,GAAI6gD,EAAGh6C,KAAKxtC,EAAAC,MAAMgrC,eAAgB,CAChCj5C,EAAO/X,EAAAgG,KAAKomB,8BAA8BmhF,EAAGrzD,aAAcqzD,EAAGxnG,SAC9D,IAAI+zC,EAAM95C,EAAAgG,KAAKkoB,sBAAsB,KAAMnW,EAAMoW,EAAWo/E,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAC9E7c,EAAe1W,OAAO64C,EAAIniC,cAC1BxO,EAASokG,EAAGpkG,OAQhB,OAPKA,EAAOmrB,cAAanrB,EAAOmrB,YAAc,IAAI/2B,KAClD4L,EAAOmrB,YAAYxsB,IAAI6P,GAClBvhB,KAAK62G,QAAQ3lG,IAAIqQ,KACpBvhB,KAAK42G,QAAQr4F,KAAKgD,GAClBvhB,KAAK62G,QAAQnlG,IAAI6P,IAEnB41F,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAesL,wBACfu2F,EAAGxnG,cAIP3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,aAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGhB,OAAO,MAGTgnG,EAAA10G,UAAAk8G,kBAAA,SACEhH,GAKA,GAAIA,EAAGj6C,iBAAkB,CACvB,IAAIltD,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACrEyuG,EAA4C,KAChD,GAAIjH,EAAGh6C,KAAKxtC,EAAAC,MAAM+lC,IAAK,CACrB,IAAIwhD,EAAGj6C,eAAevtC,EAAA8lC,mBAAmB+G,QAOvC,OAJAx8D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KANPyuG,EAAex0G,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAS3E,OAAO/F,EAAAgG,KAAK8oB,mBACV1oB,EACAouG,EACAA,EACIzuF,EAAAlX,MAAMC,KAAK1I,EAAWL,MAAOyuG,EAAazuG,OAC1CK,EAAWL,OAQnB,OALE3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGA,MAGTgnG,EAAA10G,UAAA02G,wBAAA,SACExB,EACAE,EACAK,EACAC,GAKA,IAAI/2G,EAAOu2G,EAAGz5C,iBACV/tD,EAAQwnG,EAAGxnG,QACX+zC,EAAM95C,EAAAgG,KAAKkoB,sBAAsB,CACnCluB,EAAAgG,KAAK8oB,mBACH9uB,EAAAgG,KAAKE,2BAA2BlP,EAAM+O,GACtC/F,EAAAgG,KAAKE,2BAA2B,UAAWqnG,EAAGxnG,MAAM+nG,EAAcC,IAClEhoG,IAED,MAAM,EAAOwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEtC,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAu2G,YAAA,SACErB,GAOA,IAAIE,EAAWF,EAAG/8C,SACdv+C,EAAsC,KACtCmG,EAA6C,KAC7Cq8F,GAAW,EACf,GAAIlH,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAEhB,IADAngD,EAAU,IAAI5U,OACNkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,IAAI5gD,EAASrb,KAAKs+G,uBAAuBnH,GACzC,IAAK97F,EAAQ,OAAO,KAEpB,GADAQ,EAAQ0C,KAAKlD,IACR87F,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,YAChB,MAMA,OAJAj8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,WAIR,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMyoC,UAAW,CAClC,IAAI8+C,EAAGh6C,KAAKxtC,EAAAC,MAAM+lC,IAehB,OAJA31D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,MAEP,KAdP,IAAIwnG,EAAGj6C,iBAOL,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KANPqS,EAAgBpY,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,cAevE,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMM,WAAYP,EAAA8lC,mBAAmBgH,QAAS,CAC/D,IAAI77D,EAAOu2G,EAAGz5C,iBACV/tD,EAAQwnG,EAAGxnG,QAQf,GAPAkM,EAAU,CACRjS,EAAAgG,KAAK0pB,wBACH1vB,EAAAgG,KAAKE,2BAA2B,UAAWH,GAC3C/F,EAAAgG,KAAKE,2BAA2BlP,EAAM+O,GACtCA,IAGAwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAMhB,OAJAn9B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf64F,EAAGxnG,SAEE,UAGT0uG,GAAW,EAGb,GAAIA,GAAYlH,EAAGh6C,KAAKxtC,EAAAC,MAAM0mC,MAAO,CACnC,GAAI6gD,EAAGh6C,KAAKxtC,EAAAC,MAAMgrC,eAAgB,CAChC,IAAIj5C,EAAO/X,EAAAgG,KAAKomB,8BAA8BmhF,EAAGrzD,aAAcqzD,EAAGxnG,SAC9D+zC,OAAG,EACH1hC,GACFnX,QAAQgR,GACR6nC,EAAM95C,EAAAgG,KAAKypB,kCAAkCrX,EAAeL,EAAMw1F,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAExFslB,EAAM95C,EAAAgG,KAAKspB,sBAAsBrd,EAAS8F,EAAMw1F,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExE,IAAI7c,EAAemiC,EAAIniC,aAMvB,OALKvhB,KAAK62G,QAAQ3lG,IAAIqQ,KACpBvhB,KAAK42G,QAAQr4F,KAAKgD,GAClBvhB,KAAK62G,QAAQnlG,IAAI6P,IAEnB41F,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAesL,wBACfu2F,EAAGxnG,cAIP3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,QAGhB,OAAO,MAGTgnG,EAAA10G,UAAAq8G,uBAAA,SACEnH,GAKA,GAAIA,EAAGj6C,eAAevtC,EAAA8lC,mBAAmB+G,QAAS,CAChD,IAAIxsD,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACrEyuG,EAA4C,KAChD,GAAIjH,EAAGh6C,KAAKxtC,EAAAC,MAAM+lC,IAAK,CACrB,IAAIwhD,EAAGj6C,iBAOL,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KANPyuG,EAAex0G,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAS3E,OAAO/F,EAAAgG,KAAK0pB,wBACVtpB,EACAouG,EACAA,EACIzuF,EAAAlX,MAAMC,KAAK1I,EAAWL,MAAOyuG,EAAazuG,OAC1CK,EAAWL,OAQnB,OALE3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGA,MAGTgnG,EAAA10G,UAAAs2G,kBAAA,SACEpB,EACAE,GAKA,GAAIF,EAAGj6C,iBAAkB,CACvB,IAAIkhD,EAAex0G,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAC3E,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,QAAS,CACzB,GAAI+9C,EAAGj6C,iBAAkB,CACvB,IAAIltD,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SACrE+zC,EAAM95C,EAAAgG,KAAK2oB,4BAA4BvoB,EAAYouG,EAAcjH,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAE3F,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,cAIP3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGP,OAAO,MAGTgnG,EAAA10G,UAAAm2G,eAAA,SACEjB,EACAoH,QAAA,IAAAA,OAAA,GAKA,IAAIlhD,EAAQ85C,EAAG/5C,OAEXjqD,EAA8B,KAClC,OAFYgkG,EAAGviG,QAGb,KAAK+a,EAAAC,MAAM+O,MACTxrB,EAAYnT,KAAKw+G,WAAWrH,GAC5B,MAEF,KAAKxnF,EAAAC,MAAMpT,MACTrJ,EAAYnT,KAAKk4G,cAAcf,EAAI1tG,EAAApH,YAAYma,MAAO,KAAM26F,EAAG/8C,UAC/D,MAEF,KAAKzqC,EAAAC,MAAMgP,SACTzrB,EAAYnT,KAAKy+G,cAActH,GAC/B,MAEF,KAAKxnF,EAAAC,MAAMiP,GACT1rB,EAAYnT,KAAK0+G,iBAAiBvH,GAClC,MAEF,KAAKxnF,EAAAC,MAAMsP,IACT/rB,EAAYnT,KAAK2+G,kBAAkBxH,GACnC,MAEF,KAAKxnF,EAAAC,MAAMyP,GACTlsB,EAAYnT,KAAK4+G,iBAAiBzH,GAClC,MAEF,KAAKxnF,EAAAC,MAAM+mC,IACTxjD,EAAYnT,KAAKk4G,cAAcf,EAAI1tG,EAAApH,YAAYs0D,IAAK,KAAMwgD,EAAG/8C,UAC7D,MAEF,KAAKzqC,EAAAC,MAAMwnC,IACTjkD,EAAYnT,KAAKk4G,cAAcf,EAAI1tG,EAAApH,YAAYqN,KAAM,KAAMynG,EAAG/8C,UAC9D,MAEF,KAAKzqC,EAAAC,MAAMosC,UACT7oD,EAAYnT,KAAKo8G,oBAAoBjF,EAAIoH,GACzC,MAEF,KAAK5uF,EAAAC,MAAM2P,OACLg/E,GACFv+G,KAAKqV,MACH3L,EAAA4L,eAAeupG,2DACf1H,EAAGxnG,SAGPwD,EAAYnT,KAAK06G,YAAYvD,GAC7B,MAEF,KAAKxnF,EAAAC,MAAM+rC,UACT,OAAO/xD,EAAAgG,KAAK4nB,qBAAqB2/E,EAAGxnG,MAAMwnG,EAAG/8C,WAE/C,KAAKzqC,EAAAC,MAAM6P,OACTtsB,EAAYnT,KAAK8+G,qBAAqB3H,GACtC,MAEF,KAAKxnF,EAAAC,MAAM8P,MACTvsB,EAAYnT,KAAK++G,oBAAoB5H,GACrC,MAEF,KAAKxnF,EAAAC,MAAM+P,IACTxsB,EAAYnT,KAAKg/G,kBAAkB7H,GACnC,MAEF,KAAKxnF,EAAAC,MAAMiQ,KACT1sB,EAAYnT,KAAKi/G,mBAAmB9H,GACpC,MAEF,KAAKxnF,EAAAC,MAAMkQ,MACT3sB,EAAYnT,KAAKk/G,oBAAoB/H,GACrC,MAEF,KAAKxnF,EAAAC,MAAMsnC,KACT,GAAIigD,EAAGt6C,MAAK,EAAOltC,EAAA8lC,mBAAmBgH,SAAW9sC,EAAAC,MAAMM,WAAY,CACjE/c,EAAYnT,KAAKy4G,qBAAqBtB,EAAI1tG,EAAApH,YAAYqN,KAAM,KAAMynG,EAAG/8C,UACrE,MAIJ,QACE+8C,EAAG15C,MAAMJ,GACTlqD,EAAYnT,KAAKm/G,yBAAyBhI,GAU9C,OANKhkG,EAIHgkG,EAAG35C,QAAQH,IAHX85C,EAAG15C,MAAMJ,GACTr9D,KAAKu3G,cAAcJ,IAIdhkG,GAGTwjG,EAAA10G,UAAAm6G,oBAAA,SACEjF,EACAoH,GAOA,IAFA,IAAIlH,EAAWF,EAAG/8C,SACdnnD,EAAa,IAAIhM,OACbkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,IAAIoB,EAAQ85C,EAAG/5C,OACXjqD,EAAYnT,KAAKo4G,eAAejB,EAAIoH,GACxC,GAAKprG,EAKHgkG,EAAG35C,QAAQH,GACXpqD,EAAWsL,KAAKpL,OANF,CACd,GAAIgkG,EAAG3/C,OAAS7nC,EAAAC,MAAMgtC,UAAW,OAAO,KACxCu6C,EAAG15C,MAAMJ,GACTr9D,KAAKu3G,cAAcJ,IAMvB,IAAIzzD,EAAM95C,EAAAgG,KAAKinB,qBAAqB5jB,EAAYkkG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEtE,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAu8G,WAAA,SACErH,GAKA,IAAInnG,EAA0C,KAC1CmnG,EAAGt6C,MAAK,IAASltC,EAAAC,MAAMM,YAAeinF,EAAG58C,qBAC3C48C,EAAGviG,KAAK+a,EAAA8lC,mBAAmBgH,QAC3BzsD,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,UAEvE,IAAI+zC,EAAM95C,EAAAgG,KAAKmnB,qBAAqB/mB,EAAYmnG,EAAGxnG,SAEnD,OADAwnG,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAw8G,cAAA,SACEtH,GAKA,IAAInnG,EAA0C,KAC1CmnG,EAAGt6C,MAAK,IAASltC,EAAAC,MAAMM,YAAeinF,EAAG58C,qBAC3C48C,EAAGviG,KAAK+a,EAAA8lC,mBAAmBgH,QAC3BzsD,EAAapG,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,UAEvE,IAAI+zC,EAAM95C,EAAAgG,KAAKwnB,wBAAwBpnB,EAAYmnG,EAAGxnG,SAEtD,OADAwnG,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAy8G,iBAAA,SACEvH,GAKA,IAAIE,EAAWF,EAAG/8C,SACdjnD,EAAYnT,KAAKo4G,eAAejB,GACpC,IAAKhkG,EAAW,OAAO,KAEvB,GAAIgkG,EAAGh6C,KAAKxtC,EAAAC,MAAMkQ,OAEhB,GAAIq3E,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAAY,CAC5B,IAAIllC,EAAY51B,KAAKu6G,gBAAgBpD,GACrC,IAAKvhF,EAAW,OAAO,KAEvB,GAAIuhF,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAAa,CAC7B,IAAIrX,EAAM95C,EAAAgG,KAAK0nB,kBAA6BnkB,EAAuByiB,EAAWuhF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEpG,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,SAGhB,OAAO,MAGTgnG,EAAA10G,UAAAk9G,yBAAA,SACEhI,GAKA,IAAIhlF,EAAOnyB,KAAKu6G,gBAAgBpD,GAChC,IAAKhlF,EAAM,OAAO,KAElB,IAAIuxB,EAAM95C,EAAAgG,KAAKgpB,0BAA0BzG,GAEzC,OADAglF,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAA08G,kBAAA,SACExH,GAKA,IAAIE,EAAWF,EAAG/8C,SAElB,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAAY,CAC5B,IAAIr2C,EAAgC,KAEpC,GAAI0yF,EAAGh6C,KAAKxtC,EAAAC,MAAMpT,OAChBiI,EAAczkB,KAAKk4G,cAAcf,EAAI1tG,EAAApH,YAAYma,MAAO,KAAM26F,EAAG/8C,eAC5D,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAM+mC,KACvBlyC,EAAczkB,KAAKk4G,cAAcf,EAAI1tG,EAAApH,YAAYs0D,IAAK,KAAMwgD,EAAG/8C,eAC1D,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMwnC,KACvB3yC,EAAczkB,KAAKk4G,cAAcf,EAAI1tG,EAAApH,YAAYqN,KAAM,KAAMynG,EAAG/8C,eAE3D,IAAK+8C,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,cACxBl3C,EAAczkB,KAAKm/G,yBAAyBhI,IAC1B,OAAO,KAG3B,GAAIA,EAAG3/C,OAAS7nC,EAAAC,MAAM+rC,UAAW,CAC/B,IAAI/lC,EAAwC,KAC5C,IAAKuhF,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,cACjB/lC,EAAY51B,KAAKm/G,yBAAyBhI,IAC1B,OAAO,KAGzB,GAAIA,EAAG3/C,OAAS7nC,EAAAC,MAAM+rC,UAAW,CAC/B,IAAI9hC,EAAiC,KACrC,IAAKs9E,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAAa,CAE9B,KADAlhC,EAAc75B,KAAKu6G,gBAAgBpD,IACjB,OAAO,KAEzB,IAAKA,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAKjB,OAJA/6D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAIX,IAAIwD,EAAYnT,KAAKo4G,eAAejB,GACpC,OAAKhkG,EAEEvJ,EAAAgG,KAAKgqB,mBACVnV,EACAmR,EACIA,EAAUhD,WACV,KACJiH,EACA1mB,EACAgkG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MATD,KAavBp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGhB,OAAO,MAGTgnG,EAAA10G,UAAA28G,iBAAA,SACEzH,GAKA,IAAIE,EAAWF,EAAG/8C,SAClB,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAAY,CAC5B,IAAIllC,EAAY51B,KAAKu6G,gBAAgBpD,GACrC,IAAKvhF,EAAW,OAAO,KACvB,GAAIuhF,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAAa,CAC7B,IAAI5nD,EAAYnT,KAAKo4G,eAAejB,GACpC,IAAKhkG,EAAW,OAAO,KACvB,IAAIisG,EAAkC,KACtC,OAAIjI,EAAGh6C,KAAKxtC,EAAAC,MAAMumC,SAChBipD,EAAgBp/G,KAAKo4G,eAAejB,IACT,KAEtBvtG,EAAAgG,KAAKkpB,kBACVlD,EACAziB,EACAisG,EACAjI,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGxBp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGhB,OAAO,MAGTgnG,EAAA10G,UAAA68G,qBAAA,SACE3H,GAKA,IAAIE,EAAWF,EAAG/8C,SAClB,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAAY,CAC5B,IAAIllC,EAAY51B,KAAKu6G,gBAAgBpD,GACrC,IAAKvhF,EAAW,OAAO,KACvB,GAAIuhF,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAAa,CAC7B,GAAIo8C,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAAY,CAE5B,IADA,IAAIthC,EAAQ,IAAIzzB,OACRkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,IAAIojD,EAAQr/G,KAAKs/G,gBAAgBnI,GACjC,IAAKkI,EAAO,OAAO,KACnB3kF,EAAMnc,KAAiB8gG,GAEzB,IAAI37D,EAAM95C,EAAAgG,KAAK6qB,sBAAsB7E,EAAW8E,EAAOy8E,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAE7E,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGhB,OAAO,MAGTgnG,EAAA10G,UAAAq9G,gBAAA,SACEnI,GAGA,IACIlkG,EACAE,EAFAkkG,EAAWF,EAAG/8C,SAMlB,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMkmC,MAAO,CACvB,IAAI9+B,EAAQh3B,KAAKu6G,gBAAgBpD,GACjC,IAAKngF,EAAO,OAAO,KACnB,GAAImgF,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAAQ,CAExB,IADAzoD,EAAa,IAAIhM,MACVkwG,EAAGt6C,QAAUltC,EAAAC,MAAMkmC,MAAQqhD,EAAG98C,WAAa1qC,EAAAC,MAAMqmC,SAAWkhD,EAAG98C,WAAa1qC,EAAAC,MAAMqsC,YAAY,CAEnG,KADA9oD,EAAYnT,KAAKo4G,eAAejB,IAChB,OAAO,KACvBlkG,EAAWsL,KAAKpL,GAElB,OAAOvJ,EAAAgG,KAAKgrB,iBAAiB5D,EAAO/jB,EAAYkkG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEtEp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAMX,GAAIwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMqmC,SAAU,CACjC,GAAIkhD,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAAQ,CAExB,IADAzoD,EAAa,IAAIhM,MACVkwG,EAAGt6C,QAAUltC,EAAAC,MAAMkmC,MAAQqhD,EAAG98C,WAAa1qC,EAAAC,MAAMqmC,SAAWkhD,EAAG98C,WAAa1qC,EAAAC,MAAMqsC,YAAY,CAEnG,KADA9oD,EAAYnT,KAAKo4G,eAAejB,IAChB,OAAO,KACvBlkG,EAAWsL,KAAKpL,GAElB,OAAOvJ,EAAAgG,KAAKgrB,iBAAiB,KAAM3nB,EAAYkkG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAErEp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeiqG,0BACfpI,EAAGxnG,SAGP,OAAO,MAGTgnG,EAAA10G,UAAA88G,oBAAA,SACE5H,GAKA,IAAIE,EAAWF,EAAG/8C,SACdxnC,EAAa5yB,KAAKu6G,gBAAgBpD,GACtC,IAAKvkF,EAAY,OAAO,KACxB,IAAI8wB,EAAM95C,EAAAgG,KAAKkrB,qBAAiClI,EAAYukF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAElF,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAA+8G,kBAAA,SACE7H,GAQA,IACIvlF,EADAylF,EAAWF,EAAG/8C,SAElB,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAAY,CAE5B,IADA,IAAI/oD,EAAa,IAAIhM,OACbkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CAEjC,KADArqC,EAAO5xB,KAAKo4G,eAAejB,IAChB,OAAO,KAClBlkG,EAAWsL,KAAgBqT,GAE7B,IAAIqJ,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAIg8E,EAAGh6C,KAAKxtC,EAAAC,MAAMmmC,OAAQ,CACxB,IAAKohD,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAKjB,OAJA96D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAET,IAAKwnG,EAAGj6C,iBAKN,OAJAl9D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,KAGT,GADAsrB,EAAgBrxB,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,UACnEwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAKjB,OAJA/6D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAET,IAAKwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAKjB,OAJAh8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAGT,IADAurB,EAAkB,IACVi8E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CAEjC,KADArqC,EAAO5xB,KAAKo4G,eAAejB,IAChB,OAAO,KAClBj8E,EAAgB3c,KAAgBqT,IAGpC,GAAIulF,EAAGh6C,KAAKxtC,EAAAC,MAAMymC,SAAU,CAC1B,IAAK8gD,EAAGh6C,KAAKxtC,EAAAC,MAAMosC,WAKjB,OAJAh8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAGT,IADAwrB,EAAoB,IACZg8E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CAEjC,KADArqC,EAAO5xB,KAAKo4G,eAAejB,IAChB,OAAO,KAClBh8E,EAAkB5c,KAAgBqT,IAGtC,IAAMsJ,IAAmBC,EAKvB,OAJAn7B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,SAEP,KAET,IAAI+zC,EAAM95C,EAAAgG,KAAKorB,mBACb/nB,EACAgoB,EACAC,EACAC,EACAg8E,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGxB,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAOT,OALE1jD,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGT,MAGTgnG,EAAA10G,UAAAw2G,qBAAA,SACEtB,EACA1nG,EACA6N,EACA+5F,GAKA,GAAIF,EAAGj6C,iBAAkB,CACvB,IAAIt8D,EAAOgJ,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,SAC/DwU,EAA6C,KACjD,GAAIgzF,EAAGh6C,KAAKxtC,EAAAC,MAAMgoC,UAAW,CAE3B,KADAzzC,EAAiBnkB,KAAK26G,oBAAoBxD,IACrB,OAAO,KAC5B1nG,GAAShG,EAAApH,YAAYwP,QAEvB,GAAIslG,EAAGh6C,KAAKxtC,EAAAC,MAAMwpC,QAAS,CACzB,IAAIp9C,EAAOhc,KAAKi5G,UAAU9B,GAC1B,IAAKn7F,EAAM,OAAO,KAClB,IAAI0nC,EAAM95C,EAAAgG,KAAKK,sBACbrP,EACAujB,EACAnI,EACAsB,EACA7N,EACA0nG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGxB,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAGP,OAAO,MAGTgnG,EAAA10G,UAAAg9G,mBAAA,SACE9H,GAKA,IAAIE,EAAWF,EAAG/8C,SACdxnC,EAAa5yB,KAAKu6G,gBAAgBpD,EAAE,IACxC,IAAKvkF,EAAY,OAAO,KACxB,IAAI8wB,EAAM95C,EAAAgG,KAAK6rB,oBAAoB7I,EAAYukF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAErE,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,GAGTizD,EAAA10G,UAAAi9G,oBAAA,SACE/H,GAKA,IAAIE,EAAWF,EAAG/8C,SAClB,GAAI+8C,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WAAY,CAC5B,IAAIloC,EAAa5yB,KAAKu6G,gBAAgBpD,GACtC,IAAKvkF,EAAY,OAAO,KACxB,GAAIukF,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAAa,CAC7B,IAAI5nD,EAAYnT,KAAKo4G,eAAejB,GACpC,IAAKhkG,EAAW,OAAO,KACvB,IAAIuwC,EAAM95C,EAAAgG,KAAK+rB,qBAAqB/I,EAAYzf,EAAWgkG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEjF,OADA+4E,EAAGh6C,KAAKxtC,EAAAC,MAAM+rC,WACPjY,EAEP1jD,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,UAIhB3P,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAGhB,OAAO,MAMTgnG,EAAA10G,UAAAu9G,qBAAA,SACErI,GAGA,IAAI3/C,EAAQ2/C,EAAGviG,KAAK+a,EAAA8lC,mBAAmBgH,QACnC46C,EAAWF,EAAG/8C,SACdqlD,EA8sBR,SAAkCrsG,GAChC,OAAQA,GACN,KAAKuc,EAAAC,MAAM+nC,YAAa,SACxB,KAAKhoC,EAAAC,MAAM0nC,MAAO,SAClB,KAAK3nC,EAAAC,MAAMopC,YACX,KAAKrpC,EAAAC,MAAMqpC,MACX,KAAKtpC,EAAAC,MAAMljB,KACX,KAAKijB,EAAAC,MAAMhjB,MACX,KAAK+iB,EAAAC,MAAM4oC,UACX,KAAK7oC,EAAAC,MAAM6oC,YACX,KAAK9oC,EAAAC,MAAMunC,OACX,KAAKxnC,EAAAC,MAAMiQ,KACX,KAAKlQ,EAAAC,MAAMsmC,OAAQ,UACnB,KAAKvmC,EAAAC,MAAM2N,IAAK,UAElB,SA7tBmBmiF,CAAyBloD,GAC1C,GAAc,GAAVioD,EAA+B,CACjC,IAAIhpF,OAAO,EAKX,OAAI+gC,GAAS7nC,EAAAC,MAAM2N,KACjB9G,EAAUz2B,KAAKu6G,gBAAgBpD,EAAE,KAE7B1gF,EAAQrjB,MAAQxJ,EAAAyJ,SAAS+c,KACpBxmB,EAAAgG,KAAKglB,oBACO6B,EAAS7D,WACT6D,EAASjN,cACTiN,EAASvW,UAC1Bi3F,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAGxBp+B,KAAKqV,MACH3L,EAAA4L,eAAegJ,wBACf64F,EAAGxnG,SAGA,MAdc,MAgBrB8mB,EAAUz2B,KAAKu6G,gBAAgBpD,EAAIsI,KAKjCjoD,GAAS7nC,EAAAC,MAAM4oC,WAAahB,GAAS7nC,EAAAC,MAAM6oC,aAE3ChiC,EAAQrjB,MAAQxJ,EAAAyJ,SAAS6c,YACzBuG,EAAQrjB,MAAQxJ,EAAAyJ,SAASgd,eACzBoG,EAAQrjB,MAAQxJ,EAAAyJ,SAASkd,gBAEzBvwB,KAAKqV,MACH3L,EAAA4L,eAAeqqG,0FACflpF,EAAQ9mB,OAIP/F,EAAAgG,KAAK+mB,4BAA4B6gC,EAAO/gC,EAAS0gF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAhBvD,KAmBzB,IAAIjM,EAA0B,KAC9B,OAAQqlC,GAEN,KAAK7nC,EAAAC,MAAME,KAAM,OAAOlmB,EAAAgG,KAAKklB,qBAAqBqiF,EAAGxnG,SACrD,KAAKggB,EAAAC,MAAMG,KAAM,OAAOnmB,EAAAgG,KAAK0mB,qBAAqB6gF,EAAGxnG,SACrD,KAAKggB,EAAAC,MAAMI,MAAO,OAAOpmB,EAAAgG,KAAKqkB,sBAAsBkjF,EAAGxnG,SAIvD,KAAKggB,EAAAC,MAAMkrC,UAGT,GAAIq8C,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAChB,OAAO/6D,KAAKs8G,8BACVnF,EACAvtG,EAAAgG,KAAK0iB,gCAAgC6kF,EAAGxnG,MAAM0nG,IAC9C,GAAE,GAIN,IAAIh6C,EAAQ85C,EAAG/5C,OACXwiD,GAAQ,EACZ,GACE,OAAQzI,EAAGviG,KAAK+a,EAAA8lC,mBAAmBgH,SAGjC,KAAK9sC,EAAAC,MAAM+nC,YAET,OADAw/C,EAAG15C,MAAMJ,GACFr9D,KAAKq8G,wBAAwBlF,GAGtC,KAAKxnF,EAAAC,MAAMM,WAET,OADAinF,EAAGz5C,iBACKy5C,EAAGviG,QAGT,KAAK+a,EAAAC,MAAMmrC,WACT,IACGo8C,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,SACdy7C,EAAGh6C,KAAKxtC,EAAAC,MAAMgsC,oBACf,CACAgkD,GAAQ,EACR,MAKJ,KAAKjwF,EAAAC,MAAM8rC,MAET,OADAy7C,EAAG15C,MAAMJ,GACFr9D,KAAKq8G,wBAAwBlF,GAGtC,KAAKxnF,EAAAC,MAAMisC,SACT,GACEs7C,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,QACdy7C,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QACdg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAGd,OADAo8C,EAAG15C,MAAMJ,GACFr9D,KAAKq8G,wBAAwBlF,GAEtCyI,GAAQ,EACR,MAEF,KAAKjwF,EAAAC,MAAMuN,MACT,MAIF,QACEyiF,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAzI,EAAG15C,MAAMJ,IAGTlrC,EAAOnyB,KAAKu6G,gBAAgBpD,IAEvBA,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAOZnxD,EAAAgG,KAAKulB,8BAA8BhD,EAAMglF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OANpEp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MANS,KAWpB,KAAKggB,EAAAC,MAAMksC,YAET,IADA,IAAIrpC,EAAqB,IAAIxrB,OACrBkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMmsC,eAAe,CACnC,GAAIo7C,EAAGt6C,QAAUltC,EAAAC,MAAMuN,MACrBhL,EAAO,UAGP,KADAA,EAAOnyB,KAAKu6G,gBAAgBpD,EAAI,IACrB,OAAO,KAGpB,GADA1kF,EAAmBlU,KAAK4T,IACnBglF,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMmsC,cAChB,MAMA,OAJA/7D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAIb,OAAO/F,EAAAgG,KAAK2iB,6BAA6BE,EAAoB0kF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAGrF,KAAKzO,EAAAC,MAAMosC,UAKT,IAJA,IAAI6jD,EAAW1I,EAAG/8C,SACdnlC,EAAQ,IAAIhuB,MACZqT,EAAS,IAAIrT,MACbrG,OAAI,GACAu2G,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,aAAa,CACjC,GAAKk7C,EAAGj6C,iBAWNt8D,EAAOgJ,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,aAXvC,CACxB,IAAKwnG,EAAGh6C,KAAKxtC,EAAAC,MAAMgrC,eAKjB,OAJA56D,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfrC,EAAGxnG,SAEE,MAET/O,EAAOgJ,EAAAgG,KAAKE,2BAA2BqnG,EAAGrzD,aAAcqzD,EAAGxnG,UACtDuiB,UAAW,EAKlB,GADA+C,EAAM1W,KAAK3d,GACPu2G,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAAQ,CACxB,IAAIp6D,EAAQtB,KAAKu6G,gBAAgBpD,EAAI,GACrC,IAAK71G,EAAO,OAAO,KACnBgZ,EAAOiE,KAAKjd,OACP,IAAKV,EAAKsxB,SAOf,OAJAlyB,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KANP2K,EAAOiE,KAAK3d,GAQd,IAAKu2G,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMqsC,YAChB,MAMA,OAJAj8D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAIb,OAAO/F,EAAAgG,KAAKolB,8BAA8BC,EAAO3a,EAAQ68F,EAAGxnG,MAAMkwG,EAAU1I,EAAG/4E,MAGjF,KAAKzO,EAAAC,MAAMgoC,SACT,IAAI/kC,EAAS7yB,KAAKi5G,UAAU9B,GAC5B,OAAKtkF,EACAskF,EAAGh6C,KAAKxtC,EAAAC,MAAMioC,cAOnB1lC,EAAOnyB,KAAKu6G,gBAAgBpD,EAAE,KAEvBvtG,EAAAgG,KAAK8iB,0BACV9oB,EAAAozB,cAAcmiD,OACdhtD,EACAU,EACAskF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MALN,MAPhBp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MANW,KAiBtB,KAAKggB,EAAAC,MAAMM,WACT,IAAI4vF,EAAiB3I,EAAGz5C,iBACxB,GAAsB,QAAlBoiD,EAA0B,OAAOl2G,EAAAgG,KAAKklB,qBAAqBqiF,EAAGxnG,SAClE,IAAIK,EAAapG,EAAAgG,KAAKE,2BAA2BgwG,EAAgB3I,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MACvF,OAAI+4E,EAAGt6C,MAAK,IAASltC,EAAAC,MAAMgsC,oBAAuBu7C,EAAG58C,mBAiB9CvqD,EAhBEhQ,KAAKs8G,8BACVnF,EACAvtG,EAAAgG,KAAK0iB,gCAAgC6kF,EAAGxnG,MAAM0nG,IAC9C,CACEztG,EAAAgG,KAAK2hB,gBACHvhB,EACApG,EAAAgG,KAAKM,kBAAkBF,EAAWL,MAAMu3D,OACxC,KACAt9D,EAAAsyB,cAAc+5B,QACdjmD,EAAWL,QAEd,EAED0nG,GAKN,KAAK1nF,EAAAC,MAAM+N,KACT,OAAO/zB,EAAAgG,KAAKwmB,qBAAqB+gF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEzD,KAAKzO,EAAAC,MAAM9P,YACT,OAAOlW,EAAAgG,KAAKgkB,4BAA4BujF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEhE,KAAKzO,EAAAC,MAAMY,MAOT,OANI2mF,EAAGt6C,QAAUltC,EAAAC,MAAMsrC,KAAOi8C,EAAG98C,WAAa1qC,EAAAC,MAAMkrC,WAClD96D,KAAKqV,MACH3L,EAAA4L,eAAeyqG,6DACf5I,EAAGxnG,SAGA/F,EAAAgG,KAAKsmB,sBAAsBihF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAE1D,KAAKzO,EAAAC,MAAMgrC,cACT,OAAOhxD,EAAAgG,KAAKomB,8BAA8BmhF,EAAGrzD,aAAcqzD,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAEnF,KAAKzO,EAAAC,MAAM6rC,eACT,OAAO7xD,EAAAgG,KAAK8kB,+BAA+ByiF,EAAG54C,cAAe44C,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAErF,KAAKzO,EAAAC,MAAMqrC,aACT,OAAOrxD,EAAAgG,KAAKukB,6BAA6BgjF,EAAGv3C,YAAau3C,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAIjF,KAAKzO,EAAAC,MAAM0oC,MACT,IAAI0nD,EAAgB7I,EAAGj5C,oBACvB,OAAKi5C,EAAGh6C,KAAKxtC,EAAAC,MAAM0oC,OAOZ1uD,EAAAgG,KAAK2lB,8BACVyqF,EACA7I,EAAG94C,kBACH84C,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OATtBp+B,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAQX,KAAKggB,EAAAC,MAAMlU,SACT,OAAO1b,KAAKq8G,wBAAwBlF,GAEtC,KAAKxnF,EAAAC,MAAMhU,MACT,OAAO5b,KAAK08G,qBAAqBvF,GAEnC,QAYE,OAXI3/C,GAAS7nC,EAAAC,MAAMgtC,UACjB58D,KAAKqV,MACH3L,EAAA4L,eAAewoD,uBACfq5C,EAAGxnG,MAAM0nG,IAGXr3G,KAAKqV,MACH3L,EAAA4L,eAAe2qG,oBACf9I,EAAGxnG,SAGA,OAKbgnG,EAAA10G,UAAAi+G,qCAAA,SACE/I,GAKA,IAAI95C,EAAQ85C,EAAG/5C,OACf,IAAK+5C,EAAGh6C,KAAKxtC,EAAAC,MAAMgoC,UAAW,OAAO,KACrC,IAAIpuC,EAAmC,KACvC,EAAG,CACD,GAAI2tF,EAAGt6C,SAAWltC,EAAAC,MAAMioC,YACtB,MAEF,IAAI77C,EAAOhc,KAAKi5G,UAAU9B,GAAI,GAAM,GACpC,IAAKn7F,EAEH,OADAm7F,EAAG15C,MAAMJ,GACF,KAEJ7zC,EACAA,EAAcjL,KAAKvC,GADJwN,EAAgB,CAAExN,SAE/Bm7F,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QACvB,OAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMioC,cAAgBs/C,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,WACvCtxC,GAET2tF,EAAG15C,MAAMJ,GACF,OAGTs5C,EAAA10G,UAAAg4G,eAAA,SACE9C,GAMA,IADA,IAAIxlF,EAAO,IAAI1qB,OACPkwG,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,aAAa,CACjC,IAAI5oC,EAAOnyB,KAAKu6G,gBAAgBpD,EAAI,GACpC,IAAKhlF,EAAM,OAAO,KAElB,GADAR,EAAKpT,KAAK4T,IACLglF,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,OAAQ,CACzB,GAAIg6E,EAAGh6C,KAAKxtC,EAAAC,MAAMmrC,YAChB,MAMA,OAJA/6D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,MAIb,OAAOgiB,GAGTglF,EAAA10G,UAAAs4G,gBAAA,SACEpD,EACAsI,QAAA,IAAAA,MAAA,GAEA50G,OAAiB,GAAV40G,GAEP,IAAIttF,EAAOnyB,KAAKw/G,qBAAqBrI,GACrC,IAAKhlF,EAAM,OAAO,KAOlB,IAJA,IACIqlC,EAEA2oD,EAHA9I,GAFJllF,EAAOnyB,KAAKogH,yBAAyBjJ,EAAIhlF,IAErBxiB,MAAMqf,MAEtBpa,EAA0B,MAG3BurG,EAAiBE,EAAoB7oD,EAAQ2/C,EAAGt6C,UAAY4iD,GAC7D,CAEA,OADAtI,EAAGviG,OACK4iD,GAEN,KAAK7nC,EAAAC,MAAM+lC,GACT,IAAI9iC,EAAS7yB,KAAKi5G,UAAU9B,GAC5B,IAAKtkF,EAAQ,OAAO,KACpBV,EAAOvoB,EAAAgG,KAAK8iB,0BACV9oB,EAAAozB,cAAc24B,GACdxjC,EACAU,EACAskF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAEF,KAAKzO,EAAAC,MAAMopC,YACT7mC,EAAOvoB,EAAAgG,KAAK8iB,0BACV9oB,EAAAozB,cAAc4nC,QACdzyC,EACA,KACAglF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAGF,KAAKzO,EAAAC,MAAMyN,WACT,IAAI7I,EAASx0B,KAAKi5G,UAAU9B,GAC5B,IAAK3iF,EAAQ,OAAO,KACpBrC,EAAOvoB,EAAAgG,KAAK2kB,2BACVpC,EACAqC,EACA2iF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAGF,KAAKzO,EAAAC,MAAMksC,YAET,KADAlnD,EAAO5U,KAAKu6G,gBAAgBpD,IACjB,OAAO,KAClB,IAAKA,EAAGh6C,KAAKxtC,EAAAC,MAAMmsC,cAKjB,OAJA/7D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAETwiB,EAAOvoB,EAAAgG,KAAKkkB,8BACV3B,EACAvd,EACAuiG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAGF,KAAKzO,EAAAC,MAAM4oC,UACX,KAAK7oC,EAAAC,MAAM6oC,YAEPtmC,EAAK/e,MAAQxJ,EAAAyJ,SAAS6c,YACtBiC,EAAK/e,MAAQxJ,EAAAyJ,SAASgd,eACtB8B,EAAK/e,MAAQxJ,EAAAyJ,SAASkd,gBAEtBvwB,KAAKqV,MACH3L,EAAA4L,eAAeqqG,0FACfxtF,EAAKxiB,OAGTwiB,EAAOvoB,EAAAgG,KAAK4mB,6BACVghC,EACArlC,EACAglF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAGF,KAAKzO,EAAAC,MAAMisC,SACT,IAAIhmC,EAAS71B,KAAKu6G,gBAAgBpD,GAClC,IAAKthF,EAAQ,OAAO,KACpB,IAAKshF,EAAGh6C,KAAKxtC,EAAAC,MAAM8rC,OAKjB,OAJA17D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEP,KAET,IAAImmB,EAAS91B,KAAKu6G,gBAAgBpD,EAAIsI,EAAU,EAC5C,EACD,GAEH,IAAK3pF,EAAQ,OAAO,KACpB3D,EAAOvoB,EAAAgG,KAAK+lB,wBACVxD,EACA0D,EACAC,EACAqhF,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAGF,KAAKzO,EAAAC,MAAMuN,MACT,IAAImjF,EAA2B,CAAEnuF,GACjC,EAAG,CAED,KADAA,EAAOnyB,KAAKu6G,gBAAgBpD,EAAI,IACrB,OAAO,KAClBmJ,EAAW/hG,KAAK4T,SACTglF,EAAGh6C,KAAKxtC,EAAAC,MAAMuN,QACvBhL,EAAOvoB,EAAAgG,KAAK6jB,sBAAsB6sF,EAAYnJ,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MACpE,MAEF,QAGE,GAAIo5B,GAAS7nC,EAAAC,MAAMsrC,IAAK,CACtB,GAAIi8C,EAAGj6C,iBACLtoD,EAAOhL,EAAAgG,KAAKE,2BAA2BqnG,EAAGz5C,iBAAkBy5C,EAAGxnG,cAO/D,KALAiF,EAAO5U,KAAKu6G,gBAAgBpD,EAC1BoJ,EAAmB/oD,GACf2oD,EACAA,EAAiB,IAEZ,OAAO,KAEpB,GAAIvrG,EAAKxB,MAAQxJ,EAAAyJ,SAAS6c,WACxBiC,EAAOvoB,EAAAgG,KAAKylB,+BACVlD,EACsBvd,EACtBuiG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,UAEnB,IAAIxpB,EAAKxB,MAAQxJ,EAAAyJ,SAAS+c,KAQ/B,OAJApwB,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACf5kG,EAAKjF,OAEA,KANP,KADAwiB,EAAOnyB,KAAKwgH,iBAAiBrJ,EAAIE,EAAUllF,EAAsBvd,IACtD,OAAO,UAUf,CAML,KALAA,EAAO5U,KAAKu6G,gBAAgBpD,EAC1BoJ,EAAmB/oD,GACf2oD,EACAA,EAAiB,IAEZ,OAAO,KAClBhuF,EAAOvoB,EAAAgG,KAAKmjB,uBAAuBykC,EAAOrlC,EAAMvd,EAAMuiG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,OAKlFjM,EAAOnyB,KAAKogH,yBAAyBjJ,EAAIhlF,GAE3C,OAAOA,GAGDwkF,EAAA10G,UAAAu+G,iBAAR,SACErJ,EACAE,EACAllF,EACA3xB,GAEA,IAAIigH,EAASjgH,EAAKoyB,WAClB,OAAQ6tF,EAAOrtG,MACb,KAAKxJ,EAAAyJ,SAAS6c,WACZ1vB,EAAKoyB,WAAahpB,EAAAgG,KAAKylB,+BACrBlD,EACsBsuF,EACtBtJ,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,MAExB,MAEF,KAAKx0B,EAAAyJ,SAAS+c,KACZ,IAAIswF,EAAQ1gH,KAAKwgH,iBAAiBrJ,EAAIE,EAAUllF,EAAsBsuF,GACtE,IAAKC,EAAO,OAAO,KACnBlgH,EAAKoyB,WAAa8tF,EAClBlgH,EAAKmP,MAAQwnG,EAAGxnG,MAAM0nG,EAAUF,EAAG/4E,KACnC,MAEF,QAKE,OAJAp+B,KAAKqV,MACH3L,EAAA4L,eAAekkG,oBACfh5G,EAAKmP,OAEA,KAGX,OAAOnP,GAGDm2G,EAAA10G,UAAAm+G,yBAAR,SACEjJ,EACAhlF,GAEA,GAAIvoB,EAAAqmB,eAAekC,EAAK/e,MAEtB,IADA,IAAIoW,EAAmC,KAErC2tF,EAAGh6C,KAAKxtC,EAAAC,MAAMkrC,YAEdlxD,EAAA6mB,sBAAsB0B,EAAK/e,OAA6E,QAAnEoW,EAAgBxpB,KAAKkgH,qCAAqC/I,KAC/F,CACA,IAAIxlF,EAAO3xB,KAAKi6G,eAAe9C,GAC/B,IAAKxlF,EAAM,MACXQ,EAAOvoB,EAAAgG,KAAKwjB,qBACVjB,EACA3I,EACAmI,EACAwlF,EAAGxnG,MAAMwiB,EAAKxiB,MAAMqf,MAAOmoF,EAAG/4E,MAIpC,OAAOjM,GAITwkF,EAAA10G,UAAAs1G,cAAA,SAAcJ,GAGZ,IAFAA,EAAGt6C,MAAK,GACJs6C,EAAG58C,oBAAoB48C,EAAGviG,SAC3B,CACD,IAAIylD,EAAY88C,EAAGt6C,MAAK,GACxB,GACExC,GAAa1qC,EAAAC,MAAMgtC,WACnBvC,GAAa1qC,EAAAC,MAAM+rC,UACnB,CACAw7C,EAAGviG,OACH,MAEF,GAAIuiG,EAAG58C,mBAAoB,MAC3B,OAAQ48C,EAAGviG,QACT,KAAK+a,EAAAC,MAAMM,WACTinF,EAAGz5C,iBACH,MAEF,KAAK/tC,EAAAC,MAAMgrC,cACTu8C,EAAGrzD,aACH,MAEF,KAAKn0B,EAAAC,MAAM6rC,eACT07C,EAAG54C,cACH,MAEF,KAAK5uC,EAAAC,MAAMqrC,aACTk8C,EAAGv3C,YACH,MAEF,KAAKjwC,EAAAC,MAAMosC,UACTh8D,KAAK2gH,UAAUxJ,MAQvBR,EAAA10G,UAAA0+G,UAAA,SAAUxJ,GAER,IAAIyJ,EAAQ,EACRhB,GAAQ,EACZ,GACE,OAAQzI,EAAGviG,QACT,KAAK+a,EAAAC,MAAMgtC,UACT58D,KAAKqV,MACH3L,EAAA4L,eAAeimD,YACf47C,EAAGxnG,QAAS,KAEdiwG,GAAQ,EACR,MAEF,KAAKjwF,EAAAC,MAAMosC,YACP4kD,EACF,MAEF,KAAKjxF,EAAAC,MAAMqsC,aACP2kD,IACUhB,GAAQ,GACpB,MAEF,KAAKjwF,EAAAC,MAAMM,WACTinF,EAAGz5C,iBACH,MAEF,KAAK/tC,EAAAC,MAAMgrC,cACTu8C,EAAGrzD,aACH,MAEF,KAAKn0B,EAAAC,MAAM6rC,eACT07C,EAAG54C,cACH,MAEF,KAAK5uC,EAAAC,MAAMqrC,aACTk8C,EAAGv3C,mBAIAggD,IAEbjJ,EA3tHA,CAA4BjtG,EAAAgZ,mBA2wH5B,SAAS29F,EAAoBjtG,GAC3B,OAAQA,GACN,KAAKuc,EAAAC,MAAMuN,MAAO,SAClB,KAAKxN,EAAAC,MAAMwpC,OACX,KAAKzpC,EAAAC,MAAMypC,YACX,KAAK1pC,EAAAC,MAAM0pC,aACX,KAAK3pC,EAAAC,MAAM4pC,yBACX,KAAK7pC,EAAAC,MAAM2pC,gBACX,KAAK5pC,EAAAC,MAAM6pC,aACX,KAAK9pC,EAAAC,MAAM8pC,eACX,KAAK/pC,EAAAC,MAAM+pC,yBACX,KAAKhqC,EAAAC,MAAMgqC,+BACX,KAAKjqC,EAAAC,MAAMiqC,2CACX,KAAKlqC,EAAAC,MAAMkqC,iBACX,KAAKnqC,EAAAC,MAAMoqC,aACX,KAAKrqC,EAAAC,MAAMmqC,WAAY,SACvB,KAAKpqC,EAAAC,MAAMisC,SAAU,SACrB,KAAKlsC,EAAAC,MAAMupC,QAAS,SACpB,KAAKxpC,EAAAC,MAAMspC,oBAAqB,SAChC,KAAKvpC,EAAAC,MAAMkpC,IAAK,SAChB,KAAKnpC,EAAAC,MAAMmpC,MAAO,SAClB,KAAKppC,EAAAC,MAAMipC,UAAW,UACtB,KAAKlpC,EAAAC,MAAMooC,cACX,KAAKroC,EAAAC,MAAMqoC,mBACX,KAAKtoC,EAAAC,MAAMsoC,qBACX,KAAKvoC,EAAAC,MAAMuoC,0BAA2B,UACtC,KAAKxoC,EAAAC,MAAM+lC,GACX,KAAKhmC,EAAAC,MAAM4mC,GACX,KAAK7mC,EAAAC,MAAMyN,WACX,KAAK1N,EAAAC,MAAMgoC,SACX,KAAKjoC,EAAAC,MAAMioC,YACX,KAAKloC,EAAAC,MAAMkoC,gBACX,KAAKnoC,EAAAC,MAAMmoC,mBAAoB,UAC/B,KAAKpoC,EAAAC,MAAM8oC,kBACX,KAAK/oC,EAAAC,MAAM+oC,wBACX,KAAKhpC,EAAAC,MAAMgpC,oCAAqC,UAChD,KAAKjpC,EAAAC,MAAMljB,KACX,KAAKijB,EAAAC,MAAMhjB,MAAO,UAClB,KAAK+iB,EAAAC,MAAMyoC,SACX,KAAK1oC,EAAAC,MAAM0oC,MACX,KAAK3oC,EAAAC,MAAM2oC,QAAS,UACpB,KAAK5oC,EAAAC,MAAMwoC,kBAAmB,UAC9B,KAAKzoC,EAAAC,MAAM4oC,UACX,KAAK7oC,EAAAC,MAAM6oC,YAAa,UACxB,KAAK9oC,EAAAC,MAAMsrC,IACX,KAAKvrC,EAAAC,MAAM2N,IACX,KAAK5N,EAAAC,MAAMksC,YACX,KAAKnsC,EAAAC,MAAMopC,YAAa,UAE1B,SAIF,SAASunD,EAAmBntG,GAC1B,OAAQA,GACN,KAAKuc,EAAAC,MAAMwpC,OACX,KAAKzpC,EAAAC,MAAMypC,YACX,KAAK1pC,EAAAC,MAAM0pC,aACX,KAAK3pC,EAAAC,MAAM4pC,yBACX,KAAK7pC,EAAAC,MAAM2pC,gBACX,KAAK5pC,EAAAC,MAAM6pC,aACX,KAAK9pC,EAAAC,MAAM8pC,eACX,KAAK/pC,EAAAC,MAAM+pC,yBACX,KAAKhqC,EAAAC,MAAMgqC,+BACX,KAAKjqC,EAAAC,MAAMiqC,2CACX,KAAKlqC,EAAAC,MAAMkqC,iBACX,KAAKnqC,EAAAC,MAAMoqC,aACX,KAAKrqC,EAAAC,MAAMmqC,WACX,KAAKpqC,EAAAC,MAAMisC,SACX,KAAKlsC,EAAAC,MAAMwoC,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAj1HP14D,EAAAi3G,SA8tHb,SAAkBkK,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkBnhH,EAAAmhH,aAAAnhH,EAAAmhH,WAAU,2HClzH5B1gH,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAA+xD,EAAA/xD,EAAA,GAEA+xD,EAAAnd,OAAO9yC,UAAU8hD,OAAS,WAKxB,OAAO+8D,SAASC,WAAW/gH,KAAKmmB,KAAK66F,aAAoC,IAG3E9uD,EAAAnd,OAAO9yC,UAAU+hD,QAAU,WACzB,OAAO88D,SAASC,WAAW/gH,KAAKmmB,KAAK86F,+BCxBvC,SAAA3kG,GAEA,MAAAwkG,EAAAxkG,EAAA4kG,UAAoC/gH,EAAQ,IAG5C,QAAAyB,KAFA0a,EAAAwkG,WAEAA,GACAl/G,EAAAs2B,WAAA,cAAAt2B,EAAAs2B,WAAA,gBAAA5b,EAAA1a,GAAAk/G,EAAAl/G,IAKA0a,EAAA6kG,kBAAAL,EAAAM,QACA9kG,EAAA+kG,cAAAP,EAAAQ,MACAhlG,EAAAilG,cAAAT,EAAAU,SACAllG,EAAAmlG,QAAA,SAAArpE,EAAAkV,GAAqCwzD,EAAAY,OAAAtpE,GAAAkV,GACrChxC,EAAAqlG,OAAA,SAAAvpE,GAA+B,OAAA0oE,EAAAY,OAAAtpE,qCCf/Bz4C,EAAAD,QAAAO,oBCAA,SAAAqc,GAEA,IAAAslG,EAAA,oBAAAphD,qBAAA,IAAAlkD,MAAAvc,KAEA6hH,EAAAr8G,WAAA,EACAq8G,EAAAn8G,eAAA,EACAm8G,EAAAl8G,gBAAA,EACAk8G,EAAAj8G,mBAAA,EACAi8G,EAAAh8G,iBAAA,EACAg8G,EAAA/7G,4BAAA,EACA+7G,EAAA97G,4BAAA,EACA87G,EAAA77G,yBAAA,EACA67G,EAAA57G,kBAAA,EACA47G,EAAA37G,qBAAA,EAEA,IAAAa,EAAA,IAAAqB,aAAA,GACAzB,EAAA,IAAAsB,YAAAlB,EAAAoI,QA2IA,SAAA2yG,IACA1oG,MAAA2oG,kBACA3oG,MAAA2oG,kBAAA9hH,KAAA6hH,GAEA7hH,KAAAiqE,MAAAjqE,KAAAY,KAAA,KAAAZ,KAAAkuB,QAAA,UAAA/U,OAAA8wD,MAWA,SAAA83C,EAAA7zF,GACAluB,KAAAkuB,WAAA,mBACA/U,MAAA2oG,kBACA3oG,MAAA2oG,kBAAA9hH,KAAA+hH,GAEA/hH,KAAAiqE,MAAAjqE,KAAAY,KAAA,KAAAZ,KAAAkuB,QAAA,UAAA/U,OAAA8wD,MA7JAlpE,OAAAihH,iBACAJ,EAAA,YAAAtgH,GAA0C,OAAAA,GAAA,QAC1C,CACA+sE,UAAA,CAAgB/sE,OAAA,IAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,IAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,aAAAtgH,GAA4C,OAAAA,GAAA,QAC5C,CACA+sE,UAAA,CAAgB/sE,OAAA,MAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,MAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,IAAAA,EAAA,eAAAtgH,GAAmE,SAAAA,GACnE,CACA+sE,UAAA,CAAgB/sE,OAAA,WAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,WAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,YAAAtgH,GAA0C,WAAAA,GAC1C,CACA+sE,UAAA,CAAgB/sE,MAAA,EAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,IAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,aAAAtgH,GAA4C,aAAAA,GAC5C,CACA+sE,UAAA,CAAgB/sE,MAAA,EAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,MAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,IAAAA,EAAA,eAAAtgH,GAAmE,OAAAA,IAAA,GACnE,CACA+sE,UAAA,CAAgB/sE,MAAA,EAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,WAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,cAAAtgH,GAA8C,QAAAA,GAC9C,CACA+sE,UAAA,CAAgB/sE,OAAA,EAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,OAAA,EAAA2gH,UAAA,KAGhBlhH,OAAAihH,iBACAJ,EAAA,aAAAtgH,GAA4C,OAAAiG,KAAA26G,OAAA5gH,IAC5C,CACA6gH,QAAA,CAAgB7gH,MAAAiG,KAAA26G,OAAA,cAAAD,UAAA,GAChB5zC,UAAA,CAAgB/sE,MAAAiG,KAAA26G,OAAA,eAAAD,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAAiG,KAAA26G,OAAA,cAAAD,UAAA,GAChBG,iBAAA,CAAwB9gH,MAAAiG,KAAA26G,OAAA,gBAAAD,UAAA,GACxBI,iBAAA,CAAwB/gH,OAAA,SAAA2gH,UAAA,GACxBK,iBAAA,CAAwBhhH,MAAA,SAAA2gH,UAAA,KAGxBlhH,OAAAihH,iBACAJ,EAAA,aAAAtgH,GAA4C,OAAAA,GAC5C,CACA6gH,QAAA,CAAgB7gH,MAAA,sBAAA2gH,UAAA,GAChB5zC,UAAA,CAAgB/sE,MAAA,OAAA2gH,UAAA,GAChBx9D,UAAA,CAAgBnjD,MAAA,uBAAA2gH,UAAA,GAChBG,iBAAA,CAAwB9gH,MAAA,wBAAA2gH,UAAA,GACxBI,iBAAA,CAAwB/gH,OAAA,iBAAA2gH,UAAA,GACxBK,iBAAA,CAAwBhhH,MAAA,iBAAA2gH,UAAA,KAGxBL,EAAA,IAAAr6G,KAAAg7G,MAEAX,EAAA,aAAAtgH,GACA,IAAAZ,EAAA6G,KAAAg7G,MAAAjhH,MACA,OAAAA,EAAA,GAAAZ,KAGAkhH,EAAA,gBAAAtgH,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGAsgH,EAAA,cAAAtgH,EAAAu7C,GAEA,OAAAv7C,IADAu7C,GAAA,IACAv7C,IAAA,GAAAu7C,GAGA+kE,EAAA,cAAAtgH,EAAAu7C,GAEA,OAAAv7C,KADAu7C,GAAA,IACAv7C,GAAA,GAAAu7C,GAGA+kE,EAAA,IAAAr6G,KAAAgnF,IAEAqzB,EAAA,IAAAr6G,KAAAyjE,IAEA42C,EAAA,IAAAr6G,KAAA0nF,IAEA2yB,EAAA,KAAAr6G,KAAAirD,KAEAovD,EAAA,MAAAr6G,KAAA6nF,MAGAwyB,EAAA,iBAAAtgH,GACA,WAAAiG,KAAAgnF,IAAAjtF,EAAAiG,KAAAgpF,MAAAjvF,IACA,EAAAiG,KAAAi7G,MAAA,GAAAlhH,GAEAiG,KAAAi7G,MAAAlhH,IAGAsgH,EAAA,gBAAA7oF,EAAAC,EAAApD,GACA,OAAAA,EAAAmD,EAAAC,GAGA4oF,EAAA,KAAAr6G,KAAA6oF,KAEAwxB,EAAA,MAAAr6G,KAAAgpF,MAEAqxB,EAAA,kBAAA30F,EAAAw1F,GACA,OAAAl7G,KAAAgnF,IAAAthE,GAAA1lB,KAAAm7G,KAAAD,IAGAb,EAAA,eAAAtgH,GACA,IAAA24D,EAAA34D,GAAA,WACA44D,GAAA,SAAA54D,IAAA,EAIA,OAFA24D,GADA34D,EAAA24D,EAAAC,IACA,WACAA,GAAA,MAAA54D,IAAA,KAIAsgH,EAAA,iBAAAtgH,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAugH,EAAA5/G,UAAAlB,OAAAY,OAAAwX,MAAAlX,WACA4/G,EAAA5/G,UAAArB,KAAA,mBACAihH,EAAA5/G,UAAAisB,QAAA,cAEA0zF,EAAA,uBACA,UAAAC,GAWAE,EAAA9/G,UAAAlB,OAAAY,OAAAwX,MAAAlX,WACA8/G,EAAA9/G,UAAArB,KAAA,iBAEAghH,EAAA,gBAAAe,EAAAz0F,GACA,GAAAy0F,EAAA,OAAAA,EACA,UAAAZ,EAAA7zF,IAGA0zF,EAAA,oBAAAtgH,GACA,OAAAA,GAGA0F,OAAA,uBAAA+mD,GACA,OAAA/mD,OAAAi3D,aAAA56C,MAAArc,OAAA+mD,IAGA/mD,OAAA,wBAAA+mD,GACA,OAAA/mD,OAAA47G,cAAAv/F,MAAArc,OAAA+mD,IAGA/mD,OAAA/E,UAAA4gH,YACA9hH,OAAAC,eAAAgG,OAAA/E,UAAA,cACAX,MAAA,SAAAwhH,EAAAC,GACA,IAAAC,EAAAhjH,KAAAijH,MAAAH,GAAApqG,KAAAqqG,GAEA,OADAD,EAAAh4G,SAAAk4G,EAAAD,EAAAC,EAAAD,GACAC,KAKApB,EAAA,UAAAsB,OAAA52B,UAEAs1B,EAAA,iBAAAh3G,GACA,uBAAAA,GAGAg3G,EAAA,oBAAAh3G,GACA,UAGAg3G,EAAA,qBAAAh3G,GACA,uBAAAA,GAAA,iBAAAA,GAGAg3G,EAAA,oBAAAh3G,GACA,yBAAAA,GAGAg3G,EAAA,kBAAAh3G,GACA,uBAAAA,gBAAA5D,QAGA46G,EAAA,QAAA36G,MAAA4lF,QACA+0B,EAAA,qBAAAzvF,GACA,OAAAA,GACA,iBAAAA,GACA,iBAAAA,EAAArnB,QACAqnB,EAAArnB,QAAA,GACAvD,KAAAgpF,MAAAp+D,EAAArnB,UAAAqnB,EAAArnB,QAGA7D,MAAAtF,OAAA,SAAAwhH,GACA,IAAAp1D,EAAA,IAAA9mD,MAAAk8G,GAEA,OADAp1D,EAAAjjD,OAAA,EACAijD,GAGA6zD,EAAA,mBAAAzvF,GACA,gBAAAA,GAGAyvF,EAAA,oBAAAzvF,GACA,UAGAyvF,EAAA,mBAAAzvF,GACA,OAAAA,GAGAyvF,EAAA,cAAA30F,EAAAw1F,GACA,OAAAx1F,EAAAw1F,GAGAb,EAAA,eAAA30F,EAAAw1F,GACA,OAAAl7G,KAAA26G,OAAAj1F,EAAAw1F,IAGAb,EAAA,OAAAr6G,KAEAxG,OAAAihH,iBAAAJ,EAAA,QACAwB,WAAA,CAAe9hH,MAAA,EAAA2gH,UAAA,GACfoB,WAAA,CAAe/hH,MAAA,EAAA2gH,UAAA,GACfqB,QAAA,CACAhiH,MAAA,SAAA2rB,GACiB,OAAjBnmB,EAAA,GAAAmmB,EAAiBs2F,QAAA78G,EAAA,QAAAumB,QAGjBu2F,OAAA,CACAliH,MAAA,SAAA2rB,GACAjtB,KAAAojH,WAAA77G,KAAAk8G,IAAAx2F,GACAjtB,KAAAqjH,WAAA97G,KAAAm8G,IAAAz2F,OAKA20F,EAAA,aACA,IAAA+B,EAAA,IAAA97G,WAAA,GACA+7G,EAAA,EACA,OACAtuE,SAAAssE,EAAA,4BAAAlmE,GACA,KAAAA,KAAA,YACA,GAAAkoE,EAAAloE,EAAAioE,EAAA74G,OAAA,CACA,IAAA+4G,EAAAF,GACAA,EAAA,IAAA97G,WAAAN,KAAAyjE,IAAA,MAAA24C,EAAA74G,OAAA4wC,EAAA,EAAAioE,EAAA74G,UACA4D,IAAAm1G,GAEA,IAAAzrE,EAAAwrE,EAEA,OADA,GAAAA,GAAAloE,KAAAkoE,EAAA,KAAAA,IACAxrE,GAEA0rE,KAAAlC,EAAA,wBAAAp1F,EAAAlrB,EAAAo6C,GACAioE,EAAAG,KAAAxiH,EAAAkrB,IAAAkvB,IAEAjzC,KAAAm5G,EAAA,wBAAAxpE,KACA2rE,KAAAnC,EAAA,wBAAAp1F,EAAAD,EAAAmvB,GACAioE,EAAAK,WAAAx3F,EAAAD,IAAAmvB,IAEA+hB,MAAAmkD,EAAA,2BACA+B,EAAA,IAAA97G,WAAA,GACA+7G,EAAA,KAxBA,GA6BAhC,EAAA,MAAAA,EAAA,kBAAAxpE,EAAA92C,EAAA6N,GACAw0G,MAAA,EAAAvrE,IAAA,EAAAjpC,IAAA7N,GAGAsgH,EAAA,KAAAA,EAAA,iBAAAxpE,EAAAjpC,GACA,OAAAw0G,MAAA,EAAAvrE,IAAA,EAAAjpC,KAGAyyG,EAAA,2DChUA,SAAAtlG,GAAA,MAAAxV,EAAA,IAAAqB,aAAA,GACAtB,EAAA,IAAAqB,aAAApB,EAAAoI,QACA9I,EAAA,IAAAuB,WAAAb,EAAAoI,QAEAoN,EAAA2nG,WAAA,SAAA3iH,GAEA,OADAuF,EAAA,GAAAvF,EACA8E,EAAA,IAGAkW,EAAA4nG,WAAA,SAAA5iH,GAEA,OADA8E,EAAA,GAAA9E,EACAuF,EAAA,IAGAyV,EAAA6nG,WAAA,SAAA7iH,GAEA,OADAwF,EAAA,GAAAxF,EACA2Q,QAAA7L,EAAA,GAAAA,EAAA,KAGAkW,EAAA8nG,WAAA,SAAA9iH,GAGA,OAFA8E,EAAA,GAAA25C,QAAAz+C,GACA8E,EAAA,GAAA45C,SAAA1+C,GACAwF,EAAA,wCCtBA,SAAAwV,GAAA,MAAA+nG,EAAA/nG,EAAA+nG,MAA4BlkH,EAAQ,IAEpCmc,EAAAwoD,SAAAu/C,EAAAC,KAEAhoG,EAAAioG,QAAAF,EAAAG,IAEAloG,EAAArK,QAAA,SAAAwyG,EAAAC,GACA,OAAAL,EAAAM,SAAAF,EAAAC,IAGApoG,EAAAyjC,QAAA,SAAAz+C,GACA,OAAAA,EAAAsjH,KAGAtoG,EAAA0jC,SAAA,SAAA1+C,GACA,OAAAA,EAAAujH,MAGAvoG,EAAA0iD,QAAA,SAAA/rC,EAAAC,GACA,OAAAD,EAAAvhB,IAAAwhB,IAGA5W,EAAAuoD,QAAA,SAAA5xC,EAAAC,GACA,OAAAD,EAAA6xF,IAAA5xF,IAGA5W,EAAAgjD,QAAA,SAAArsC,EAAAC,GACA,OAAAD,EAAA8xF,IAAA7xF,IAGA5W,EAAA0oG,QAAA,SAAA/xF,EAAAC,GACA,OAAAD,EAAAgyF,IAAA/xF,IAGA5W,EAAA4oG,UAAA,SAAAjyF,EAAAC,GACA,OAAAD,EAAAkyF,aAAAF,IAAA/xF,EAAAiyF,cAAAC,YAGA9oG,EAAA+oG,QAAA,SAAApyF,EAAAC,GACA,OAAAD,EAAA3qB,IAAA4qB,IAGA5W,EAAAgpG,UAAA,SAAAryF,EAAAC,GACA,OAAAD,EAAAkyF,aAAA78G,IAAA4qB,EAAAiyF,cAAAC,YAGA9oG,EAAAipG,QAAA,SAAAtyF,EAAAC,GACA,OAAAD,EAAAuyF,IAAAtyF,IAGA5W,EAAAmpG,OAAA,SAAAxyF,EAAAC,GACA,OAAAD,EAAAyyF,GAAAxyF,IAGA5W,EAAAqpG,QAAA,SAAA1yF,EAAAC,GACA,OAAAD,EAAA2yF,IAAA1yF,IAGA5W,EAAA2iD,QAAA,SAAAhsC,EAAAC,GACA,OAAAD,EAAA4yF,IAAA3yF,IAGA5W,EAAAwpG,QAAA,SAAA7yF,EAAAC,GACA,OAAAD,EAAA8yF,IAAA7yF,IAGA5W,EAAA01D,UAAA,SAAA/+C,EAAAC,GACA,OAAAD,EAAA+yF,KAAA9yF,IAGA5W,EAAA2pG,QAAA,SAAA3kH,GACA,OAAAA,EAAA4kH,OAGA5pG,EAAA6pG,OAAA,SAAAlzF,EAAAC,GACA,OAAAD,EAAAmzF,GAAAlzF,IAGA5W,EAAA+pG,OAAA,SAAApzF,EAAAC,GACA,OAAAD,EAAAqzF,GAAApzF,IAGA5W,EAAAw1D,UAAA,SAAAxwE,EAAA81E,GACAvsE,OAAAusE,GAAA,IAAAA,IAAA,IACA,IAAA76B,EAAA8nE,EAAAkC,QAAAnvC,EAAA,GACA,OAAA91E,EAAAoQ,IAAA6qC,GAAAipE,IAAAjpE,EAAA2pE,QAGA5pG,EAAAsnD,UAAA,SAAAtiE,GACA,WAAAA,EAAAujH,MAAAvjH,EAAAsjH,KAAA,GAAAtjH,EAAAsjH,KAAA1hH,GAAAuhD,YACA,IAAAnjD,EAAAujH,MAAAvjH,EAAAsjH,KAAA1hH,GAAAmrE,WAAA/sE,EAAAsjH,IAAA,GAGAtoG,EAAAwnD,WAAA,SAAAxiE,GACA,WAAAA,EAAAujH,MAAAvjH,EAAAsjH,KAAA,GAAAtjH,EAAAsjH,KAAAzhH,IAAAshD,YACA,IAAAnjD,EAAAujH,MAAAvjH,EAAAsjH,KAAAzhH,IAAAkrE,WAAA/sE,EAAAsjH,IAAA,GAGAtoG,EAAA0nD,WAAA,SAAA1iE,GACA,WAAAA,EAAAujH,MAAAvjH,EAAAsjH,KAAA,IACA,IAAAtjH,EAAAujH,MAAAvjH,EAAAsjH,IAAA,GAGAtoG,EAAAunD,UAAA,SAAAviE,GACA,WAAAA,EAAAujH,MAAAvjH,EAAAsjH,KAAA,GAAAtjH,EAAAsjH,KAAArhH,GAAAkhD,WAGAnoC,EAAAynD,WAAA,SAAAziE,GACA,WAAAA,EAAAujH,MAAAvjH,EAAAsjH,KAAA,GAAAtjH,EAAAsjH,KAAAphH,IAAAihD,WAGAnoC,EAAA2nD,WAAA,SAAA3iE,GACA,WAAAA,EAAAujH,MAGAvoG,EAAA4nD,YAAA,SAAA5iE,GACA,WAAAA,EAAAujH,OAAA,IAAAvjH,EAAAsjH,KAAA,IAAAtjH,EAAAsjH,MAGA,MAAA4B,EAAAnC,EAAAoC,WAAA5iH,IAAAw+G,kBACAqE,EAAArC,EAAAoC,WAAA5iH,IAAAy+G,kBAEAhmG,EAAAqqG,WAAA,SAAArlH,GACA,OAAAA,EAAAslH,IAAAJ,IAAAllH,EAAAulH,IAAAH,IAGA,MAAAI,EAAAzC,EAAAoC,WAAA3iH,IAAAu+G,kBACA0E,EAAA1C,EAAAoC,WAAA3iH,IAAAw+G,kBAEAhmG,EAAA0qG,WAAA,SAAA1lH,GACA,OAAAA,EAAAslH,IAAAE,IAAAxlH,EAAAulH,IAAAE,IAGAzqG,EAAAgtE,WAAA,SAAAhoF,GACA,OAAAgb,EAAA/U,KAAA26G,OAAA5gH,EAAA2lH,aAGA3qG,EAAAitE,WAAA,SAAAjoF,GACA,OAAAA,EAAA2lH,YAGA3qG,EAAAk4F,cAAA,SAAAlzG,EAAA4lH,GACA,OAAAA,EAAA5lH,EAAA6jH,aAAA7jH,GAAAwc,SAAA,sCC9IAne,EAAAD,QAAA2kH,EAKA,IAAA8C,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAryE,OAAA,IAAAltC,WAAA,CACA,m2BACA,IAASnI,QACR,MAAA6gE,IAcD,SAAA8jD,EAAAO,EAAAC,EAAAqC,GAMAlnH,KAAA4kH,IAAA,EAAAA,EAMA5kH,KAAA6kH,KAAA,EAAAA,EAMA7kH,KAAAknH,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXAlD,EAAApiH,UAAAulH,WAEAzmH,OAAAC,eAAAqjH,EAAApiH,UAAA,cAAqDX,OAAA,IAkBrD+iH,EAAAiD,SAOA,IAAAG,EAAA,GAOAC,EAAA,GAQA,SAAAnB,EAAAjlH,EAAA4lH,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAtmH,KAAA,IACAA,EAAA,OACAqmH,EAAAD,EAAApmH,IAEAqmH,GAEAJ,EAAA5C,EAAArjH,GAAA,EAAAA,GAAA,WACAsmH,IACAF,EAAApmH,GAAAimH,GACAA,IAGAK,GAAA,MADAtmH,GAAA,IACAA,EAAA,OACAqmH,EAAAF,EAAAnmH,IAEAqmH,GAEAJ,EAAA5C,EAAArjH,IAAA,WACAsmH,IACAH,EAAAnmH,GAAAimH,GACAA,GAmBA,SAAAd,EAAAnlH,EAAA4lH,GACA,GAAAW,MAAAvmH,GACA,OAAA4lH,EAAAY,EAAAxD,EACA,GAAA4C,EAAA,CACA,GAAA5lH,EAAA,EACA,OAAAwmH,EACA,GAAAxmH,GAAAymH,EACA,OAAAC,MACK,CACL,GAAA1mH,IAAA2mH,EACA,OAAA55C,EACA,GAAA/sE,EAAA,GAAA2mH,EACA,OAAAxjE,EAEA,OAAAnjD,EAAA,EACAmlH,GAAAnlH,EAAA4lH,GAAAgB,MACAvD,EAAArjH,EAAA6mH,EAAA,EAAA7mH,EAAA6mH,EAAA,EAAAjB,GAmBA,SAAAvC,EAAAyD,EAAAC,EAAAnB,GACA,WAAA7C,EAAA+D,EAAAC,EAAAnB,GA5CA7C,EAAAkC,UAkCAlC,EAAAoC,aAsBApC,EAAAM,WASA,IAAA2D,EAAA/gH,KAAAc,IASA,SAAAkgH,EAAAtkE,EAAAijE,EAAAsB,GACA,OAAAvkE,EAAAn5C,OACA,MAAAqO,MAAA,gBACA,WAAA8qC,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAqgE,EASA,GARA,iBAAA4C,GAEAsB,EAAAtB,EACAA,GAAA,GAEAA,OAEAsB,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SAEA,IAAAtmH,EACA,IAAAA,EAAA8hD,EAAAizD,QAAA,QACA,MAAA/9F,MAAA,mBACA,OAAAhX,EACA,OAAAomH,EAAAtkE,EAAAviC,UAAA,GAAAwlG,EAAAsB,GAAAN,MAQA,IAHA,IAAAQ,EAAAjC,EAAA6B,EAAAE,EAAA,IAEA1yE,EAAAwuE,EACAjkH,EAAA,EAAmBA,EAAA4jD,EAAAn5C,OAAgBzK,GAAA,GACnC,IAAAq7C,EAAAn0C,KAAA0nF,IAAA,EAAAhrC,EAAAn5C,OAAAzK,GACAiB,EAAA4X,SAAA+qC,EAAAviC,UAAArhB,IAAAq7C,GAAA8sE,GACA,GAAA9sE,EAAA,GACA,IAAAitE,EAAAlC,EAAA6B,EAAAE,EAAA9sE,IACA5F,IAAAivE,IAAA4D,GAAAj3G,IAAA+0G,EAAAnlH,SAGAw0C,GADAA,IAAAivE,IAAA2D,IACAh3G,IAAA+0G,EAAAnlH,IAIA,OADAw0C,EAAAoxE,WACApxE,EAoBA,SAAA8yE,EAAAt7D,EAAA45D,GACA,uBAAA55D,EACAm5D,EAAAn5D,EAAA45D,GACA,iBAAA55D,EACAi7D,EAAAj7D,EAAA45D,GAEAvC,EAAAr3D,EAAAs3D,IAAAt3D,EAAAu3D,KAAA,kBAAAqC,IAAA55D,EAAA45D,UAfA7C,EAAAkE,aAyBAlE,EAAAuE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAvC,EA5BA,OAkCAjC,EAAAiC,EAAA,GAMAlC,EAAAC,OAMA,IAAAwD,EAAAvB,EAAA,MAMAlC,EAAAyD,QAMA,IAAAtD,EAAA+B,EAAA,GAMAlC,EAAAG,MAMA,IAAAuE,EAAAxC,EAAA,MAMAlC,EAAA0E,OAMA,IAAAC,EAAAzC,GAAA,GAMAlC,EAAA2E,UAMA,IAAAvkE,EAAAkgE,GAAA,iBAMAN,EAAA5/D,YAMA,IAAAujE,EAAArD,GAAA,SAMAN,EAAA2D,qBAMA,IAAA35C,EAAAs2C,EAAA,kBAMAN,EAAAh2C,YAMA,IAAA46C,EAAA5E,EAAApiH,UAMAgnH,EAAAC,MAAA,WACA,OAAAlpH,KAAAknH,SAAAlnH,KAAA4kH,MAAA,EAAA5kH,KAAA4kH,KAOAqE,EAAAhC,SAAA,WACA,OAAAjnH,KAAAknH,UACAlnH,KAAA6kH,OAAA,GAAAsD,GAAAnoH,KAAA4kH,MAAA,GACA5kH,KAAA6kH,KAAAsD,GAAAnoH,KAAA4kH,MAAA,IAUAqE,EAAAnrG,SAAA,SAAA0qG,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SACA,GAAAzoH,KAAAmpH,SACA,UACA,GAAAnpH,KAAAopH,aAAA,CACA,GAAAppH,KAAAomH,GAAA/3C,GAAA,CAGA,IAAAg7C,EAAA5C,EAAA+B,GACAvD,EAAAjlH,KAAAilH,IAAAoE,GACAC,EAAArE,EAAAF,IAAAsE,GAAAvE,IAAA9kH,MACA,OAAAilH,EAAAnnG,SAAA0qG,GAAAc,EAAAJ,QAAAprG,SAAA0qG,GAEA,UAAAxoH,KAAAkoH,MAAApqG,SAAA0qG,GAQA,IAHA,IAAAE,EAAAjC,EAAA6B,EAAAE,EAAA,GAAAxoH,KAAAknH,UACAqC,EAAAvpH,KACA81C,EAAA,KACA,CACA,IAAA0zE,EAAAD,EAAAtE,IAAAyD,GAEAe,GADAF,EAAAzE,IAAA0E,EAAAzE,IAAA2D,IAAAQ,UAAA,GACAprG,SAAA0qG,GAEA,IADAe,EAAAC,GACAL,SACA,OAAAM,EAAA3zE,EAEA,KAAA2zE,EAAA3+G,OAAA,GACA2+G,EAAA,IAAAA,EACA3zE,EAAA,GAAA2zE,EAAA3zE,IASAmzE,EAAAS,YAAA,WACA,OAAA1pH,KAAA6kH,MAOAoE,EAAAU,oBAAA,WACA,OAAA3pH,KAAA6kH,OAAA,GAOAoE,EAAAW,WAAA,WACA,OAAA5pH,KAAA4kH,KAOAqE,EAAAY,mBAAA,WACA,OAAA7pH,KAAA4kH,MAAA,GAOAqE,EAAAa,cAAA,WACA,GAAA9pH,KAAAopH,aACA,OAAAppH,KAAAomH,GAAA/3C,GAAA,GAAAruE,KAAAkoH,MAAA4B,gBAEA,IADA,IAAAx8D,EAAA,GAAAttD,KAAA6kH,KAAA7kH,KAAA6kH,KAAA7kH,KAAA4kH,IACAmF,EAAA,GAAsBA,EAAA,GACtB,IAAAz8D,EAAA,GAAAy8D,GAD+BA,KAG/B,UAAA/pH,KAAA6kH,KAAAkF,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAnpH,KAAA6kH,MAAA,IAAA7kH,KAAA4kH,KAOAqE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAAppH,KAAAknH,UAAAlnH,KAAA6kH,KAAA,GAOAoE,EAAAgB,WAAA,WACA,OAAAjqH,KAAAknH,UAAAlnH,KAAA6kH,MAAA,GAOAoE,EAAAiB,MAAA,WACA,aAAAlqH,KAAA4kH,MAOAqE,EAAAkB,OAAA,WACA,aAAAnqH,KAAA4kH,MAQAqE,EAAAmB,OAAA,SAAAp+F,GAGA,OAFAs7F,EAAAt7F,KACAA,EAAA48F,EAAA58F,KACAhsB,KAAAknH,WAAAl7F,EAAAk7F,UAAAlnH,KAAA6kH,OAAA,OAAA74F,EAAA64F,OAAA,SAEA7kH,KAAA6kH,OAAA74F,EAAA64F,MAAA7kH,KAAA4kH,MAAA54F,EAAA44F,MASAqE,EAAA7C,GAAA6C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAAr+F,GACA,OAAAhsB,KAAAomH,GAAAp6F,IASAi9F,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA3C,GAAA2C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAv+F,GACA,OAAAhsB,KAAAwqH,KAAAx+F,GAAA,GASAi9F,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAA1+F,GACA,OAAAhsB,KAAAwqH,KAAAx+F,IAAA,GASAi9F,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAA5+F,GACA,OAAAhsB,KAAAwqH,KAAAx+F,GAAA,GASAi9F,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA9+F,GACA,OAAAhsB,KAAAwqH,KAAAx+F,IAAA,GASAi9F,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAAh/F,GAGA,GAFAs7F,EAAAt7F,KACAA,EAAA48F,EAAA58F,IACAhsB,KAAAomH,GAAAp6F,GACA,SACA,IAAAi/F,EAAAjrH,KAAAopH,aACA8B,EAAAl/F,EAAAo9F,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAlrH,KAAAknH,SAGAl7F,EAAA64F,OAAA,EAAA7kH,KAAA6kH,OAAA,GAAA74F,EAAA64F,OAAA7kH,KAAA6kH,MAAA74F,EAAA44F,MAAA,EAAA5kH,KAAA4kH,MAAA,OAFA5kH,KAAA8kH,IAAA94F,GAAAo9F,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAnrH,KAAAknH,UAAAlnH,KAAAomH,GAAA/3C,GACAA,EACAruE,KAAAkmH,MAAAx0G,IAAA8yG,IAQAyE,EAAAf,IAAAe,EAAAkC,OAOAlC,EAAAv3G,IAAA,SAAA05G,GACA9D,EAAA8D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAArrH,KAAA6kH,OAAA,GACAyG,EAAA,MAAAtrH,KAAA6kH,KACA0G,EAAAvrH,KAAA4kH,MAAA,GACA4G,EAAA,MAAAxrH,KAAA4kH,IAEA6G,EAAAL,EAAAvG,OAAA,GACA6G,EAAA,MAAAN,EAAAvG,KACA8G,EAAAP,EAAAxG,MAAA,GAGAgH,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAxG,QAIA,GAGAiH,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA9G,GANAmH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGA7rH,KAAAknH,WAQA+B,EAAA+C,SAAA,SAAAC,GAGA,OAFA3E,EAAA2E,KACAA,EAAArD,EAAAqD,IACAjsH,KAAA0R,IAAAu6G,EAAA/D,QASAe,EAAAnE,IAAAmE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAnsH,KAAAmpH,SACA,OAAA7E,EAKA,GAJAgD,EAAA6E,KACAA,EAAAvD,EAAAuD,IAGAhF,EAKA,OAAAxC,EAJAwC,EAAApC,IAAA/kH,KAAA4kH,IACA5kH,KAAA6kH,KACAsH,EAAAvH,IACAuH,EAAAtH,MACAsC,EAAAiF,WAAApsH,KAAAknH,UAGA,GAAAiF,EAAAhD,SACA,OAAA7E,EACA,GAAAtkH,KAAAomH,GAAA/3C,GACA,OAAA89C,EAAAjC,QAAA77C,EAAAi2C,EACA,GAAA6H,EAAA/F,GAAA/3C,GACA,OAAAruE,KAAAkqH,QAAA77C,EAAAi2C,EAEA,GAAAtkH,KAAAopH,aACA,OAAA+C,EAAA/C,aACAppH,KAAAkoH,MAAAnD,IAAAoH,EAAAjE,OAEAloH,KAAAkoH,MAAAnD,IAAAoH,GAAAjE,MACK,GAAAiE,EAAA/C,aACL,OAAAppH,KAAA+kH,IAAAoH,EAAAjE,aAGA,GAAAloH,KAAAyqH,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAArC,EAAAzmH,KAAAinH,WAAAkF,EAAAlF,WAAAjnH,KAAAknH,UAKA,IAAAmE,EAAArrH,KAAA6kH,OAAA,GACAyG,EAAA,MAAAtrH,KAAA6kH,KACA0G,EAAAvrH,KAAA4kH,MAAA,GACA4G,EAAA,MAAAxrH,KAAA4kH,IAEA6G,EAAAU,EAAAtH,OAAA,GACA6G,EAAA,MAAAS,EAAAtH,KACA8G,EAAAQ,EAAAvH,MAAA,GACAyH,EAAA,MAAAF,EAAAvH,IAEAgH,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA9G,GAZAmH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGA7rH,KAAAknH,WASA+B,EAAAlE,IAAAkE,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAAhwG,MAAA,oBAaA,IAWAqzG,EAAAjD,EAAAvG,EArBA,GAAAmE,EAIA,OAAAnnH,KAAAknH,WACA,aAAAlnH,KAAA6kH,OACA,IAAA0H,EAAA3H,MAAA,IAAA2H,EAAA1H,KAUAF,GANA3kH,KAAAknH,SAAAC,EAAAsF,MAAAtF,EAAAuF,OACA1sH,KAAA4kH,IACA5kH,KAAA6kH,KACA0H,EAAA3H,IACA2H,EAAA1H,MAEAsC,EAAAiF,WAAApsH,KAAAknH,UARAlnH,KAWA,GAAAA,KAAAmpH,SACA,OAAAnpH,KAAAknH,SAAAY,EAAAxD,EAEA,GAAAtkH,KAAAknH,SA6BK,CAKL,GAFAqF,EAAArF,WACAqF,IAAApH,cACAoH,EAAA1B,GAAA7qH,MACA,OAAA8nH,EACA,GAAAyE,EAAA1B,GAAA7qH,KAAAgmH,KAAA,IACA,OAAA+C,EACA/F,EAAA8E,MAtCA,CAGA,GAAA9nH,KAAAomH,GAAA/3C,GACA,OAAAk+C,EAAAnG,GAAA5B,IAAA+H,EAAAnG,GAAA4C,GACA36C,EACAk+C,EAAAnG,GAAA/3C,GACAm2C,GAIAgI,EADAxsH,KAAA+lH,IAAA,GACAd,IAAAsH,GAAA1G,IAAA,IACAO,GAAA9B,GACAiI,EAAAnD,aAAA5E,EAAAwE,GAEAO,EAAAvpH,KAAA8kH,IAAAyH,EAAAxH,IAAAyH,IACAxJ,EAAAwJ,EAAA96G,IAAA63G,EAAAtE,IAAAsH,KAIS,GAAAA,EAAAnG,GAAA/3C,GACT,OAAAruE,KAAAknH,SAAAY,EAAAxD,EACA,GAAAtkH,KAAAopH,aACA,OAAAmD,EAAAnD,aACAppH,KAAAkoH,MAAAjD,IAAAsH,EAAArE,OACAloH,KAAAkoH,MAAAjD,IAAAsH,GAAArE,MACS,GAAAqE,EAAAnD,aACT,OAAAppH,KAAAilH,IAAAsH,EAAArE,aACAlF,EAAAsB,EAmBA,IADAiF,EAAAvpH,KACAupH,EAAA3C,IAAA2F,IAAA,CAGAC,EAAAjlH,KAAAyjE,IAAA,EAAAzjE,KAAA6nF,MAAAm6B,EAAAtC,WAAAsF,EAAAtF,aAWA,IAPA,IAAA0F,EAAAplH,KAAAirD,KAAAjrD,KAAAqlH,IAAAJ,GAAAjlH,KAAAslH,KACAC,EAAAH,GAAA,KAAArE,EAAA,EAAAqE,EAAA,IAIAI,EAAAtG,EAAA+F,GACAQ,EAAAD,EAAAhI,IAAAwH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAAtG,EADA+F,GAAAM,EACA9sH,KAAAknH,WACAnC,IAAAwH,GAKAQ,EAAA5D,WACA4D,EAAAvI,GAEAxB,IAAAtxG,IAAAq7G,GACAxD,IAAAzE,IAAAkI,GAEA,OAAAhK,GASAiG,EAAAhE,IAAAgE,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IAGApF,EAOAxC,GANA3kH,KAAAknH,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACAntH,KAAA4kH,IACA5kH,KAAA6kH,KACA0H,EAAA3H,IACA2H,EAAA1H,MAEAsC,EAAAiF,WAAApsH,KAAAknH,UAGAlnH,KAAA8kH,IAAA9kH,KAAAilH,IAAAsH,GAAAxH,IAAAwH,KASAtD,EAAA3gH,IAAA2gH,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA/C,IAAA,WACA,OAAAvB,GAAA3kH,KAAA4kH,KAAA5kH,KAAA6kH,KAAA7kH,KAAAknH,WAQA+B,EAAAzD,IAAA,SAAAx5F,GAGA,OAFAs7F,EAAAt7F,KACAA,EAAA48F,EAAA58F,IACA24F,EAAA3kH,KAAA4kH,IAAA54F,EAAA44F,IAAA5kH,KAAA6kH,KAAA74F,EAAA64F,KAAA7kH,KAAAknH,WAQA+B,EAAAvD,GAAA,SAAA15F,GAGA,OAFAs7F,EAAAt7F,KACAA,EAAA48F,EAAA58F,IACA24F,EAAA3kH,KAAA4kH,IAAA54F,EAAA44F,IAAA5kH,KAAA6kH,KAAA74F,EAAA64F,KAAA7kH,KAAAknH,WAQA+B,EAAArD,IAAA,SAAA55F,GAGA,OAFAs7F,EAAAt7F,KACAA,EAAA48F,EAAA58F,IACA24F,EAAA3kH,KAAA4kH,IAAA54F,EAAA44F,IAAA5kH,KAAA6kH,KAAA74F,EAAA64F,KAAA7kH,KAAAknH,WAQA+B,EAAAmE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACArtH,KACAqtH,EAAA,GACA1I,EAAA3kH,KAAA4kH,KAAAyI,EAAArtH,KAAA6kH,MAAAwI,EAAArtH,KAAA4kH,MAAA,GAAAyI,EAAArtH,KAAAknH,UAEAvC,EAAA,EAAA3kH,KAAA4kH,KAAAyI,EAAA,GAAArtH,KAAAknH,WASA+B,EAAApD,IAAAoD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACArtH,KACAqtH,EAAA,GACA1I,EAAA3kH,KAAA4kH,MAAAyI,EAAArtH,KAAA6kH,MAAA,GAAAwI,EAAArtH,KAAA6kH,MAAAwI,EAAArtH,KAAAknH,UAEAvC,EAAA3kH,KAAA6kH,MAAAwI,EAAA,GAAArtH,KAAA6kH,MAAA,OAAA7kH,KAAAknH,WASA+B,EAAAlD,IAAAkD,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAArtH,KAEA,IAAA6kH,EAAA7kH,KAAA6kH,KACA,OAAAwI,EAAA,GAEA1I,EADA3kH,KAAA4kH,MACAyI,EAAAxI,GAAA,GAAAwI,EAAAxI,IAAAwI,EAAArtH,KAAAknH,UAEAvC,EADS,KAAA0I,EACTxI,EAEAA,IAAAwI,EAAA,GAFA,EAAArtH,KAAAknH,WAYA+B,EAAAjD,KAAAiD,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAA7D,SAAA,WACA,OAAAplH,KAAAknH,SAEAvC,EAAA3kH,KAAA4kH,IAAA5kH,KAAA6kH,MAAA,GADA7kH,MAQAipH,EAAA9D,WAAA,WACA,OAAAnlH,KAAAknH,SACAlnH,KACA2kH,EAAA3kH,KAAA4kH,IAAA5kH,KAAA6kH,MAAA,IAQAoE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAA3qH,KAAA0tH,YAAA1tH,KAAA2tH,aAOA1E,EAAAyE,UAAA,WACA,IAAAhJ,EAAA1kH,KAAA6kH,KACAJ,EAAAzkH,KAAA4kH,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAuE,EAAA0E,UAAA,WACA,IAAAjJ,EAAA1kH,KAAA6kH,KACAJ,EAAAzkH,KAAA4kH,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAJ,EAAAuJ,UAAA,SAAA52E,EAAAkwE,EAAAyD,GACA,OAAAA,EAAAtG,EAAAwJ,YAAA72E,EAAAkwE,GAAA7C,EAAAyJ,YAAA92E,EAAAkwE,IASA7C,EAAAwJ,YAAA,SAAA72E,EAAAkwE,GACA,WAAA7C,EACArtE,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAkwE,IAUA7C,EAAAyJ,YAAA,SAAA92E,EAAAkwE,GACA,WAAA7C,EACArtE,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAkwE,mFCryCA,SAAkBh+G,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,6BAEAA,IAAA,eAEAA,IAAA,sBAZF,CAAkBxJ,EAAAwJ,UAAAxJ,EAAAwJ,QAAO,oFCAzB,SAAYE,GAEVA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,WANF,CAAY1J,EAAA0J,SAAA1J,EAAA0J,OAAM,qbCalB,IAAAE,EAAA,oBAAAA,KAKA,OALaA,EAAQykH,EAAA,CADpBC,WACY1kH,GAAb,GAAa5J,EAAA4J,WAQb,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,sBAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,sCAEAA,IAAA,oCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,+BAEAA,IAAA,qCAEAA,IAAA,mCAhDF,CAAkB7J,EAAA6J,gBAAA7J,EAAA6J,cAAa,oVClB/B,IAAA2iF,EAAA/rF,EAAA,IACA8tH,EAAA9tH,EAAA,IACA+tH,EAAA/tH,EAAA,IACAuJ,EAAAvJ,EAAA,GA4BoCT,EAAAyuH,iBA5BYzkH,EAAA0lB,wBAEhD,IAAAg/F,EAAAjuH,EAAA,IAIAT,EAAAu3G,UAAA,SAA0BthG,EAAcgM,EAAcnH,EACpD6zG,GAIA,YALoD,IAAA7zG,OAAA,QACpD,IAAA6zG,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAzX,QAC1B0X,EAAOpX,UAAUthG,EAAMgM,EAAMnH,GACtB6zG,GAIT3uH,EAAAq5G,SAAA,SAAyBsV,GACvB,OAAOA,EAAOtV,YAIhBr5G,EAAA4uH,eAAA,SAA+BD,GAC7B,IAAIzrG,EAAUyrG,EAAOzrG,QACrB,OAAOA,EAAQjV,kBAAoBiV,EAAQpV,YAAY1C,OACnD8X,EAAQpV,YAAYoV,EAAQjV,qBAC5B,MAONjO,EAAA6uH,OAAA,SAAuBrgG,GACrB,OAAOA,EAAQZ,UAAY5jB,EAAAwjB,mBAAmBK,MAIhD7tB,EAAA8uH,UAAA,SAA0BtgG,GACxB,OAAOA,EAAQZ,UAAY5jB,EAAAwjB,mBAAmBM,SAIhD9tB,EAAA+uH,QAAA,SAAwBvgG,GACtB,OAAOA,EAAQZ,UAAY5jB,EAAAwjB,mBAAmBO,OAIhD/tB,EAAAgvH,cAAA,WACE,OAAO,IAAIxiC,EAAArd,SAIbnvE,EAAAivH,UAAA,SAA0Bv9G,EAAkBwZ,GAC1CxZ,EAAQwZ,OAASA,GAInBlrB,EAAAkvH,YAAA,SAA4Bx9G,EAAkBiB,GAC5CjB,EAAQiB,SAAWA,GAIrB3S,EAAAmvH,gBAAA,SAAgCz9G,EAAkB09D,GAChD19D,EAAQ09D,aAAeA,GAIzBpvE,EAAAovH,gBAAA,SAAgC19G,EAAkB29D,GAChD39D,EAAQ29D,aAAeA,GAIzBrvE,EAAAqvH,eAAA,SAA+B39G,EAAkB49D,GAC/C59D,EAAQ49D,YAAcA,GAIxBtvE,EAAAsvH,aAAA,SAA6B59G,EAAkB2W,GAC7C3W,EAAQ2W,UAAYA,GAItBroB,EAAAuvH,cAAA,SAA8B79G,EAAkBkB,GAC9ClB,EAAQkB,WAAaA,GAIvB5S,EAAAwvH,eAAA,SAA+B99G,EAAkB4H,EAAepY,GAC9D,IAAIgY,EAAgBxH,EAAQwH,cACvBA,IAAexH,EAAQwH,cAAgBA,EAAgB,IAAIxR,KAChEwR,EAAclK,IAAIsK,EAAOpY,IAI3BlB,EAAAyvH,iBAAA,SAAiC/9G,EAAkB69D,GACjD79D,EAAQ69D,cAAgBA,GAIbvvE,EAAA0vH,uBAAsB,EAEtB1vH,EAAA2vH,uBAAsB,EAEtB3vH,EAAA4vH,oBAAmB,EAEnB5vH,EAAA6vH,aAAY,EAEZ7vH,EAAA8vH,gBAAe,GAG5B9vH,EAAA+vH,cAAA,SAA8Br+G,EAAkB+9D,GAC9C/9D,EAAQ89D,UAAYC,GAItBzvE,EAAAgwH,sBAAA,SAAsCt+G,EAAkBu+G,EAAoBC,GAC1Ex+G,EAAQmB,kBAAoBo9G,EAC5Bv+G,EAAQoB,gBAAkBo9G,GAI5BlwH,EAAAmwH,cAAA,SAA8BxB,GAC5B,OAAOA,EAAOhuD,UAIhB3gE,EAAAowH,eAAA,SAA+BltG,EAAkBxR,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAI86E,EAAA1c,SAAS5sD,EAASxR,GAASw/D,WAIxClxE,EAAAqwH,gBAAA,SAAgCpwH,GAC9B,IAAIw0G,EAAa,IAAI8Z,EAAAja,WAErB,OADAG,EAAWD,UAAUv0G,GACdw0G,EAAW9zC,UAIpB3gE,EAAAswH,SAAA,SAAyBptG,GACvB,OAAOsrG,EAAArY,WAAWE,MAAMnzF,IAI1BljB,EAAAuwH,SAAA,SAAyBrtG,GACvB,OAAOsrG,EAAA9X,WAAWL,MAAMnzF,IAI1BljB,EAAAwwH,UAAA,SAA0BttG,mBACpBuM,EAAK,IAAIloB,MACbkoB,EAAG5Q,KAAK,yBACR,IAAgB,IAAAnD,EAAA1G,EAAAkO,EAAQ3U,eAAeqM,UAAQwB,EAAAV,EAAAxG,QAAAkH,EAAAjH,KAAAiH,EAAAV,EAAAxG,OAAE,CAA5C,IAAIu7G,EAAGr0G,EAAAxa,MACV6tB,EAAG5Q,KAAK,SACR4Q,EAAG5Q,KAAK4xG,EAAIxhH,cACZwgB,EAAG5Q,KAAK,0GAEV4Q,EAAG5Q,KAAK,2BACR,IAAgB,IAAAxC,EAAArH,EAAAkO,EAAQ3U,eAAeqM,UAAQxF,EAAAiH,EAAAnH,QAAAE,EAAAD,KAAAC,EAAAiH,EAAAnH,OAAE,CAA5C,IACC6U,GADG0mG,EAAGr7G,EAAAxT,OACKmoB,KACf0F,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAKkL,EAAOA,EAAKla,GAAGuO,WAAa,KACpCqR,EAAG5Q,KAAK,yGAEV4Q,EAAG5Q,KAAK,4BACR,IAAgB,IAAAtI,EAAAvB,EAAAkO,EAAQ3U,eAAeqM,UAAQjE,EAAAJ,EAAArB,QAAAyB,EAAAxB,KAAAwB,EAAAJ,EAAArB,OAAtCu7G,EAAG95G,EAAA/U,MACV6tB,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAK4xG,EAAIpmG,UAAUjM,YACtBqR,EAAG5Q,KAAK,wGAGV,OADA4Q,EAAG5Q,KAAK,YACD4Q,EAAGzW,KAAK,KAIjB,IAAAjP,EAAAtJ,EAAA,GAAST,EAAAoD,eAAA2G,EAAA3G,eAGTiqB,EAAA5sB,EAAA,IAEA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,mFCrMAT,EAAA0wH,SAAA,SAAyBC,EAAUprG,GAEjC,OADApa,OAAOoa,GAAS,GAAKA,EAAQ,IACtBohG,OACLd,QACE8K,EACApxD,QACEslD,QACAtyG,QAAQgT,KAGZ6/C,WAKJplE,EAAA4wH,UAAA,SAA0BD,EAAUprG,EAAYsrG,GAE9C,OADA1lH,OAAOoa,GAAS,GAAKA,EAAQ,IACtBsrG,EACH9K,OACE4K,EACApxD,QACEslD,QACAtyG,QAAQgT,KAGZsgG,QACE8K,EACApK,QACEhnD,QACEslD,QACAtyG,QAAQgT,sFC9BpB,SAAkBurG,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkB9wH,EAAA8wH,WAAA9wH,EAAA8wH,SAAQ,KAuI1B9wH,EAAAwvB,YAAA,SAA4BxuB,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAg9D,aAAA,SAA6Bh8D,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAs7D,eAAA,SAA+Bt6D,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAi/D,aAAA,SAA6Bj+D,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAy8D,kBAAA,SAAkCz7D,GAChC,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAmLqButB,EAnLYvtB,GAoL9B,GAAKutB,EAAO,QACnBwiG,EAAmBxiG,EAAayiG,GAFzC,IAAkCziG,GA/KlCvuB,EAAA08D,mBAAA,SAAmC17D,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAA48D,iBAAA,SAAiC57D,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAyKoButB,EAzKYvtB,GA0K7B,GAAKutB,EAAO,QACnBwiG,EAAmBxiG,EAAa0iG,GAFzC,IAAiC1iG,GArKjC,IAAMyiG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\n import {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\nimport { AbiData } from \"./abi\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiData{\n    let abiData = new AbiData(this);\n    return abiData;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\n import {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.FUNCTIONTYPE) {\n      let explicitThisType = (<FunctionTypeNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<FunctionTypeNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.NAMEDTYPE);\n    var typeNode = <NamedTypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var isSimpleType = !typeName.next;\n\n    // look up in contextual type arguments if a simple type\n    if (isSimpleType) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle built-in types\n      if (isSimpleType) {\n        switch (typeName.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(typeNode, context, contextualTypeArguments, reportMode);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n\n          // }\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                propertyAccess.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","import { ClassPrototype, Element, ElementKind, TypeDefinition, Class } from \"../program\";\nimport { DeclarationStatement, DecoratorKind, NamedTypeNode, ClassDeclaration, Node } from \"../ast\";\nimport { Signature } from \"../types\";\n\nexport class IndentUtil{\n    private body: Array<string> = new Array<string>();\n    private indent1: string = \"  \";\n    private padding: string=\"\";\n\n    constructor(indentNum: i32=0) {\n        while (indentNum > 0) {\n            this.padding += this.indent1;\n            indentNum--;\n        }\n    }\n\n    pushRow(row: string): void{\n        this.body.push(this.padding + row);\n    }\n\n    addPadding(): void{\n        this.padding += this.indent1;\n    }\n\n    subPadding(): void{\n        this.padding = this.padding.replace(this.indent1, \"\");\n    }\n\n    addAll(body: string[]): void{\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    get content(): string[]{\n        return this.body;\n    }\n}\n\nexport class AbiHelper {\n    /**\n     * Main node support internal abi type\n     * bool\n     */\n    static abiTypeLookup: Map<string, string> = new Map([\n      [\"i8\", \"int8\"],\n      [\"i16\", \"int16\"],\n      [\"i32\", \"int32\"],\n      [\"i64\", \"int64\"],\n      [\"isize\", \"uin32\"],\n      [\"u8\", \"uint8\"],\n      [\"u16\", \"uint16\"],\n      [\"u32\", \"uint32\"],\n      [\"u64\", \"uint64\"],\n      [\"usize\", \"usize\"],\n      [\"f32\", \"float32\"],\n      [\"f64\", \"float64\"],\n      [\"bool\", \"bool\"],\n      [\"boolean\", \"bool\"],\n      [\"string\", \"string\"],\n      [\"String\", \"string\"],\n      [\"Bytes\", \"bytes\"],\n        [\"hash160\", \"string\"],\n        [\"hash256\", \"string\"],\n        [\"hash512\", \"string\"],\n        [\"publicKey\", \"string\"],\n        [\"signature\", \"string\"],\n        [\"Address\", \"address\"],\n        [\"Asset\", \"asset\"],\n    ]);\n  }\n\nexport class AstUtil{\n        /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    static extendedContract(prototype: ClassPrototype): bool{\n        let basePrototype: ClassPrototype | null = prototype.basePrototype;\n        if (basePrototype && basePrototype.name == \"Contract\") {\n            return true;\n        }\n        return false;\n    }\n\n    static haveDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool{\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static impledInterface(declaration: ClassDeclaration, interfaceName: string): bool{\n        let implementsTypes = declaration.implementsTypes;\n        if (implementsTypes) {\n            for (let type of implementsTypes) {\n                if (type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n\n    }\n\n    //check if the class has implemented the Serializable interface or not.\n    static impledSerializable(prototype: ClassPrototype | null): bool{\n        if (!prototype) {\n            return false;\n        }\n        let impled = this.impledInterface(<ClassDeclaration>prototype.declaration, \"Serializable\");\n        let parentImpled = this.impledSerializable(prototype.basePrototype);\n        return impled || parentImpled;\n    }\n\n    static isString(typeName: string): bool{\n        return typeName == \"string\" || typeName == \"String\";\n    }\n\n\n    static isArray(typeName: string): bool {\n        return typeName == \"[]\" || typeName == \"Array\";\n    }\n\n\n    static isMap(typeName: string): bool {\n        return typeName == \"Map\" || typeName == \"ArrayMap\";\n    }\n\n    static isArrayMap(typeName: string): bool {\n        return \"ArrayMap\" == typeName;\n    }\n}\n\nexport enum AbiType{\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\nexport class TypeAnalyzer{\n    parent: Element;\n    typeNode: NamedTypeNode;\n    typeName: string;\n    abiType: AbiType;\n\n    constructor(parent: Element, typeNode: NamedTypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        this.typeName = typeNode.name.range.toString();\n        this.abiType=this.getAbiType();\n    }\n\n    private getAbiType(): AbiType{\n        if (AstUtil.isString(this.typeName)) {\n            return AbiType.STRING;\n        }\n        if (AstUtil.isArray(this.typeName)) {\n            return AbiType.ARRAY;\n        }\n        if (AstUtil.isMap(this.typeName)) {\n            return AbiType.MAP;\n        }\n        let type = this.lookupElement(this.typeName);\n        if (type&&type.kind==ElementKind.CLASS_PROTOTYPE) {\n            return AbiType.CLASS;\n        }\n        return AbiType.NUMBER;\n    }\n\n    lookupElement(typeName: string): Element | null{\n        return this.parent.lookup(typeName);\n    }\n\n    getAbiDeclareType(): string{\n        let abiType = this.getAbiType();\n        switch (abiType) {\n            case AbiType.STRING: {\n                return \"string\";\n            }\n            case AbiType.NUMBER:\n            case AbiType.CLASS: {\n                return this.typeName;\n            }\n            case AbiType.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiType.MAP: {\n                if (AstUtil.isArrayMap(this.typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                }else {\n                    return `${this.getArgs().join(\",\")}{}`;    \n                }\n            }\n            default: {\n                return this.typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[]{\n        let args = this.typeNode.typeArguments;\n        let argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[]{\n        let args = this.getArgs();\n        if (args.length != 0) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    //find the source Abi Type\n    findSourceAbiType(typeName: string): string{\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        let element = this.lookupElement(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    //find the source type (not abi!!!)\n    findSourceAsType(typeName: string): string{\n        let element = this.lookupElement(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsType(aliasTypeName);\n        }\n        return typeName;\n    }\n\n\n\n    getArrayArgAbiType(): AbiType{\n        let typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiType.STRING;\n        }\n\n        //find the sourceAsElement\n        let sourceTypeName = this.findSourceAsType(typeName);\n        let sourceType = this.lookupElement(sourceTypeName);\n        if (sourceType != null && sourceType.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiType.CLASS;\n        }\n        return AbiType.NUMBER;\n    }\n\n    getArrayArgType(): string{\n        return this.getArgs()[0];\n    }\n}","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","//refer to EOS's and Ultrain's doc\n\nimport { Program, Element, ElementKind, ClassPrototype, FunctionPrototype } from \"./program\";\nimport {IndentUtil, AstUtil, TypeAnalyzer, AbiType, AbiHelper} from \"./util/abiutil\";\nimport { indent } from \"./util\";\nimport { DecoratorKind, FunctionDeclaration,ParameterNode, NamedTypeNode, DeclarationStatement, ClassDeclaration, NodeKind, FieldDeclaration, TypeNode, BreakStatement, Expression} from \"./ast\";\nimport { Strings } from \"./util/primitiveutil\";\nimport { SerializeInserter, InsertPoint, SerializePoint } from \"./inserter\";\n\n\n\nclass TypeDef{\n  new_type_name: string;\n  type: string;\n  constructor(newTypeName: string, type: string) {\n    this.new_type_name = newTypeName;\n    this.type = type;\n  }\n}\n\n\nclass StructDef{\n  name: string;\n  base: string;\n  fileds: Array<Object> = new Array<Object>();\n  constructor(name: string=\"\", base: string=\"\") {\n    this.name = name;\n    this.base = base;\n  }\n\n  pushFields(name: string, type: string) {\n    this.fileds.push({ \"name\": name, \"type\": type });\n  }\n}\n\nclass ActionDef{\n  name: string;\n  type: string;\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\nclass TableDef{\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"string\"];\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\nclass AbiDef{\n  version: string = \"Damoclis VM:1.0\";\n  types: Array<TypeDef> = new Array<TypeDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiData {\n  abi: AbiDef = new AbiDef();\n  program: Program;\n  code: string = \"\";\n\n  typeLookup: Map<string, string> = new Map();\n  structLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();  //save the element with the kind Class_Prototype\n  typeAliasSet: Set<string> = new Set<string>();\n  insertPoints: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.init();\n  }\n\n  private init(): void {\n    let serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    let serializePoints = serializeInserter.getInsertPoints();\n    this.insertPoints = InsertPoint.toSortedMap(serializePoints);\n\n    let indenter = new IndentUtil();\n    indenter.pushRow(\"export function apply():void{\")\n\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let prototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classAttatchCode: Array<string> = this.resolveClassPrototype(prototype);\n          indenter.addAll(classAttatchCode);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    indenter.pushRow(\"}\");\n    this.code = indenter.content.join(\"\\n\");\n    console.log(this.code);\n    console.log(\"init done!\");\n  }\n\n  //get the attach code (apply function)\n  //valid only for the class extends Contract!\n  private resolveClassPrototype(prototype: ClassPrototype): Array<string> {\n    //resolve the database decorator for every class\n    this.getDatabaseInfo(prototype);\n    if (prototype.instanceMembers && AstUtil.extendedContract(prototype)) {\n      console.log(\"find the class extended Contract!\");\n      let body = new Array<string>();\n      let actionDecorate = false;\n      let contractName = prototype.name;\n      let contractInstance = \"_\" + contractName;\n\n      body.push(`  let ${contractInstance}=new ${contractName}();`);\n      body.push(`  let ds = ${contractInstance}.getDataStream();`);\n      \n\n      //resolve the func with the action decorator\n      for (let [key, instance] of prototype.instanceMembers) {\n        if (this.isActionFuncPrototype(instance)) {\n          actionDecorate = true;\n          let funcProto = <FunctionPrototype>instance;\n          this.resolveFuncPrototype(funcProto);\n\n          let declaration = <FunctionDeclaration>funcProto.declaration;\n          let funcName = declaration.name.range.toString();\n          let signature = declaration.signature;\n          body.push(`  if (${contractInstance}.isAction(\"${funcName}\")){`)\n\n          let allParams = new Array<string>();\n          //insert the code to get the actionData and call the action\n          for (let i = 0; i < signature.parameters.length; i++) {\n            let param = signature.parameters[i];\n            let typeInfo = new TypeAnalyzer(funcProto, <NamedTypeNode>param.type);\n            let paramName = param.name.range.toString();\n            allParams.push(paramName);\n            //if the param is not array type\n            if (typeInfo.abiType != AbiType.ARRAY) {\n              switch (typeInfo.abiType) {\n                case AbiType.STRING:\n                  body.push(`    let ${paramName}=ds.readString();`);\n                  break;\n                case AbiType.NUMBER:\n                  body.push(`    let ${paramName}=ds.read<${typeInfo.typeName}>();`);\n                  break;\n                default:\n                  //first resolve the calss type.\n                  let ele = funcProto.lookup(typeInfo.typeName);\n                  let classProto = <ClassPrototype>ele;\n                  this.classToStruct(classProto);\n                  //Bytes special treatments\n                  if (typeInfo.typeName == \"Bytes\") {\n                    body.push(`    let size=ds.readVarint32();`);\n                    body.push(`    let ${paramName}=new Bytes(size);`);\n                    body.push(`    for(let i:u32=0;i<size;i++){`);\n                    body.push(`      let temp=ds.read<u8>();`);\n                    body.push(`      ${paramName}[i]=temp;`);\n                    body.push(`    }`);\n                  } else {\n                    body.push(`    let ${paramName}=new ${typeInfo.typeName}();`)\n                    body.push(`    ${paramName}.deserialize(ds)`);\n                  }\n              }\n            } else {  //if the param type is Array\n              let argAbiType = typeInfo.getArrayArgAbiType();\n              let argTypeName = typeInfo.getArrayArgType();\n              switch (argAbiType) {\n                case AbiType.NUMBER:\n                  body.push(`    let ${paramName}=ds.readVector<${argTypeName}>();`);\n                  break;\n                case AbiType.STRING:\n                  body.push(`    let ${paramName}=ds.readStringVector();`);\n                  break;\n                default:\n                  body.push(`    let ${paramName}=ds.readComplexVector<${argTypeName}>();`);\n                  break;\n              }\n            }\n          }\n\n          //insert the return code \n          //Todo: array type?\n          let returnTypeInfo = new TypeAnalyzer(funcProto, <NamedTypeNode>signature.returnType);\n          if (returnTypeInfo.typeName == \"void\") {\n            body.push(`    ${contractInstance}.${funcName}(${allParams.join(\",\")});`);\n          } else {\n            console.log(\"return type is \" + returnTypeInfo.typeName);\n            //only support builtin type to return\n            if (AbiHelper.abiTypeLookup.get(returnTypeInfo.typeName) == null) {\n              throw new Error(\"only support to return builtin type\");\n            }\n            body.push(`    let result=${contractInstance}.${funcName}(${allParams.join(\",\")});`);\n            if (returnTypeInfo.abiType == AbiType.NUMBER) {\n              body.push(`    ${contractInstance}.ReturnU64(<u64>result);`);\n            }else if (returnTypeInfo.abiType == AbiType.STRING) {\n              body.push(`    ${contractInstance}.ReturnString(result);`);\n            } else {\n              body.push(`    ${contractInstance}.ReturnBytes(result.bytes);`)\n            }\n          }\n\n          body.push(\"  }\");\n        }\n      }\n      if (actionDecorate) {\n        return body;\n      }\n    }\n\n\n    return new Array();\n  }\n\n  //resolve the database decorators\n  private getDatabaseInfo(prototype: ClassPrototype) :void{\n    let decorators = prototype.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      //Decorator argument must have only one argument\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        if (decorator.arguments.length != 1) {\n          throw new Error(\"Database decorator must have only one argument!\");\n        }\n        let type = prototype.name;  \n        let name = this.getString(prototype, decorator.arguments[0]);\n        this.abi.tables.push(new TableDef(name, type));\n        \n        this.classToStruct(prototype);\n      }\n    }\n  }\n\n  //get the string:\n  //1. delete the quotation\n  //Todo: 2. get the string from the constant\n  private getString(ele: Element, expr: Expression): string{\n    let arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    return \"\";\n  }\n\n  private isActionFuncPrototype(element: Element): bool{\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcPrototype = <FunctionPrototype>element;\n      return AstUtil.haveDecorator(funcPrototype.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n\n  private resolveFuncPrototype(prototype: FunctionPrototype):void{\n    let declaration = <FunctionDeclaration>prototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = declaration.signature;\n\n    let struct = new StructDef(funcName);\n\n    //resolve the parameters of a function\n    let parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type = parameter.type;\n      let typeInfo = new TypeAnalyzer(prototype, <NamedTypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.pushFields(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    let action: ActionDef = new ActionDef(funcName,funcName);\n    this.abi.actions.push(action);\n  }\n\n  private addAbiTypeAlias(typeInfo: TypeAnalyzer): void{\n    let asTypes = typeInfo.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n\n      //if this argument is alias type, get its basic type\n      let abiType = typeInfo.findSourceAbiType(asType);\n      if (abiType && abiType != asType) {\n        this.abi.types.push(new TypeDef(asType, abiType));\n      }\n\n      //if this argument is class, convert it to struct\n      let element = typeInfo.lookupElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let prototype = <ClassPrototype>element;\n        this.classToStruct(prototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n\n  }\n\n  private classToStruct(prototype: ClassPrototype): void{\n    if (!this.typeLookup.get(prototype.name)) {\n      let struct = new StructDef();\n      struct.name = prototype.name;\n      this.addFiledFromClass(prototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  private addFiledFromClass(prototype: ClassPrototype, struct: StructDef): void{\n    let members: DeclarationStatement[] = (<ClassDeclaration>prototype.declaration).members;\n    if (prototype.basePrototype && AstUtil.impledSerializable(prototype.basePrototype)) {\n      this.addFiledFromClass(prototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = fieldDeclare.name.range.toString();\n        let memberType: TypeNode | null = fieldDeclare.type;\n        if (memberType) {\n          let typeInfo: TypeAnalyzer = new TypeAnalyzer(prototype, <NamedTypeNode>memberType);\n          let abiType = typeInfo.getAbiDeclareType();\n          struct.pushFields(memberName, abiType);\n          this.addAbiTypeAlias(typeInfo);\n        }\n      }\n    }\n  }\n\n  private addToStruct(struct: StructDef): void{\n    if (!this.structLookup.has(struct.name)) {\n      this.abi.structs.push(struct);\n      this.structLookup.set(struct.name, struct);\n    }\n  }\n\n\n\n\n}\n","import {\n    ClassDeclaration,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    NamedTypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    AbiType,\n    TypeAnalyzer,\n} from \"./util/abiutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\nimport { AbiHelper } from \"./util/abiutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        let a = map.keys();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        //return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n        return this.range.line +1 ;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"key\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: TypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: TypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE) {\n                    let typeNode = <NamedTypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n\n\n                // if (commonType && commonType.kind == NodeKind.NAMEDTYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                //     countOfPkDecorator++;\n                //     Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                //     let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <TypeNode>commonType);\n                //     if (!typeNodeAnalyzer.isPrimaryType()) {\n                //         throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                //     }\n                //     serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                // }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return \"\";`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: NamedTypeNode): string[] {\n        var typeAnalyzer: TypeAnalyzer = new TypeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeAnalyzer.abiType==AbiType.ARRAY) {\n            let argAbiTypeEnum = typeAnalyzer.getArrayArgAbiType();\n            let argTypeName = typeAnalyzer.getArrayArgType();\n            if (argAbiTypeEnum == AbiType.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiType.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeAnalyzer.abiType;\n            if (abiTypeEnum == AbiType.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiType.NUMBER) {\n                indent.add(`ds.write<${typeAnalyzer.typeName}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeAnalyzer.typeName};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: NamedTypeNode): string[] {\n        var typeAnalyzer: TypeAnalyzer = new TypeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeAnalyzer.abiType==AbiType.ARRAY) {\n            let argAbiTypeEnum = typeAnalyzer.getArrayArgAbiType();\n            let argTypeName = typeAnalyzer.getArrayArgType();\n\n            if (argAbiTypeEnum == AbiType.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiType.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeAnalyzer.abiType;\n            if (abiTypeEnum == AbiType.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiType.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeAnalyzer.typeName()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atStart);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`key(): string {`);\n        console.log(`This class declaration is ${range.toString}`);\n        console.log(`at line ${range.line}`)\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n"],"sourceRoot":""}